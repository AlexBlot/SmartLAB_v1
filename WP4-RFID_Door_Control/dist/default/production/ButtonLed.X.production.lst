

Microchip Technology PIC LITE Macro Assembler V1.45 build -152302408 
                                                                                               Mon Jul 23 13:33:21 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	16LF1459
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK1,global,class=CODE,delta=2
     6                           	psect	stringtext1,global,class=STRCODE,delta=2
     7                           	psect	stringtext2,global,class=STRCODE,delta=2
     8                           	psect	stringtext3,global,class=STRCODE,delta=2
     9                           	psect	stringtext4,global,class=STRCODE,delta=2
    10                           	psect	cinit,global,class=CODE,merge=1,delta=2
    11                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    16                           	psect	inittext,global,class=CODE,delta=2
    17                           	psect	clrtext,global,class=CODE,delta=2
    18                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    19                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    20                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    21                           	psect	text1,local,class=CODE,merge=1,delta=2
    22                           	psect	text2,local,class=CODE,merge=1,delta=2
    23                           	psect	text3,local,class=CODE,merge=1,delta=2
    24                           	psect	text4,local,class=CODE,merge=1,delta=2
    25                           	psect	text5,local,class=CODE,merge=1,delta=2
    26                           	psect	text6,local,class=CODE,merge=1,delta=2
    27                           	psect	text7,local,class=CODE,merge=1,delta=2
    28                           	psect	text8,local,class=CODE,merge=1,delta=2
    29                           	psect	text9,local,class=CODE,merge=1,delta=2
    30                           	psect	text10,local,class=CODE,merge=1,delta=2
    31                           	psect	text11,local,class=CODE,merge=1,delta=2
    32                           	psect	text12,local,class=CODE,merge=1,delta=2
    33                           	psect	text13,local,class=CODE,merge=1,delta=2
    34                           	psect	text14,local,class=CODE,merge=1,delta=2
    35                           	psect	text15,local,class=CODE,merge=1,delta=2
    36                           	psect	text16,local,class=CODE,merge=1,delta=2
    37                           	psect	text17,local,class=CODE,merge=1,delta=2
    38                           	psect	text18,local,class=CODE,merge=1,delta=2
    39                           	psect	text19,local,class=CODE,merge=1,delta=2
    40                           	psect	text20,local,class=CODE,merge=1,delta=2
    41                           	psect	text21,local,class=CODE,merge=1,delta=2
    42                           	psect	text22,local,class=CODE,merge=1,delta=2
    43                           	psect	text23,local,class=CODE,merge=1,delta=2
    44                           	psect	text24,local,class=CODE,merge=1,delta=2
    45                           	psect	text25,local,class=CODE,merge=1,delta=2
    46                           	psect	text26,local,class=CODE,merge=1,delta=2
    47                           	psect	text27,local,class=CODE,merge=1,delta=2
    48                           	psect	text28,local,class=CODE,merge=1,delta=2
    49                           	psect	text29,local,class=CODE,merge=1,delta=2
    50                           	psect	intentry,global,class=CODE,delta=2
    51                           	dabs	1,0x620,48
    52                           	dabs	1,0x5BC,52
    53                           	dabs	1,0x238C,0,_buffer
    54                           	dabs	1,0x7E,2
    55  0000                     
    56                           ; Version 1.45
    57                           ; Generated 16/11/2017 GMT
    58                           ; 
    59                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    60                           ; All rights reserved.
    61                           ; 
    62                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    63                           ; 
    64                           ; Redistribution and use in source and binary forms, with or without modification, are
    65                           ; permitted provided that the following conditions are met:
    66                           ; 
    67                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    68                           ;        conditions and the following disclaimer.
    69                           ; 
    70                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    71                           ;        of conditions and the following disclaimer in the documentation and/or other
    72                           ;        materials provided with the distribution.
    73                           ; 
    74                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    75                           ;        software without specific prior written permission.
    76                           ; 
    77                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    78                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    79                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    80                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    81                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    82                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    83                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    84                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    85                           ; 
    86                           ; 
    87                           ; Code-generator required, PIC16LF1459 Definitions
    88                           ; 
    89                           ; SFR Addresses
    90  0000                     	;# 
    91  0001                     	;# 
    92  0002                     	;# 
    93  0003                     	;# 
    94  0004                     	;# 
    95  0005                     	;# 
    96  0006                     	;# 
    97  0007                     	;# 
    98  0008                     	;# 
    99  0009                     	;# 
   100  000A                     	;# 
   101  000B                     	;# 
   102  000C                     	;# 
   103  000D                     	;# 
   104  000E                     	;# 
   105  0011                     	;# 
   106  0012                     	;# 
   107  0015                     	;# 
   108  0016                     	;# 
   109  0016                     	;# 
   110  0017                     	;# 
   111  0018                     	;# 
   112  0019                     	;# 
   113  001A                     	;# 
   114  001B                     	;# 
   115  001C                     	;# 
   116  008C                     	;# 
   117  008D                     	;# 
   118  008E                     	;# 
   119  0091                     	;# 
   120  0092                     	;# 
   121  0095                     	;# 
   122  0096                     	;# 
   123  0097                     	;# 
   124  0098                     	;# 
   125  0099                     	;# 
   126  009A                     	;# 
   127  009B                     	;# 
   128  009B                     	;# 
   129  009C                     	;# 
   130  009D                     	;# 
   131  009E                     	;# 
   132  009F                     	;# 
   133  010C                     	;# 
   134  010D                     	;# 
   135  010E                     	;# 
   136  0111                     	;# 
   137  0112                     	;# 
   138  0113                     	;# 
   139  0114                     	;# 
   140  0115                     	;# 
   141  0116                     	;# 
   142  0117                     	;# 
   143  0118                     	;# 
   144  0119                     	;# 
   145  011D                     	;# 
   146  018C                     	;# 
   147  018D                     	;# 
   148  018E                     	;# 
   149  0191                     	;# 
   150  0191                     	;# 
   151  0192                     	;# 
   152  0193                     	;# 
   153  0193                     	;# 
   154  0194                     	;# 
   155  0195                     	;# 
   156  0196                     	;# 
   157  0199                     	;# 
   158  019A                     	;# 
   159  019B                     	;# 
   160  019B                     	;# 
   161  019C                     	;# 
   162  019D                     	;# 
   163  019E                     	;# 
   164  019F                     	;# 
   165  020C                     	;# 
   166  020D                     	;# 
   167  0211                     	;# 
   168  0211                     	;# 
   169  0212                     	;# 
   170  0212                     	;# 
   171  0213                     	;# 
   172  0213                     	;# 
   173  0214                     	;# 
   174  0214                     	;# 
   175  0215                     	;# 
   176  0215                     	;# 
   177  0215                     	;# 
   178  0216                     	;# 
   179  0216                     	;# 
   180  0217                     	;# 
   181  0217                     	;# 
   182  0391                     	;# 
   183  0392                     	;# 
   184  0393                     	;# 
   185  0394                     	;# 
   186  0395                     	;# 
   187  0396                     	;# 
   188  039A                     	;# 
   189  039B                     	;# 
   190  0611                     	;# 
   191  0612                     	;# 
   192  0613                     	;# 
   193  0613                     	;# 
   194  0614                     	;# 
   195  0615                     	;# 
   196  0616                     	;# 
   197  0616                     	;# 
   198  0691                     	;# 
   199  0692                     	;# 
   200  0693                     	;# 
   201  0694                     	;# 
   202  0695                     	;# 
   203  0E8E                     	;# 
   204  0E8F                     	;# 
   205  0E90                     	;# 
   206  0E91                     	;# 
   207  0E92                     	;# 
   208  0E93                     	;# 
   209  0E94                     	;# 
   210  0E94                     	;# 
   211  0E95                     	;# 
   212  0E96                     	;# 
   213  0E97                     	;# 
   214  0E98                     	;# 
   215  0E99                     	;# 
   216  0E9A                     	;# 
   217  0E9B                     	;# 
   218  0E9C                     	;# 
   219  0E9D                     	;# 
   220  0E9E                     	;# 
   221  0E9F                     	;# 
   222  0FE4                     	;# 
   223  0FE5                     	;# 
   224  0FE6                     	;# 
   225  0FE7                     	;# 
   226  0FE8                     	;# 
   227  0FE9                     	;# 
   228  0FEA                     	;# 
   229  0FEB                     	;# 
   230  0FED                     	;# 
   231  0FEE                     	;# 
   232  0FEF                     	;# 
   233  0000                     	;# 
   234  0001                     	;# 
   235  0002                     	;# 
   236  0003                     	;# 
   237  0004                     	;# 
   238  0005                     	;# 
   239  0006                     	;# 
   240  0007                     	;# 
   241  0008                     	;# 
   242  0009                     	;# 
   243  000A                     	;# 
   244  000B                     	;# 
   245  000C                     	;# 
   246  000D                     	;# 
   247  000E                     	;# 
   248  0011                     	;# 
   249  0012                     	;# 
   250  0015                     	;# 
   251  0016                     	;# 
   252  0016                     	;# 
   253  0017                     	;# 
   254  0018                     	;# 
   255  0019                     	;# 
   256  001A                     	;# 
   257  001B                     	;# 
   258  001C                     	;# 
   259  008C                     	;# 
   260  008D                     	;# 
   261  008E                     	;# 
   262  0091                     	;# 
   263  0092                     	;# 
   264  0095                     	;# 
   265  0096                     	;# 
   266  0097                     	;# 
   267  0098                     	;# 
   268  0099                     	;# 
   269  009A                     	;# 
   270  009B                     	;# 
   271  009B                     	;# 
   272  009C                     	;# 
   273  009D                     	;# 
   274  009E                     	;# 
   275  009F                     	;# 
   276  010C                     	;# 
   277  010D                     	;# 
   278  010E                     	;# 
   279  0111                     	;# 
   280  0112                     	;# 
   281  0113                     	;# 
   282  0114                     	;# 
   283  0115                     	;# 
   284  0116                     	;# 
   285  0117                     	;# 
   286  0118                     	;# 
   287  0119                     	;# 
   288  011D                     	;# 
   289  018C                     	;# 
   290  018D                     	;# 
   291  018E                     	;# 
   292  0191                     	;# 
   293  0191                     	;# 
   294  0192                     	;# 
   295  0193                     	;# 
   296  0193                     	;# 
   297  0194                     	;# 
   298  0195                     	;# 
   299  0196                     	;# 
   300  0199                     	;# 
   301  019A                     	;# 
   302  019B                     	;# 
   303  019B                     	;# 
   304  019C                     	;# 
   305  019D                     	;# 
   306  019E                     	;# 
   307  019F                     	;# 
   308  020C                     	;# 
   309  020D                     	;# 
   310  0211                     	;# 
   311  0211                     	;# 
   312  0212                     	;# 
   313  0212                     	;# 
   314  0213                     	;# 
   315  0213                     	;# 
   316  0214                     	;# 
   317  0214                     	;# 
   318  0215                     	;# 
   319  0215                     	;# 
   320  0215                     	;# 
   321  0216                     	;# 
   322  0216                     	;# 
   323  0217                     	;# 
   324  0217                     	;# 
   325  0391                     	;# 
   326  0392                     	;# 
   327  0393                     	;# 
   328  0394                     	;# 
   329  0395                     	;# 
   330  0396                     	;# 
   331  039A                     	;# 
   332  039B                     	;# 
   333  0611                     	;# 
   334  0612                     	;# 
   335  0613                     	;# 
   336  0613                     	;# 
   337  0614                     	;# 
   338  0615                     	;# 
   339  0616                     	;# 
   340  0616                     	;# 
   341  0691                     	;# 
   342  0692                     	;# 
   343  0693                     	;# 
   344  0694                     	;# 
   345  0695                     	;# 
   346  0E8E                     	;# 
   347  0E8F                     	;# 
   348  0E90                     	;# 
   349  0E91                     	;# 
   350  0E92                     	;# 
   351  0E93                     	;# 
   352  0E94                     	;# 
   353  0E94                     	;# 
   354  0E95                     	;# 
   355  0E96                     	;# 
   356  0E97                     	;# 
   357  0E98                     	;# 
   358  0E99                     	;# 
   359  0E9A                     	;# 
   360  0E9B                     	;# 
   361  0E9C                     	;# 
   362  0E9D                     	;# 
   363  0E9E                     	;# 
   364  0E9F                     	;# 
   365  0FE4                     	;# 
   366  0FE5                     	;# 
   367  0FE6                     	;# 
   368  0FE7                     	;# 
   369  0FE8                     	;# 
   370  0FE9                     	;# 
   371  0FEA                     	;# 
   372  0FEB                     	;# 
   373  0FED                     	;# 
   374  0FEE                     	;# 
   375  0FEF                     	;# 
   376  0000                     	;# 
   377  0001                     	;# 
   378  0002                     	;# 
   379  0003                     	;# 
   380  0004                     	;# 
   381  0005                     	;# 
   382  0006                     	;# 
   383  0007                     	;# 
   384  0008                     	;# 
   385  0009                     	;# 
   386  000A                     	;# 
   387  000B                     	;# 
   388  000C                     	;# 
   389  000D                     	;# 
   390  000E                     	;# 
   391  0011                     	;# 
   392  0012                     	;# 
   393  0015                     	;# 
   394  0016                     	;# 
   395  0016                     	;# 
   396  0017                     	;# 
   397  0018                     	;# 
   398  0019                     	;# 
   399  001A                     	;# 
   400  001B                     	;# 
   401  001C                     	;# 
   402  008C                     	;# 
   403  008D                     	;# 
   404  008E                     	;# 
   405  0091                     	;# 
   406  0092                     	;# 
   407  0095                     	;# 
   408  0096                     	;# 
   409  0097                     	;# 
   410  0098                     	;# 
   411  0099                     	;# 
   412  009A                     	;# 
   413  009B                     	;# 
   414  009B                     	;# 
   415  009C                     	;# 
   416  009D                     	;# 
   417  009E                     	;# 
   418  009F                     	;# 
   419  010C                     	;# 
   420  010D                     	;# 
   421  010E                     	;# 
   422  0111                     	;# 
   423  0112                     	;# 
   424  0113                     	;# 
   425  0114                     	;# 
   426  0115                     	;# 
   427  0116                     	;# 
   428  0117                     	;# 
   429  0118                     	;# 
   430  0119                     	;# 
   431  011D                     	;# 
   432  018C                     	;# 
   433  018D                     	;# 
   434  018E                     	;# 
   435  0191                     	;# 
   436  0191                     	;# 
   437  0192                     	;# 
   438  0193                     	;# 
   439  0193                     	;# 
   440  0194                     	;# 
   441  0195                     	;# 
   442  0196                     	;# 
   443  0199                     	;# 
   444  019A                     	;# 
   445  019B                     	;# 
   446  019B                     	;# 
   447  019C                     	;# 
   448  019D                     	;# 
   449  019E                     	;# 
   450  019F                     	;# 
   451  020C                     	;# 
   452  020D                     	;# 
   453  0211                     	;# 
   454  0211                     	;# 
   455  0212                     	;# 
   456  0212                     	;# 
   457  0213                     	;# 
   458  0213                     	;# 
   459  0214                     	;# 
   460  0214                     	;# 
   461  0215                     	;# 
   462  0215                     	;# 
   463  0215                     	;# 
   464  0216                     	;# 
   465  0216                     	;# 
   466  0217                     	;# 
   467  0217                     	;# 
   468  0391                     	;# 
   469  0392                     	;# 
   470  0393                     	;# 
   471  0394                     	;# 
   472  0395                     	;# 
   473  0396                     	;# 
   474  039A                     	;# 
   475  039B                     	;# 
   476  0611                     	;# 
   477  0612                     	;# 
   478  0613                     	;# 
   479  0613                     	;# 
   480  0614                     	;# 
   481  0615                     	;# 
   482  0616                     	;# 
   483  0616                     	;# 
   484  0691                     	;# 
   485  0692                     	;# 
   486  0693                     	;# 
   487  0694                     	;# 
   488  0695                     	;# 
   489  0E8E                     	;# 
   490  0E8F                     	;# 
   491  0E90                     	;# 
   492  0E91                     	;# 
   493  0E92                     	;# 
   494  0E93                     	;# 
   495  0E94                     	;# 
   496  0E94                     	;# 
   497  0E95                     	;# 
   498  0E96                     	;# 
   499  0E97                     	;# 
   500  0E98                     	;# 
   501  0E99                     	;# 
   502  0E9A                     	;# 
   503  0E9B                     	;# 
   504  0E9C                     	;# 
   505  0E9D                     	;# 
   506  0E9E                     	;# 
   507  0E9F                     	;# 
   508  0FE4                     	;# 
   509  0FE5                     	;# 
   510  0FE6                     	;# 
   511  0FE7                     	;# 
   512  0FE8                     	;# 
   513  0FE9                     	;# 
   514  0FEA                     	;# 
   515  0FEB                     	;# 
   516  0FED                     	;# 
   517  0FEE                     	;# 
   518  0FEF                     	;# 
   519  0000                     	;# 
   520  0001                     	;# 
   521  0002                     	;# 
   522  0003                     	;# 
   523  0004                     	;# 
   524  0005                     	;# 
   525  0006                     	;# 
   526  0007                     	;# 
   527  0008                     	;# 
   528  0009                     	;# 
   529  000A                     	;# 
   530  000B                     	;# 
   531  000C                     	;# 
   532  000D                     	;# 
   533  000E                     	;# 
   534  0011                     	;# 
   535  0012                     	;# 
   536  0015                     	;# 
   537  0016                     	;# 
   538  0016                     	;# 
   539  0017                     	;# 
   540  0018                     	;# 
   541  0019                     	;# 
   542  001A                     	;# 
   543  001B                     	;# 
   544  001C                     	;# 
   545  008C                     	;# 
   546  008D                     	;# 
   547  008E                     	;# 
   548  0091                     	;# 
   549  0092                     	;# 
   550  0095                     	;# 
   551  0096                     	;# 
   552  0097                     	;# 
   553  0098                     	;# 
   554  0099                     	;# 
   555  009A                     	;# 
   556  009B                     	;# 
   557  009B                     	;# 
   558  009C                     	;# 
   559  009D                     	;# 
   560  009E                     	;# 
   561  009F                     	;# 
   562  010C                     	;# 
   563  010D                     	;# 
   564  010E                     	;# 
   565  0111                     	;# 
   566  0112                     	;# 
   567  0113                     	;# 
   568  0114                     	;# 
   569  0115                     	;# 
   570  0116                     	;# 
   571  0117                     	;# 
   572  0118                     	;# 
   573  0119                     	;# 
   574  011D                     	;# 
   575  018C                     	;# 
   576  018D                     	;# 
   577  018E                     	;# 
   578  0191                     	;# 
   579  0191                     	;# 
   580  0192                     	;# 
   581  0193                     	;# 
   582  0193                     	;# 
   583  0194                     	;# 
   584  0195                     	;# 
   585  0196                     	;# 
   586  0199                     	;# 
   587  019A                     	;# 
   588  019B                     	;# 
   589  019B                     	;# 
   590  019C                     	;# 
   591  019D                     	;# 
   592  019E                     	;# 
   593  019F                     	;# 
   594  020C                     	;# 
   595  020D                     	;# 
   596  0211                     	;# 
   597  0211                     	;# 
   598  0212                     	;# 
   599  0212                     	;# 
   600  0213                     	;# 
   601  0213                     	;# 
   602  0214                     	;# 
   603  0214                     	;# 
   604  0215                     	;# 
   605  0215                     	;# 
   606  0215                     	;# 
   607  0216                     	;# 
   608  0216                     	;# 
   609  0217                     	;# 
   610  0217                     	;# 
   611  0391                     	;# 
   612  0392                     	;# 
   613  0393                     	;# 
   614  0394                     	;# 
   615  0395                     	;# 
   616  0396                     	;# 
   617  039A                     	;# 
   618  039B                     	;# 
   619  0611                     	;# 
   620  0612                     	;# 
   621  0613                     	;# 
   622  0613                     	;# 
   623  0614                     	;# 
   624  0615                     	;# 
   625  0616                     	;# 
   626  0616                     	;# 
   627  0691                     	;# 
   628  0692                     	;# 
   629  0693                     	;# 
   630  0694                     	;# 
   631  0695                     	;# 
   632  0E8E                     	;# 
   633  0E8F                     	;# 
   634  0E90                     	;# 
   635  0E91                     	;# 
   636  0E92                     	;# 
   637  0E93                     	;# 
   638  0E94                     	;# 
   639  0E94                     	;# 
   640  0E95                     	;# 
   641  0E96                     	;# 
   642  0E97                     	;# 
   643  0E98                     	;# 
   644  0E99                     	;# 
   645  0E9A                     	;# 
   646  0E9B                     	;# 
   647  0E9C                     	;# 
   648  0E9D                     	;# 
   649  0E9E                     	;# 
   650  0E9F                     	;# 
   651  0FE4                     	;# 
   652  0FE5                     	;# 
   653  0FE6                     	;# 
   654  0FE7                     	;# 
   655  0FE8                     	;# 
   656  0FE9                     	;# 
   657  0FEA                     	;# 
   658  0FEB                     	;# 
   659  0FED                     	;# 
   660  0FEE                     	;# 
   661  0FEF                     	;# 
   662  0000                     	;# 
   663  0001                     	;# 
   664  0002                     	;# 
   665  0003                     	;# 
   666  0004                     	;# 
   667  0005                     	;# 
   668  0006                     	;# 
   669  0007                     	;# 
   670  0008                     	;# 
   671  0009                     	;# 
   672  000A                     	;# 
   673  000B                     	;# 
   674  000C                     	;# 
   675  000D                     	;# 
   676  000E                     	;# 
   677  0011                     	;# 
   678  0012                     	;# 
   679  0015                     	;# 
   680  0016                     	;# 
   681  0016                     	;# 
   682  0017                     	;# 
   683  0018                     	;# 
   684  0019                     	;# 
   685  001A                     	;# 
   686  001B                     	;# 
   687  001C                     	;# 
   688  008C                     	;# 
   689  008D                     	;# 
   690  008E                     	;# 
   691  0091                     	;# 
   692  0092                     	;# 
   693  0095                     	;# 
   694  0096                     	;# 
   695  0097                     	;# 
   696  0098                     	;# 
   697  0099                     	;# 
   698  009A                     	;# 
   699  009B                     	;# 
   700  009B                     	;# 
   701  009C                     	;# 
   702  009D                     	;# 
   703  009E                     	;# 
   704  009F                     	;# 
   705  010C                     	;# 
   706  010D                     	;# 
   707  010E                     	;# 
   708  0111                     	;# 
   709  0112                     	;# 
   710  0113                     	;# 
   711  0114                     	;# 
   712  0115                     	;# 
   713  0116                     	;# 
   714  0117                     	;# 
   715  0118                     	;# 
   716  0119                     	;# 
   717  011D                     	;# 
   718  018C                     	;# 
   719  018D                     	;# 
   720  018E                     	;# 
   721  0191                     	;# 
   722  0191                     	;# 
   723  0192                     	;# 
   724  0193                     	;# 
   725  0193                     	;# 
   726  0194                     	;# 
   727  0195                     	;# 
   728  0196                     	;# 
   729  0199                     	;# 
   730  019A                     	;# 
   731  019B                     	;# 
   732  019B                     	;# 
   733  019C                     	;# 
   734  019D                     	;# 
   735  019E                     	;# 
   736  019F                     	;# 
   737  020C                     	;# 
   738  020D                     	;# 
   739  0211                     	;# 
   740  0211                     	;# 
   741  0212                     	;# 
   742  0212                     	;# 
   743  0213                     	;# 
   744  0213                     	;# 
   745  0214                     	;# 
   746  0214                     	;# 
   747  0215                     	;# 
   748  0215                     	;# 
   749  0215                     	;# 
   750  0216                     	;# 
   751  0216                     	;# 
   752  0217                     	;# 
   753  0217                     	;# 
   754  0391                     	;# 
   755  0392                     	;# 
   756  0393                     	;# 
   757  0394                     	;# 
   758  0395                     	;# 
   759  0396                     	;# 
   760  039A                     	;# 
   761  039B                     	;# 
   762  0611                     	;# 
   763  0612                     	;# 
   764  0613                     	;# 
   765  0613                     	;# 
   766  0614                     	;# 
   767  0615                     	;# 
   768  0616                     	;# 
   769  0616                     	;# 
   770  0691                     	;# 
   771  0692                     	;# 
   772  0693                     	;# 
   773  0694                     	;# 
   774  0695                     	;# 
   775  0E8E                     	;# 
   776  0E8F                     	;# 
   777  0E90                     	;# 
   778  0E91                     	;# 
   779  0E92                     	;# 
   780  0E93                     	;# 
   781  0E94                     	;# 
   782  0E94                     	;# 
   783  0E95                     	;# 
   784  0E96                     	;# 
   785  0E97                     	;# 
   786  0E98                     	;# 
   787  0E99                     	;# 
   788  0E9A                     	;# 
   789  0E9B                     	;# 
   790  0E9C                     	;# 
   791  0E9D                     	;# 
   792  0E9E                     	;# 
   793  0E9F                     	;# 
   794  0FE4                     	;# 
   795  0FE5                     	;# 
   796  0FE6                     	;# 
   797  0FE7                     	;# 
   798  0FE8                     	;# 
   799  0FE9                     	;# 
   800  0FEA                     	;# 
   801  0FEB                     	;# 
   802  0FED                     	;# 
   803  0FEE                     	;# 
   804  0FEF                     	;# 
   805  0000                     	;# 
   806  0001                     	;# 
   807  0002                     	;# 
   808  0003                     	;# 
   809  0004                     	;# 
   810  0005                     	;# 
   811  0006                     	;# 
   812  0007                     	;# 
   813  0008                     	;# 
   814  0009                     	;# 
   815  000A                     	;# 
   816  000B                     	;# 
   817  000C                     	;# 
   818  000D                     	;# 
   819  000E                     	;# 
   820  0011                     	;# 
   821  0012                     	;# 
   822  0015                     	;# 
   823  0016                     	;# 
   824  0016                     	;# 
   825  0017                     	;# 
   826  0018                     	;# 
   827  0019                     	;# 
   828  001A                     	;# 
   829  001B                     	;# 
   830  001C                     	;# 
   831  008C                     	;# 
   832  008D                     	;# 
   833  008E                     	;# 
   834  0091                     	;# 
   835  0092                     	;# 
   836  0095                     	;# 
   837  0096                     	;# 
   838  0097                     	;# 
   839  0098                     	;# 
   840  0099                     	;# 
   841  009A                     	;# 
   842  009B                     	;# 
   843  009B                     	;# 
   844  009C                     	;# 
   845  009D                     	;# 
   846  009E                     	;# 
   847  009F                     	;# 
   848  010C                     	;# 
   849  010D                     	;# 
   850  010E                     	;# 
   851  0111                     	;# 
   852  0112                     	;# 
   853  0113                     	;# 
   854  0114                     	;# 
   855  0115                     	;# 
   856  0116                     	;# 
   857  0117                     	;# 
   858  0118                     	;# 
   859  0119                     	;# 
   860  011D                     	;# 
   861  018C                     	;# 
   862  018D                     	;# 
   863  018E                     	;# 
   864  0191                     	;# 
   865  0191                     	;# 
   866  0192                     	;# 
   867  0193                     	;# 
   868  0193                     	;# 
   869  0194                     	;# 
   870  0195                     	;# 
   871  0196                     	;# 
   872  0199                     	;# 
   873  019A                     	;# 
   874  019B                     	;# 
   875  019B                     	;# 
   876  019C                     	;# 
   877  019D                     	;# 
   878  019E                     	;# 
   879  019F                     	;# 
   880  020C                     	;# 
   881  020D                     	;# 
   882  0211                     	;# 
   883  0211                     	;# 
   884  0212                     	;# 
   885  0212                     	;# 
   886  0213                     	;# 
   887  0213                     	;# 
   888  0214                     	;# 
   889  0214                     	;# 
   890  0215                     	;# 
   891  0215                     	;# 
   892  0215                     	;# 
   893  0216                     	;# 
   894  0216                     	;# 
   895  0217                     	;# 
   896  0217                     	;# 
   897  0391                     	;# 
   898  0392                     	;# 
   899  0393                     	;# 
   900  0394                     	;# 
   901  0395                     	;# 
   902  0396                     	;# 
   903  039A                     	;# 
   904  039B                     	;# 
   905  0611                     	;# 
   906  0612                     	;# 
   907  0613                     	;# 
   908  0613                     	;# 
   909  0614                     	;# 
   910  0615                     	;# 
   911  0616                     	;# 
   912  0616                     	;# 
   913  0691                     	;# 
   914  0692                     	;# 
   915  0693                     	;# 
   916  0694                     	;# 
   917  0695                     	;# 
   918  0E8E                     	;# 
   919  0E8F                     	;# 
   920  0E90                     	;# 
   921  0E91                     	;# 
   922  0E92                     	;# 
   923  0E93                     	;# 
   924  0E94                     	;# 
   925  0E94                     	;# 
   926  0E95                     	;# 
   927  0E96                     	;# 
   928  0E97                     	;# 
   929  0E98                     	;# 
   930  0E99                     	;# 
   931  0E9A                     	;# 
   932  0E9B                     	;# 
   933  0E9C                     	;# 
   934  0E9D                     	;# 
   935  0E9E                     	;# 
   936  0E9F                     	;# 
   937  0FE4                     	;# 
   938  0FE5                     	;# 
   939  0FE6                     	;# 
   940  0FE7                     	;# 
   941  0FE8                     	;# 
   942  0FE9                     	;# 
   943  0FEA                     	;# 
   944  0FEB                     	;# 
   945  0FED                     	;# 
   946  0FEE                     	;# 
   947  0FEF                     	;# 
   948  0000                     	;# 
   949  0001                     	;# 
   950  0002                     	;# 
   951  0003                     	;# 
   952  0004                     	;# 
   953  0005                     	;# 
   954  0006                     	;# 
   955  0007                     	;# 
   956  0008                     	;# 
   957  0009                     	;# 
   958  000A                     	;# 
   959  000B                     	;# 
   960  000C                     	;# 
   961  000D                     	;# 
   962  000E                     	;# 
   963  0011                     	;# 
   964  0012                     	;# 
   965  0015                     	;# 
   966  0016                     	;# 
   967  0016                     	;# 
   968  0017                     	;# 
   969  0018                     	;# 
   970  0019                     	;# 
   971  001A                     	;# 
   972  001B                     	;# 
   973  001C                     	;# 
   974  008C                     	;# 
   975  008D                     	;# 
   976  008E                     	;# 
   977  0091                     	;# 
   978  0092                     	;# 
   979  0095                     	;# 
   980  0096                     	;# 
   981  0097                     	;# 
   982  0098                     	;# 
   983  0099                     	;# 
   984  009A                     	;# 
   985  009B                     	;# 
   986  009B                     	;# 
   987  009C                     	;# 
   988  009D                     	;# 
   989  009E                     	;# 
   990  009F                     	;# 
   991  010C                     	;# 
   992  010D                     	;# 
   993  010E                     	;# 
   994  0111                     	;# 
   995  0112                     	;# 
   996  0113                     	;# 
   997  0114                     	;# 
   998  0115                     	;# 
   999  0116                     	;# 
  1000  0117                     	;# 
  1001  0118                     	;# 
  1002  0119                     	;# 
  1003  011D                     	;# 
  1004  018C                     	;# 
  1005  018D                     	;# 
  1006  018E                     	;# 
  1007  0191                     	;# 
  1008  0191                     	;# 
  1009  0192                     	;# 
  1010  0193                     	;# 
  1011  0193                     	;# 
  1012  0194                     	;# 
  1013  0195                     	;# 
  1014  0196                     	;# 
  1015  0199                     	;# 
  1016  019A                     	;# 
  1017  019B                     	;# 
  1018  019B                     	;# 
  1019  019C                     	;# 
  1020  019D                     	;# 
  1021  019E                     	;# 
  1022  019F                     	;# 
  1023  020C                     	;# 
  1024  020D                     	;# 
  1025  0211                     	;# 
  1026  0211                     	;# 
  1027  0212                     	;# 
  1028  0212                     	;# 
  1029  0213                     	;# 
  1030  0213                     	;# 
  1031  0214                     	;# 
  1032  0214                     	;# 
  1033  0215                     	;# 
  1034  0215                     	;# 
  1035  0215                     	;# 
  1036  0216                     	;# 
  1037  0216                     	;# 
  1038  0217                     	;# 
  1039  0217                     	;# 
  1040  0391                     	;# 
  1041  0392                     	;# 
  1042  0393                     	;# 
  1043  0394                     	;# 
  1044  0395                     	;# 
  1045  0396                     	;# 
  1046  039A                     	;# 
  1047  039B                     	;# 
  1048  0611                     	;# 
  1049  0612                     	;# 
  1050  0613                     	;# 
  1051  0613                     	;# 
  1052  0614                     	;# 
  1053  0615                     	;# 
  1054  0616                     	;# 
  1055  0616                     	;# 
  1056  0691                     	;# 
  1057  0692                     	;# 
  1058  0693                     	;# 
  1059  0694                     	;# 
  1060  0695                     	;# 
  1061  0E8E                     	;# 
  1062  0E8F                     	;# 
  1063  0E90                     	;# 
  1064  0E91                     	;# 
  1065  0E92                     	;# 
  1066  0E93                     	;# 
  1067  0E94                     	;# 
  1068  0E94                     	;# 
  1069  0E95                     	;# 
  1070  0E96                     	;# 
  1071  0E97                     	;# 
  1072  0E98                     	;# 
  1073  0E99                     	;# 
  1074  0E9A                     	;# 
  1075  0E9B                     	;# 
  1076  0E9C                     	;# 
  1077  0E9D                     	;# 
  1078  0E9E                     	;# 
  1079  0E9F                     	;# 
  1080  0FE4                     	;# 
  1081  0FE5                     	;# 
  1082  0FE6                     	;# 
  1083  0FE7                     	;# 
  1084  0FE8                     	;# 
  1085  0FE9                     	;# 
  1086  0FEA                     	;# 
  1087  0FEB                     	;# 
  1088  0FED                     	;# 
  1089  0FEE                     	;# 
  1090  0FEF                     	;# 
  1091  0000                     	;# 
  1092  0001                     	;# 
  1093  0002                     	;# 
  1094  0003                     	;# 
  1095  0004                     	;# 
  1096  0005                     	;# 
  1097  0006                     	;# 
  1098  0007                     	;# 
  1099  0008                     	;# 
  1100  0009                     	;# 
  1101  000A                     	;# 
  1102  000B                     	;# 
  1103  000C                     	;# 
  1104  000D                     	;# 
  1105  000E                     	;# 
  1106  0011                     	;# 
  1107  0012                     	;# 
  1108  0015                     	;# 
  1109  0016                     	;# 
  1110  0016                     	;# 
  1111  0017                     	;# 
  1112  0018                     	;# 
  1113  0019                     	;# 
  1114  001A                     	;# 
  1115  001B                     	;# 
  1116  001C                     	;# 
  1117  008C                     	;# 
  1118  008D                     	;# 
  1119  008E                     	;# 
  1120  0091                     	;# 
  1121  0092                     	;# 
  1122  0095                     	;# 
  1123  0096                     	;# 
  1124  0097                     	;# 
  1125  0098                     	;# 
  1126  0099                     	;# 
  1127  009A                     	;# 
  1128  009B                     	;# 
  1129  009B                     	;# 
  1130  009C                     	;# 
  1131  009D                     	;# 
  1132  009E                     	;# 
  1133  009F                     	;# 
  1134  010C                     	;# 
  1135  010D                     	;# 
  1136  010E                     	;# 
  1137  0111                     	;# 
  1138  0112                     	;# 
  1139  0113                     	;# 
  1140  0114                     	;# 
  1141  0115                     	;# 
  1142  0116                     	;# 
  1143  0117                     	;# 
  1144  0118                     	;# 
  1145  0119                     	;# 
  1146  011D                     	;# 
  1147  018C                     	;# 
  1148  018D                     	;# 
  1149  018E                     	;# 
  1150  0191                     	;# 
  1151  0191                     	;# 
  1152  0192                     	;# 
  1153  0193                     	;# 
  1154  0193                     	;# 
  1155  0194                     	;# 
  1156  0195                     	;# 
  1157  0196                     	;# 
  1158  0199                     	;# 
  1159  019A                     	;# 
  1160  019B                     	;# 
  1161  019B                     	;# 
  1162  019C                     	;# 
  1163  019D                     	;# 
  1164  019E                     	;# 
  1165  019F                     	;# 
  1166  020C                     	;# 
  1167  020D                     	;# 
  1168  0211                     	;# 
  1169  0211                     	;# 
  1170  0212                     	;# 
  1171  0212                     	;# 
  1172  0213                     	;# 
  1173  0213                     	;# 
  1174  0214                     	;# 
  1175  0214                     	;# 
  1176  0215                     	;# 
  1177  0215                     	;# 
  1178  0215                     	;# 
  1179  0216                     	;# 
  1180  0216                     	;# 
  1181  0217                     	;# 
  1182  0217                     	;# 
  1183  0391                     	;# 
  1184  0392                     	;# 
  1185  0393                     	;# 
  1186  0394                     	;# 
  1187  0395                     	;# 
  1188  0396                     	;# 
  1189  039A                     	;# 
  1190  039B                     	;# 
  1191  0611                     	;# 
  1192  0612                     	;# 
  1193  0613                     	;# 
  1194  0613                     	;# 
  1195  0614                     	;# 
  1196  0615                     	;# 
  1197  0616                     	;# 
  1198  0616                     	;# 
  1199  0691                     	;# 
  1200  0692                     	;# 
  1201  0693                     	;# 
  1202  0694                     	;# 
  1203  0695                     	;# 
  1204  0E8E                     	;# 
  1205  0E8F                     	;# 
  1206  0E90                     	;# 
  1207  0E91                     	;# 
  1208  0E92                     	;# 
  1209  0E93                     	;# 
  1210  0E94                     	;# 
  1211  0E94                     	;# 
  1212  0E95                     	;# 
  1213  0E96                     	;# 
  1214  0E97                     	;# 
  1215  0E98                     	;# 
  1216  0E99                     	;# 
  1217  0E9A                     	;# 
  1218  0E9B                     	;# 
  1219  0E9C                     	;# 
  1220  0E9D                     	;# 
  1221  0E9E                     	;# 
  1222  0E9F                     	;# 
  1223  0FE4                     	;# 
  1224  0FE5                     	;# 
  1225  0FE6                     	;# 
  1226  0FE7                     	;# 
  1227  0FE8                     	;# 
  1228  0FE9                     	;# 
  1229  0FEA                     	;# 
  1230  0FEB                     	;# 
  1231  0FED                     	;# 
  1232  0FEE                     	;# 
  1233  0FEF                     	;_buffer
  1234                           
  1235                           	psect	idataBANK0
  1236  0F04                     __pidataBANK0:	
  1237                           
  1238                           ;initializer for _GTSN2
  1239  0F04  340C               	retlw	12
  1240  0F05  3409               	retlw	9
  1241  0F06  3452               	retlw	82
  1242  0F07  34A3               	retlw	163
  1243                           
  1244                           ;initializer for _GTSN1
  1245  0F08  347B               	retlw	123
  1246  0F09  34B3               	retlw	179
  1247  0F0A  3452               	retlw	82
  1248  0F0B  34C3               	retlw	195
  1249                           
  1250                           	psect	idataBANK1
  1251  07C3                     __pidataBANK1:	
  1252                           
  1253                           ;initializer for _writeData
  1254  07C3  3473               	retlw	115
  1255  07C4  346D               	retlw	109
  1256  07C5  3461               	retlw	97
  1257  07C6  3472               	retlw	114
  1258  07C7  3474               	retlw	116
  1259  07C8  344C               	retlw	76
  1260  07C9  3441               	retlw	65
  1261  07CA  3442               	retlw	66
  1262  07CB  3400               	retlw	0
  1263                           
  1264                           ;initializer for _key
  1265  07CC  34FF               	retlw	255
  1266  07CD  34FF               	retlw	255
  1267  07CE  34FF               	retlw	255
  1268  07CF  34FF               	retlw	255
  1269  07D0  34FF               	retlw	255
  1270  07D1  34FF               	retlw	255
  1271                           
  1272                           ;initializer for main@F3009
  1273  07D2  3400               	retlw	0
  1274  07D3  3401               	retlw	1
  1275  07D4  3400               	retlw	0
  1276  07D5  3403               	retlw	3
  1277  07D6  340D               	retlw	13
  1278                           
  1279                           ;initializer for _GTSN4
  1280  07D7  3470               	retlw	112
  1281  07D8  3415               	retlw	21
  1282  07D9  34A3               	retlw	163
  1283  07DA  342B               	retlw	43
  1284                           
  1285                           ;initializer for _GTSN3
  1286  07DB  3470               	retlw	112
  1287  07DC  34EB               	retlw	235
  1288  07DD  34B7               	retlw	183
  1289  07DE  342B               	retlw	43
  1290                           
  1291                           	psect	stringtext1
  1292  05E1                     __pstringtext1:	
  1293  05E1                     _FM17522_firmware_reference:	
  1294  05E1  3400               	retlw	0
  1295  05E2  34D6               	retlw	214
  1296  05E3  3478               	retlw	120
  1297  05E4  348C               	retlw	140
  1298  05E5  34E2               	retlw	226
  1299  05E6  34AA               	retlw	170
  1300  05E7  340C               	retlw	12
  1301  05E8  3418               	retlw	24
  1302  05E9  342A               	retlw	42
  1303  05EA  34B8               	retlw	184
  1304  05EB  347A               	retlw	122
  1305  05EC  347F               	retlw	127
  1306  05ED  34D3               	retlw	211
  1307  05EE  346A               	retlw	106
  1308  05EF  34CF               	retlw	207
  1309  05F0  340B               	retlw	11
  1310  05F1  34B1               	retlw	177
  1311  05F2  3437               	retlw	55
  1312  05F3  3463               	retlw	99
  1313  05F4  344B               	retlw	75
  1314  05F5  3469               	retlw	105
  1315  05F6  34AE               	retlw	174
  1316  05F7  3491               	retlw	145
  1317  05F8  34C7               	retlw	199
  1318  05F9  34C3               	retlw	195
  1319  05FA  3497               	retlw	151
  1320  05FB  34AE               	retlw	174
  1321  05FC  3477               	retlw	119
  1322  05FD  34F4               	retlw	244
  1323  05FE  3437               	retlw	55
  1324  05FF  34D7               	retlw	215
  1325  0600  349B               	retlw	155
  1326  0601  347C               	retlw	124
  1327  0602  34F5               	retlw	245
  1328  0603  343C               	retlw	60
  1329  0604  3411               	retlw	17
  1330  0605  348F               	retlw	143
  1331  0606  3415               	retlw	21
  1332  0607  34C3               	retlw	195
  1333  0608  34D7               	retlw	215
  1334  0609  34C1               	retlw	193
  1335  060A  345B               	retlw	91
  1336  060B  3400               	retlw	0
  1337  060C  342A               	retlw	42
  1338  060D  34D0               	retlw	208
  1339  060E  3475               	retlw	117
  1340  060F  34DE               	retlw	222
  1341  0610  349E               	retlw	158
  1342  0611  3451               	retlw	81
  1343  0612  3464               	retlw	100
  1344  0613  34AB               	retlw	171
  1345  0614  343E               	retlw	62
  1346  0615  34E9               	retlw	233
  1347  0616  3415               	retlw	21
  1348  0617  34B5               	retlw	181
  1349  0618  34AB               	retlw	171
  1350  0619  3456               	retlw	86
  1351  061A  349A               	retlw	154
  1352  061B  3498               	retlw	152
  1353  061C  3482               	retlw	130
  1354  061D  3426               	retlw	38
  1355  061E  34EA               	retlw	234
  1356  061F  342A               	retlw	42
  1357  0620  3462               	retlw	98
  1358  0621                     __end_of_FM17522_firmware_reference:	
  1359                           
  1360                           	psect	stringtext2
  1361  0621                     __pstringtext2:	
  1362  0621                     _MFRC522_firmware_referenceV2_0:	
  1363  0621  3400               	retlw	0
  1364  0622  34EB               	retlw	235
  1365  0623  3466               	retlw	102
  1366  0624  34BA               	retlw	186
  1367  0625  3457               	retlw	87
  1368  0626  34BF               	retlw	191
  1369  0627  3423               	retlw	35
  1370  0628  3495               	retlw	149
  1371  0629  34D0               	retlw	208
  1372  062A  34E3               	retlw	227
  1373  062B  340D               	retlw	13
  1374  062C  343D               	retlw	61
  1375  062D  3427               	retlw	39
  1376  062E  3489               	retlw	137
  1377  062F  345C               	retlw	92
  1378  0630  34DE               	retlw	222
  1379  0631  349D               	retlw	157
  1380  0632  343B               	retlw	59
  1381  0633  34A7               	retlw	167
  1382  0634  3400               	retlw	0
  1383  0635  3421               	retlw	33
  1384  0636  345B               	retlw	91
  1385  0637  3489               	retlw	137
  1386  0638  3482               	retlw	130
  1387  0639  3451               	retlw	81
  1388  063A  343A               	retlw	58
  1389  063B  34EB               	retlw	235
  1390  063C  3402               	retlw	2
  1391  063D  340C               	retlw	12
  1392  063E  34A5               	retlw	165
  1393  063F  3400               	retlw	0
  1394  0640  3449               	retlw	73
  1395  0641  347C               	retlw	124
  1396  0642  3484               	retlw	132
  1397  0643  344D               	retlw	77
  1398  0644  34B3               	retlw	179
  1399  0645  34CC               	retlw	204
  1400  0646  34D2               	retlw	210
  1401  0647  341B               	retlw	27
  1402  0648  3481               	retlw	129
  1403  0649  345D               	retlw	93
  1404  064A  3448               	retlw	72
  1405  064B  3476               	retlw	118
  1406  064C  34D5               	retlw	213
  1407  064D  3471               	retlw	113
  1408  064E  3461               	retlw	97
  1409  064F  3421               	retlw	33
  1410  0650  34A9               	retlw	169
  1411  0651  3486               	retlw	134
  1412  0652  3496               	retlw	150
  1413  0653  3483               	retlw	131
  1414  0654  3438               	retlw	56
  1415  0655  34CF               	retlw	207
  1416  0656  349D               	retlw	157
  1417  0657  345B               	retlw	91
  1418  0658  346D               	retlw	109
  1419  0659  34DC               	retlw	220
  1420  065A  3415               	retlw	21
  1421  065B  34BA               	retlw	186
  1422  065C  343E               	retlw	62
  1423  065D  347D               	retlw	125
  1424  065E  3495               	retlw	149
  1425  065F  343B               	retlw	59
  1426  0660  342F               	retlw	47
  1427  0661                     __end_of_MFRC522_firmware_referenceV2_0:	
  1428                           
  1429                           	psect	stringtext3
  1430  0661                     __pstringtext3:	
  1431  0661                     _MFRC522_firmware_referenceV1_0:	
  1432  0661  3400               	retlw	0
  1433  0662  34C6               	retlw	198
  1434  0663  3437               	retlw	55
  1435  0664  34D5               	retlw	213
  1436  0665  3432               	retlw	50
  1437  0666  34B7               	retlw	183
  1438  0667  3457               	retlw	87
  1439  0668  345C               	retlw	92
  1440  0669  34C2               	retlw	194
  1441  066A  34D8               	retlw	216
  1442  066B  347C               	retlw	124
  1443  066C  344D               	retlw	77
  1444  066D  34D9               	retlw	217
  1445  066E  3470               	retlw	112
  1446  066F  34C7               	retlw	199
  1447  0670  3473               	retlw	115
  1448  0671  3410               	retlw	16
  1449  0672  34E6               	retlw	230
  1450  0673  34D2               	retlw	210
  1451  0674  34AA               	retlw	170
  1452  0675  345E               	retlw	94
  1453  0676  34A1               	retlw	161
  1454  0677  343E               	retlw	62
  1455  0678  345A               	retlw	90
  1456  0679  3414               	retlw	20
  1457  067A  34AF               	retlw	175
  1458  067B  3430               	retlw	48
  1459  067C  3461               	retlw	97
  1460  067D  34C9               	retlw	201
  1461  067E  3470               	retlw	112
  1462  067F  34DB               	retlw	219
  1463  0680  342E               	retlw	46
  1464  0681  3464               	retlw	100
  1465  0682  3422               	retlw	34
  1466  0683  3472               	retlw	114
  1467  0684  34B5               	retlw	181
  1468  0685  34BD               	retlw	189
  1469  0686  3465               	retlw	101
  1470  0687  34F4               	retlw	244
  1471  0688  34EC               	retlw	236
  1472  0689  3422               	retlw	34
  1473  068A  34BC               	retlw	188
  1474  068B  34D3               	retlw	211
  1475  068C  3472               	retlw	114
  1476  068D  3435               	retlw	53
  1477  068E  34CD               	retlw	205
  1478  068F  34AA               	retlw	170
  1479  0690  3441               	retlw	65
  1480  0691  341F               	retlw	31
  1481  0692  34A7               	retlw	167
  1482  0693  34F3               	retlw	243
  1483  0694  3453               	retlw	83
  1484  0695  3414               	retlw	20
  1485  0696  34DE               	retlw	222
  1486  0697  347E               	retlw	126
  1487  0698  3402               	retlw	2
  1488  0699  34D9               	retlw	217
  1489  069A  340F               	retlw	15
  1490  069B  34B5               	retlw	181
  1491  069C  345E               	retlw	94
  1492  069D  3425               	retlw	37
  1493  069E  341D               	retlw	29
  1494  069F  3429               	retlw	41
  1495  06A0  3479               	retlw	121
  1496  06A1                     __end_of_MFRC522_firmware_referenceV1_0:	
  1497                           
  1498                           	psect	stringtext4
  1499  06A1                     __pstringtext4:	
  1500  06A1                     _MFRC522_firmware_referenceV0_0:	
  1501  06A1  3400               	retlw	0
  1502  06A2  3487               	retlw	135
  1503  06A3  3498               	retlw	152
  1504  06A4  340F               	retlw	15
  1505  06A5  3449               	retlw	73
  1506  06A6  34FF               	retlw	255
  1507  06A7  3407               	retlw	7
  1508  06A8  3419               	retlw	25
  1509  06A9  34BF               	retlw	191
  1510  06AA  3422               	retlw	34
  1511  06AB  3430               	retlw	48
  1512  06AC  3449               	retlw	73
  1513  06AD  3459               	retlw	89
  1514  06AE  3463               	retlw	99
  1515  06AF  34AD               	retlw	173
  1516  06B0  34CA               	retlw	202
  1517  06B1  347F               	retlw	127
  1518  06B2  34E3               	retlw	227
  1519  06B3  344E               	retlw	78
  1520  06B4  3403               	retlw	3
  1521  06B5  345C               	retlw	92
  1522  06B6  344E               	retlw	78
  1523  06B7  3449               	retlw	73
  1524  06B8  3450               	retlw	80
  1525  06B9  3447               	retlw	71
  1526  06BA  349A               	retlw	154
  1527  06BB  3437               	retlw	55
  1528  06BC  3461               	retlw	97
  1529  06BD  34E7               	retlw	231
  1530  06BE  34E2               	retlw	226
  1531  06BF  34C6               	retlw	198
  1532  06C0  342E               	retlw	46
  1533  06C1  3475               	retlw	117
  1534  06C2  345A               	retlw	90
  1535  06C3  34ED               	retlw	237
  1536  06C4  3404               	retlw	4
  1537  06C5  343D               	retlw	61
  1538  06C6  3402               	retlw	2
  1539  06C7  344B               	retlw	75
  1540  06C8  3478               	retlw	120
  1541  06C9  3432               	retlw	50
  1542  06CA  34FF               	retlw	255
  1543  06CB  3458               	retlw	88
  1544  06CC  343B               	retlw	59
  1545  06CD  347C               	retlw	124
  1546  06CE  34E9               	retlw	233
  1547  06CF  3400               	retlw	0
  1548  06D0  3494               	retlw	148
  1549  06D1  34B4               	retlw	180
  1550  06D2  344A               	retlw	74
  1551  06D3  3459               	retlw	89
  1552  06D4  345B               	retlw	91
  1553  06D5  34FD               	retlw	253
  1554  06D6  34C9               	retlw	201
  1555  06D7  3429               	retlw	41
  1556  06D8  34DF               	retlw	223
  1557  06D9  3435               	retlw	53
  1558  06DA  3496               	retlw	150
  1559  06DB  3498               	retlw	152
  1560  06DC  349E               	retlw	158
  1561  06DD  344F               	retlw	79
  1562  06DE  3430               	retlw	48
  1563  06DF  3432               	retlw	50
  1564  06E0  348D               	retlw	141
  1565  06E1                     __end_of_MFRC522_firmware_referenceV0_0:	
  1566  0011                     _PIR1bits	set	17
  1567  0016                     _TMR1L	set	22
  1568  0017                     _TMR1H	set	23
  1569  0018                     _T1CONbits	set	24
  1570  000C                     _PORTAbits	set	12
  1571  000E                     _PORTCbits	set	14
  1572  000B                     _INTCONbits	set	11
  1573  008D                     _RCIF	set	141
  1574  0091                     _PIE1bits	set	145
  1575  0099                     _OSCCONbits	set	153
  1576  008C                     _TRISAbits	set	140
  1577  008D                     _TRISBbits	set	141
  1578  008E                     _TRISCbits	set	142
  1579  010E                     _LATCbits	set	270
  1580  010C                     _LATAbits	set	268
  1581  019B                     _SPBRG	set	411
  1582  0199                     _RCREG	set	409
  1583  019A                     _TXREG	set	410
  1584  019D                     _RCSTAbits	set	413
  1585  019F                     _BAUDCONbits	set	415
  1586  019E                     _TXSTAbits	set	414
  1587  018E                     _ANSELC	set	398
  1588  018D                     _ANSELB	set	397
  1589  018C                     _ANSELA	set	396
  1590  0CEC                     _CREN	set	3308
  1591  0CE9                     _OERR	set	3305
  1592  0CF1                     _TRMT	set	3313
  1593  0214                     _SSPSTATbits	set	532
  1594  0211                     _SSPBUF	set	529
  1595  0215                     _SSPCON1bits	set	533
  1596  0392                     _IOCANbits	set	914
  1597  0391                     _IOCAPbits	set	913
  1598  0393                     _IOCAFbits	set	915
  1599                           
  1600                           ; #config settings
  1601  0000                     
  1602                           	psect	cinit
  1603  003F                     start_initialization:	
  1604  003F                     __initialization:		;BIGRAM
  1605                           
  1606                           ; Initialize objects allocated to BANK0
  1607  003F  3004               	movlw	low __pidataBANK0
  1608  0040  0084               	movwf	4
  1609  0041  308F               	movlw	(high __pidataBANK0)| (0+128)
  1610  0042  0085               	movwf	5
  1611  0043  3066               	movlw	low __pdataBANK0
  1612  0044  0086               	movwf	6
  1613  0045  3000               	movlw	high __pdataBANK0
  1614  0046  0087               	movwf	7
  1615  0047  3000               	movlw	0
  1616  0048  00FF               	movwf	btemp+1
  1617  0049  3008               	movlw	8
  1618  004A  318F  273F  3180   	fcall	init_ram
  1619                           
  1620                           ; Initialize objects allocated to BANK1
  1621  004D  30C3               	movlw	low __pidataBANK1
  1622  004E  0084               	movwf	4
  1623  004F  3087               	movlw	(high __pidataBANK1)| (0+128)
  1624  0050  0085               	movwf	5
  1625  0051  30A0               	movlw	low __pdataBANK1
  1626  0052  0086               	movwf	6
  1627  0053  3000               	movlw	high __pdataBANK1
  1628  0054  0087               	movwf	7
  1629  0055  3000               	movlw	0
  1630  0056  00FF               	movwf	btemp+1
  1631  0057  301C               	movlw	28
  1632  0058  318F  273F  3180   	fcall	init_ram
  1633                           
  1634                           ; Clear objects allocated to BIGRAM
  1635  005B  308C               	movlw	low (0+9100)
  1636  005C  0084               	movwf	4
  1637  005D  3023               	movlw	high (0+9100)
  1638  005E  0085               	movwf	5
  1639  005F  3064               	movlw	100
  1640  0060  00FE               	movwf	btemp
  1641  0061  3000               	movlw	0
  1642  0062  00FF               	movwf	btemp+1
  1643  0063  318F  2733  3180   	fcall	clear_ram0
  1644                           
  1645                           ; Clear objects allocated to COMMON
  1646  0066  01FA               	clrf	__pbssCOMMON& (0+127)
  1647  0067  01FB               	clrf	(__pbssCOMMON+1)& (0+127)
  1648                           
  1649                           ; Clear objects allocated to BANK0
  1650  0068  01EE               	clrf	__pbssBANK0& (0+127)
  1651  0069  01EF               	clrf	(__pbssBANK0+1)& (0+127)
  1652                           
  1653                           ; Clear objects allocated to BANK1
  1654  006A  30BC               	movlw	low __pbssBANK1
  1655  006B  0084               	movwf	4
  1656  006C  3000               	movlw	high __pbssBANK1
  1657  006D  0085               	movwf	5
  1658  006E  300A               	movlw	10
  1659  006F  00FE               	movwf	btemp
  1660  0070  3000               	movlw	0
  1661  0071  00FF               	movwf	btemp+1
  1662  0072  318F  2733         	fcall	clear_ram0
  1663  0074                     end_of_initialization:	
  1664                           ;End of C runtime variable initialization code
  1665                           
  1666  0074                     __end_of__initialization:	
  1667  0074  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  1668  0075  0020               	movlb	0
  1669  0076  3180  2878         	ljmp	_main	;jump to C main() function
  1670                           
  1671                           	psect	bssCOMMON
  1672  007A                     __pbssCOMMON:	
  1673  007A                     _TMR_CNT:	
  1674  007A                     	ds	1
  1675  007B                     _MUSHROOM_ON:	
  1676  007B                     	ds	1
  1677                           
  1678                           	psect	bssBANK0
  1679  006E                     __pbssBANK0:	
  1680  006E                     _cc:	
  1681  006E                     	ds	1
  1682  006F                     _SW:	
  1683  006F                     	ds	1
  1684                           
  1685                           	psect	dataBANK0
  1686  0066                     __pdataBANK0:	
  1687  0066                     _GTSN2:	
  1688  0066                     	ds	4
  1689  006A                     _GTSN1:	
  1690  006A                     	ds	4
  1691                           
  1692                           	psect	bssBANK1
  1693  00BC                     __pbssBANK1:	
  1694  00BC                     main@F3024:	
  1695  00BC                     	ds	5
  1696  00C1                     main@F3017:	
  1697  00C1                     	ds	5
  1698                           
  1699                           	psect	dataBANK1
  1700  00A0                     __pdataBANK1:	
  1701  00A0                     _writeData:	
  1702  00A0                     	ds	9
  1703  00A9                     _key:	
  1704  00A9                     	ds	6
  1705  00AF                     main@F3009:	
  1706  00AF                     	ds	5
  1707  00B4                     _GTSN4:	
  1708  00B4                     	ds	4
  1709  00B8                     _GTSN3:	
  1710  00B8                     	ds	4
  1711                           
  1712                           	psect	inittext
  1713  0F3F                     init_ram:	
  1714  0F3F  00FE               	movwf	126
  1715  0F40                     initloop:	
  1716  0F40  0012               	moviw fsr0++
  1717  0F41  001E               	movwi fsr1++
  1718  0F42  3001               	movlw	1
  1719  0F43  02FE               	subwf	126,f
  1720  0F44  3000               	movlw	0
  1721  0F45  3BFF               	subwfb	127,f
  1722  0F46  087F               	movf	127,w
  1723  0F47  047E               	iorwf	126,w
  1724  0F48  1903               	btfsc	3,2
  1725  0F49  3400               	retlw	0
  1726  0F4A  2F40               	goto	initloop
  1727                           
  1728                           	psect	clrtext
  1729  0F33                     clear_ram0:	
  1730                           ;	Called with FSR0 containing the base address, and
  1731                           ;	btemp/btemp+1 has the size to clear
  1732                           
  1733  0F33  0064               	clrwdt	;clear the watchdog before getting into this loop
  1734  0F34                     clrloop0:	
  1735  0F34  0180               	clrf	0	;clear RAM location pointed to by FSR
  1736  0F35  3101               	addfsr 0,1
  1737  0F36  3001               	movlw	1
  1738  0F37  02FE               	subwf	126,f
  1739  0F38  3000               	movlw	0
  1740  0F39  3BFF               	subwfb	127,f
  1741  0F3A  087F               	movf	127,w
  1742  0F3B  047E               	iorwf	126,w
  1743  0F3C  1903               	btfsc	3,2
  1744  0F3D  3400               	retlw	0	;all done for this memory range, return
  1745  0F3E  2F34               	goto	clrloop0	;have we reached the end yet?
  1746                           
  1747                           	psect	cstackCOMMON
  1748  0070                     __pcstackCOMMON:	
  1749  0070                     ?_ConfigureOscillator:	
  1750  0070                     ?_InitApp:	
  1751                           ; 1 bytes @ 0x0
  1752                           
  1753  0070                     ?_SPI_init:	
  1754                           ; 1 bytes @ 0x0
  1755                           
  1756  0070                     ?_MFRC522_Init:	
  1757                           ; 1 bytes @ 0x0
  1758                           
  1759  0070                     ?_ReadRegister:	
  1760                           ; 1 bytes @ 0x0
  1761                           
  1762  0070                     ?_nRF_Setup_Write:	
  1763                           ; 1 bytes @ 0x0
  1764                           
  1765  0070                     ?_FlushTXRX:	
  1766                           ; 1 bytes @ 0x0
  1767                           
  1768  0070                     ?_MFRC522_isCard:	
  1769                           ; 1 bytes @ 0x0
  1770                           
  1771  0070                     ?_MFRC522_ReadCardSerial:	
  1772                           ; 1 bytes @ 0x0
  1773                           
  1774  0070                     ?_MFRC522_SelectTag:	
  1775                           ; 1 bytes @ 0x0
  1776                           
  1777  0070                     ?_nRF_Setup_Read:	
  1778                           ; 1 bytes @ 0x0
  1779                           
  1780  0070                     ?_nRF_available:	
  1781                           ; 1 bytes @ 0x0
  1782                           
  1783  0070                     ?_MFRC522_Halt:	
  1784                           ; 1 bytes @ 0x0
  1785                           
  1786  0070                     ?_WriteCommand:	
  1787                           ; 1 bytes @ 0x0
  1788                           
  1789  0070                     ?_main:	
  1790                           ; 1 bytes @ 0x0
  1791                           
  1792  0070                     ?_SPI_transfer:	
  1793                           ; 1 bytes @ 0x0
  1794                           
  1795  0070                     ?_MFRC522_Reset:	
  1796                           ; 1 bytes @ 0x0
  1797                           
  1798  0070                     ?_MFRC522_AntennaOn:	
  1799                           ; 1 bytes @ 0x0
  1800                           
  1801  0070                     ?_MFRC522_AntiColl:	
  1802                           ; 1 bytes @ 0x0
  1803                           
  1804  0070                     ?_ReadRegisterRF:	
  1805                           ; 1 bytes @ 0x0
  1806                           
  1807  0070                     ?_isr:	
  1808                           ; 1 bytes @ 0x0
  1809                           
  1810  0070                     ??_isr:	
  1811                           ; 1 bytes @ 0x0
  1812                           
  1813                           
  1814                           ; 1 bytes @ 0x0
  1815  0070                     	ds	2
  1816  0072                     ??_ConfigureOscillator:	
  1817  0072                     ??_InitApp:	
  1818                           ; 1 bytes @ 0x2
  1819                           
  1820  0072                     ??_SPI_init:	
  1821                           ; 1 bytes @ 0x2
  1822                           
  1823  0072                     ??_SPI_transfer:	
  1824                           ; 1 bytes @ 0x2
  1825                           
  1826  0072                     SPI_transfer@data:	
  1827                           ; 1 bytes @ 0x2
  1828                           
  1829                           
  1830                           ; 1 bytes @ 0x2
  1831  0072                     	ds	1
  1832  0073                     ??_ReadRegister:	
  1833  0073                     ?_WriteRegisterRF:	
  1834                           ; 1 bytes @ 0x3
  1835                           
  1836  0073                     ?_WritePayload:	
  1837                           ; 1 bytes @ 0x3
  1838                           
  1839  0073                     ?_ReadPayload:	
  1840                           ; 1 bytes @ 0x3
  1841                           
  1842  0073                     ??_WriteCommand:	
  1843                           ; 1 bytes @ 0x3
  1844                           
  1845  0073                     ?_WriteAddress:	
  1846                           ; 1 bytes @ 0x3
  1847                           
  1848  0073                     ??_ReadRegisterRF:	
  1849                           ; 1 bytes @ 0x3
  1850                           
  1851  0073                     WriteRegisterRF@val:	
  1852                           ; 1 bytes @ 0x3
  1853                           
  1854  0073                     WriteAddress@num:	
  1855                           ; 1 bytes @ 0x3
  1856                           
  1857  0073                     WriteCommand@command:	
  1858                           ; 1 bytes @ 0x3
  1859                           
  1860  0073                     WritePayload@data:	
  1861                           ; 1 bytes @ 0x3
  1862                           
  1863  0073                     ReadPayload@data:	
  1864                           ; 1 bytes @ 0x3
  1865                           
  1866                           
  1867                           ; 1 bytes @ 0x3
  1868  0073                     	ds	1
  1869  0074                     ??_WriteRegisterRF:	
  1870  0074                     ??_WritePayload:	
  1871                           ; 1 bytes @ 0x4
  1872                           
  1873  0074                     ??_ReadPayload:	
  1874                           ; 1 bytes @ 0x4
  1875                           
  1876  0074                     ReadRegister@reg:	
  1877                           ; 1 bytes @ 0x4
  1878                           
  1879  0074                     WriteRegisterRF@reg:	
  1880                           ; 1 bytes @ 0x4
  1881                           
  1882  0074                     WriteAddress@addr:	
  1883                           ; 1 bytes @ 0x4
  1884                           
  1885  0074                     ReadRegisterRF@reg:	
  1886                           ; 1 bytes @ 0x4
  1887                           
  1888                           
  1889                           ; 1 bytes @ 0x4
  1890  0074                     	ds	1
  1891  0075                     ??_FlushTXRX:	
  1892  0075                     ??_WriteAddress:	
  1893                           ; 1 bytes @ 0x5
  1894                           
  1895  0075                     ReadRegister@val:	
  1896                           ; 1 bytes @ 0x5
  1897                           
  1898  0075                     ReadRegisterRF@temp:	
  1899                           ; 1 bytes @ 0x5
  1900                           
  1901  0075                     WritePayload@num:	
  1902                           ; 1 bytes @ 0x5
  1903                           
  1904                           
  1905                           ; 1 bytes @ 0x5
  1906  0075                     	ds	1
  1907  0076                     ?_WriteRegister:	
  1908  0076                     WriteRegister@val:	
  1909                           ; 1 bytes @ 0x6
  1910                           
  1911  0076                     WriteAddress@reg:	
  1912                           ; 1 bytes @ 0x6
  1913                           
  1914  0076                     ReadRegisterRF@temp1:	
  1915                           ; 1 bytes @ 0x6
  1916                           
  1917  0076                     WritePayload@i:	
  1918                           ; 1 bytes @ 0x6
  1919                           
  1920  0076                     ReadPayload@num:	
  1921                           ; 1 bytes @ 0x6
  1922                           
  1923                           
  1924                           ; 1 bytes @ 0x6
  1925  0076                     	ds	1
  1926  0077                     ??_WriteRegister:	
  1927  0077                     ??_nRF_available:	
  1928                           ; 1 bytes @ 0x7
  1929                           
  1930  0077                     WriteRegister@reg:	
  1931                           ; 1 bytes @ 0x7
  1932                           
  1933  0077                     ReadPayload@i:	
  1934                           ; 1 bytes @ 0x7
  1935                           
  1936  0077                     WriteAddress@i:	
  1937                           ; 1 bytes @ 0x7
  1938                           
  1939                           
  1940                           ; 2 bytes @ 0x7
  1941  0077                     	ds	1
  1942  0078                     ?_MFRC522_Clear_Bit:	
  1943  0078                     ?_MFRC522_Set_Bit:	
  1944                           ; 1 bytes @ 0x8
  1945                           
  1946  0078                     ??_MFRC522_Reset:	
  1947                           ; 1 bytes @ 0x8
  1948                           
  1949  0078                     MFRC522_Clear_Bit@mask:	
  1950                           ; 1 bytes @ 0x8
  1951                           
  1952  0078                     MFRC522_Set_Bit@mask:	
  1953                           ; 1 bytes @ 0x8
  1954                           
  1955                           
  1956                           ; 1 bytes @ 0x8
  1957  0078                     	ds	1
  1958  0079                     ??_MFRC522_Set_Bit:	
  1959  0079                     MFRC522_Clear_Bit@addr:	
  1960                           ; 1 bytes @ 0x9
  1961                           
  1962                           
  1963                           ; 1 bytes @ 0x9
  1964  0079                     	ds	1
  1965                           
  1966                           	psect	cstackBANK0
  1967  0020                     __pcstackBANK0:	
  1968  0020                     ??_nRF_Setup_Write:	
  1969  0020                     ??_nRF_Setup_Read:	
  1970                           ; 1 bytes @ 0x0
  1971                           
  1972  0020                     ??_MFRC522_Clear_Bit:	
  1973                           ; 1 bytes @ 0x0
  1974                           
  1975  0020                     MFRC522_Set_Bit@addr:	
  1976                           ; 1 bytes @ 0x0
  1977                           
  1978                           
  1979                           ; 1 bytes @ 0x0
  1980  0020                     	ds	1
  1981  0021                     ??_MFRC522_AntennaOn:	
  1982                           
  1983                           ; 1 bytes @ 0x1
  1984  0021                     	ds	1
  1985  0022                     ??_MFRC522_Init:	
  1986  0022                     ?_MFRC522_ToCard:	
  1987                           ; 1 bytes @ 0x2
  1988                           
  1989  0022                     ?_MFRC522_CRC:	
  1990                           ; 1 bytes @ 0x2
  1991                           
  1992  0022                     MFRC522_ToCard@sendData:	
  1993                           ; 1 bytes @ 0x2
  1994                           
  1995  0022                     MFRC522_CRC@length:	
  1996                           ; 1 bytes @ 0x2
  1997                           
  1998  0022                     nRF_Setup_Write@RXTX_ADDR:	
  1999                           ; 1 bytes @ 0x2
  2000                           
  2001  0022                     nRF_Setup_Read@RXTX_ADDR:	
  2002                           ; 5 bytes @ 0x2
  2003                           
  2004                           
  2005                           ; 5 bytes @ 0x2
  2006  0022                     	ds	1
  2007  0023                     MFRC522_ToCard@sendLen:	
  2008  0023                     MFRC522_CRC@dataOut:	
  2009                           ; 1 bytes @ 0x3
  2010                           
  2011                           
  2012                           ; 1 bytes @ 0x3
  2013  0023                     	ds	1
  2014  0024                     ??_MFRC522_CRC:	
  2015  0024                     MFRC522_ToCard@backData:	
  2016                           ; 1 bytes @ 0x4
  2017                           
  2018                           
  2019                           ; 1 bytes @ 0x4
  2020  0024                     	ds	1
  2021  0025                     MFRC522_ToCard@backLen:	
  2022  0025                     MFRC522_CRC@n:	
  2023                           ; 1 bytes @ 0x5
  2024                           
  2025                           
  2026                           ; 1 bytes @ 0x5
  2027  0025                     	ds	1
  2028  0026                     ??_MFRC522_ToCard:	
  2029  0026                     MFRC522_CRC@dataIn:	
  2030                           ; 1 bytes @ 0x6
  2031                           
  2032                           
  2033                           ; 1 bytes @ 0x6
  2034  0026                     	ds	1
  2035  0027                     MFRC522_CRC@i:	
  2036                           
  2037                           ; 1 bytes @ 0x7
  2038  0027                     	ds	7
  2039  002E                     MFRC522_ToCard@waitIRq:	
  2040                           
  2041                           ; 1 bytes @ 0xE
  2042  002E                     	ds	1
  2043  002F                     MFRC522_ToCard@_status:	
  2044                           
  2045                           ; 1 bytes @ 0xF
  2046  002F                     	ds	1
  2047  0030                     MFRC522_ToCard@lastBits:	
  2048                           
  2049                           ; 1 bytes @ 0x10
  2050  0030                     	ds	1
  2051  0031                     MFRC522_ToCard@irqEn:	
  2052                           
  2053                           ; 1 bytes @ 0x11
  2054  0031                     	ds	1
  2055  0032                     MFRC522_ToCard@command:	
  2056                           
  2057                           ; 1 bytes @ 0x12
  2058  0032                     	ds	1
  2059  0033                     MFRC522_ToCard@i:	
  2060                           
  2061                           ; 2 bytes @ 0x13
  2062  0033                     	ds	2
  2063  0035                     MFRC522_ToCard@n:	
  2064                           
  2065                           ; 1 bytes @ 0x15
  2066  0035                     	ds	1
  2067  0036                     ??_MFRC522_SelectTag:	
  2068  0036                     ??_MFRC522_Halt:	
  2069                           ; 1 bytes @ 0x16
  2070                           
  2071  0036                     ?_MFRC522_Request:	
  2072                           ; 1 bytes @ 0x16
  2073                           
  2074  0036                     ??_MFRC522_AntiColl:	
  2075                           ; 1 bytes @ 0x16
  2076                           
  2077  0036                     MFRC522_Request@TagType:	
  2078                           ; 1 bytes @ 0x16
  2079                           
  2080                           
  2081                           ; 1 bytes @ 0x16
  2082  0036                     	ds	1
  2083  0037                     ??_MFRC522_Request:	
  2084                           
  2085                           ; 1 bytes @ 0x17
  2086  0037                     	ds	3
  2087  003A                     MFRC522_Halt@buff:	
  2088                           
  2089                           ; 4 bytes @ 0x1A
  2090  003A                     	ds	1
  2091  003B                     MFRC522_Request@reqMode:	
  2092  003B                     MFRC522_AntiColl@serNumCheck:	
  2093                           ; 1 bytes @ 0x1B
  2094                           
  2095  003B                     MFRC522_SelectTag@buffer:	
  2096                           ; 1 bytes @ 0x1B
  2097                           
  2098                           
  2099                           ; 9 bytes @ 0x1B
  2100  003B                     	ds	1
  2101  003C                     MFRC522_Request@_status:	
  2102  003C                     MFRC522_AntiColl@unLen:	
  2103                           ; 1 bytes @ 0x1C
  2104                           
  2105                           
  2106                           ; 2 bytes @ 0x1C
  2107  003C                     	ds	1
  2108  003D                     MFRC522_Request@backBits:	
  2109                           
  2110                           ; 2 bytes @ 0x1D
  2111  003D                     	ds	1
  2112  003E                     MFRC522_AntiColl@_status:	
  2113  003E                     MFRC522_Halt@unLen:	
  2114                           ; 1 bytes @ 0x1E
  2115                           
  2116                           
  2117                           ; 2 bytes @ 0x1E
  2118  003E                     	ds	1
  2119  003F                     ??_MFRC522_isCard:	
  2120  003F                     MFRC522_AntiColl@i:	
  2121                           ; 1 bytes @ 0x1F
  2122                           
  2123                           
  2124                           ; 1 bytes @ 0x1F
  2125  003F                     	ds	1
  2126  0040                     MFRC522_AntiColl@serNum:	
  2127  0040                     MFRC522_isCard@TagType:	
  2128                           ; 1 bytes @ 0x20
  2129                           
  2130                           
  2131                           ; 1 bytes @ 0x20
  2132  0040                     	ds	1
  2133  0041                     ??_MFRC522_ReadCardSerial:	
  2134                           
  2135                           ; 1 bytes @ 0x21
  2136  0041                     	ds	1
  2137  0042                     MFRC522_ReadCardSerial@_status:	
  2138                           
  2139                           ; 1 bytes @ 0x22
  2140  0042                     	ds	1
  2141  0043                     MFRC522_ReadCardSerial@str:	
  2142                           
  2143                           ; 1 bytes @ 0x23
  2144  0043                     	ds	1
  2145  0044                     MFRC522_SelectTag@_status:	
  2146                           
  2147                           ; 1 bytes @ 0x24
  2148  0044                     	ds	1
  2149  0045                     MFRC522_SelectTag@serNum:	
  2150                           
  2151                           ; 1 bytes @ 0x25
  2152  0045                     	ds	1
  2153  0046                     MFRC522_SelectTag@size:	
  2154                           
  2155                           ; 1 bytes @ 0x26
  2156  0046                     	ds	1
  2157  0047                     MFRC522_SelectTag@recvBits:	
  2158                           
  2159                           ; 2 bytes @ 0x27
  2160  0047                     	ds	2
  2161  0049                     MFRC522_SelectTag@i:	
  2162                           
  2163                           ; 1 bytes @ 0x29
  2164  0049                     	ds	1
  2165  004A                     ??_main:	
  2166                           
  2167                           ; 1 bytes @ 0x2A
  2168  004A                     	ds	2
  2169  004C                     main@version:	
  2170                           
  2171                           ; 2 bytes @ 0x2C
  2172  004C                     	ds	2
  2173  004E                     main@size:	
  2174                           
  2175                           ; 1 bytes @ 0x2E
  2176  004E                     	ds	1
  2177  004F                     main@data0:	
  2178                           
  2179                           ; 5 bytes @ 0x2F
  2180  004F                     	ds	5
  2181  0054                     main@data2:	
  2182                           
  2183                           ; 5 bytes @ 0x34
  2184  0054                     	ds	5
  2185  0059                     main@data:	
  2186                           
  2187                           ; 5 bytes @ 0x39
  2188  0059                     	ds	5
  2189  005E                     main@UID:	
  2190                           
  2191                           ; 6 bytes @ 0x3E
  2192  005E                     	ds	6
  2193  0064                     main@i:	
  2194                           
  2195                           ; 1 bytes @ 0x44
  2196  0064                     	ds	1
  2197  0065                     main@TagType:	
  2198                           
  2199                           ; 1 bytes @ 0x45
  2200  0065                     	ds	1
  2201                           
  2202                           	psect	maintext
  2203  0078                     __pmaintext:	
  2204 ;;
  2205 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  2206 ;;
  2207 ;; *************** function _main *****************
  2208 ;; Defined at:
  2209 ;;		line 64 in file "try_rfid.c"
  2210 ;; Parameters:    Size  Location     Type
  2211 ;;		None
  2212 ;; Auto vars:     Size  Location     Type
  2213 ;;  data2           5   52[BANK0 ] unsigned char [5]
  2214 ;;  data            5   57[BANK0 ] unsigned char [5]
  2215 ;;  data0           5   47[BANK0 ] unsigned char [5]
  2216 ;;  msg            12    0        unsigned char [12]
  2217 ;;  UID             6   62[BANK0 ] unsigned char [6]
  2218 ;;  version         2   44[BANK0 ] unsigned int 
  2219 ;;  TagType         1   69[BANK0 ] unsigned char 
  2220 ;;  i               1   68[BANK0 ] unsigned char 
  2221 ;;  size            1   46[BANK0 ] unsigned char 
  2222 ;; Return value:  Size  Location     Type
  2223 ;;                  1    wreg      void 
  2224 ;; Registers used:
  2225 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2226 ;; Tracked objects:
  2227 ;;		On entry : B1F/0
  2228 ;;		On exit  : 0/0
  2229 ;;		Unchanged: 0/0
  2230 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2231 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2232 ;;      Locals:         0      26       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2233 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2234 ;;      Totals:         0      28       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2235 ;;Total ram usage:       28 bytes
  2236 ;; Hardware stack levels required when called:    7
  2237 ;; This function calls:
  2238 ;;		_ConfigureOscillator
  2239 ;;		_FlushTXRX
  2240 ;;		_InitApp
  2241 ;;		_MFRC522_Halt
  2242 ;;		_MFRC522_Init
  2243 ;;		_MFRC522_ReadCardSerial
  2244 ;;		_MFRC522_SelectTag
  2245 ;;		_MFRC522_isCard
  2246 ;;		_ReadPayload
  2247 ;;		_ReadRegister
  2248 ;;		_SPI_init
  2249 ;;		_WritePayload
  2250 ;;		_WriteRegister
  2251 ;;		_WriteRegisterRF
  2252 ;;		_nRF_Setup_Read
  2253 ;;		_nRF_Setup_Write
  2254 ;;		_nRF_available
  2255 ;; This function is called by:
  2256 ;;		Startup code after reset
  2257 ;; This function uses a non-reentrant model
  2258 ;;
  2259                           
  2260                           
  2261                           ;psect for function _main
  2262  0078                     _main:	
  2263                           
  2264                           ;try_rfid.c: 67: ConfigureOscillator();
  2265                           
  2266                           ;incstack = 0
  2267                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2268  0078  318F  271E  3180   	fcall	_ConfigureOscillator
  2269                           
  2270                           ;try_rfid.c: 71: InitApp();
  2271  007B  318F  27E6  3180   	fcall	_InitApp
  2272                           
  2273                           ;try_rfid.c: 73: SPI_init();
  2274  007E  3187  27DF  3180   	fcall	_SPI_init
  2275                           
  2276                           ;try_rfid.c: 78: MFRC522_Init();
  2277  0081  3185  2590  3180   	fcall	_MFRC522_Init
  2278                           
  2279                           ;try_rfid.c: 81: TRISCbits.TRISC1 = 0;
  2280  0084  0021               	movlb	1	; select bank1
  2281  0085  108E               	bcf	14,1	;volatile
  2282                           
  2283                           ;try_rfid.c: 85: unsigned version = ReadRegister(0x37);
  2284  0086  3037               	movlw	55
  2285  0087  318F  27A8  3180   	fcall	_ReadRegister
  2286  008A  0020               	movlb	0	; select bank0
  2287  008B  00CA               	movwf	??_main
  2288  008C  01CB               	clrf	??_main+1
  2289  008D  084A               	movf	??_main,w
  2290  008E  00CC               	movwf	main@version
  2291  008F  084B               	movf	??_main+1,w
  2292  0090  00CD               	movwf	main@version+1
  2293                           
  2294                           ;try_rfid.c: 87: unsigned char TagType;
  2295                           ;try_rfid.c: 90: char size;
  2296                           ;try_rfid.c: 91: char i;
  2297                           ;try_rfid.c: 92: char msg[12];
  2298                           ;try_rfid.c: 93: char UID[6];
  2299                           ;try_rfid.c: 94: SW = 3;
  2300  0091  3003               	movlw	3
  2301  0092  00CA               	movwf	??_main
  2302  0093  084A               	movf	??_main,w
  2303  0094  00EF               	movwf	_SW
  2304                           
  2305                           ;try_rfid.c: 96: INTCONbits.IOCIE = 1;
  2306  0095  158B               	bsf	11,3	;volatile
  2307                           
  2308                           ;try_rfid.c: 97: INTCONbits.IOCIF = 0;
  2309  0096  100B               	bcf	11,0	;volatile
  2310  0097                     l2950:	
  2311                           ;try_rfid.c: 102: while(1)
  2312                           
  2313                           
  2314                           ;try_rfid.c: 104: {
  2315                           ;try_rfid.c: 108: PORTCbits.RC1 = 0;
  2316  0097  0020               	movlb	0	; select bank0
  2317  0098  108E               	bcf	14,1	;volatile
  2318                           
  2319                           ;try_rfid.c: 128: if ((SW == 1) || (SW == 2) || (SW == 3) || (SW == 4))
  2320  0099  036F               	decf	_SW,w
  2321  009A  1903               	btfsc	3,2
  2322  009B  28A8               	goto	l82
  2323  009C  3002               	movlw	2
  2324  009D  066F               	xorwf	_SW,w
  2325  009E  1903               	btfsc	3,2
  2326  009F  28A8               	goto	l82
  2327  00A0  3003               	movlw	3
  2328  00A1  066F               	xorwf	_SW,w
  2329  00A2  1903               	btfsc	3,2
  2330  00A3  28A8               	goto	l82
  2331  00A4  3004               	movlw	4
  2332  00A5  066F               	xorwf	_SW,w
  2333  00A6  1D03               	btfss	3,2
  2334  00A7  2925               	goto	l3012
  2335  00A8                     l82:	
  2336                           
  2337                           ;try_rfid.c: 129: {
  2338                           ;try_rfid.c: 130: INTCONbits.IOCIE = 0;
  2339  00A8  118B               	bcf	11,3	;volatile
  2340                           
  2341                           ;try_rfid.c: 132: LATAbits.LATA4 = 0;
  2342  00A9  0022               	movlb	2	; select bank2
  2343  00AA  120C               	bcf	12,4	;volatile
  2344                           
  2345                           ;try_rfid.c: 133: SPI_init();
  2346  00AB  3187  27DF  3180   	fcall	_SPI_init
  2347                           
  2348                           ;try_rfid.c: 134: nRF_Setup_Write();
  2349  00AE  3183  2367  3180   	fcall	_nRF_Setup_Write
  2350                           
  2351                           ;try_rfid.c: 135: FlushTXRX();
  2352  00B1  318F  2776  3180   	fcall	_FlushTXRX
  2353                           
  2354                           ;try_rfid.c: 136: WriteRegisterRF(0x07,0x70);
  2355  00B4  3070               	movlw	112
  2356  00B5  0020               	movlb	0	; select bank0
  2357  00B6  00CA               	movwf	??_main
  2358  00B7  084A               	movf	??_main,w
  2359  00B8  00F3               	movwf	WriteRegisterRF@val
  2360  00B9  3007               	movlw	7
  2361  00BA  318F  274B  3180   	fcall	_WriteRegisterRF
  2362                           
  2363                           ;try_rfid.c: 137: _delay((unsigned long)((2)*(8000000L/4000.0)));
  2364  00BD  3006               	movlw	6
  2365  00BE  0020               	movlb	0	; select bank0
  2366  00BF  00CA               	movwf	??_main
  2367  00C0  3030               	movlw	48
  2368  00C1                     u2217:	
  2369  00C1  0B89               	decfsz	9,f
  2370  00C2  28C1               	goto	u2217
  2371  00C3  0BCA               	decfsz	??_main,f
  2372  00C4  28C1               	goto	u2217
  2373  00C5  0000               	nop
  2374                           
  2375                           ;try_rfid.c: 138: LATAbits.LATA4 = 1;
  2376  00C6  0022               	movlb	2	; select bank2
  2377  00C7  160C               	bsf	12,4	;volatile
  2378                           
  2379                           ;try_rfid.c: 139: _delay((unsigned long)((150)*(8000000L/4000000.0)));
  2380  00C8  3064               	movlw	100
  2381  00C9                     u2227:	
  2382  00C9  0B89               	decfsz	9,f
  2383  00CA  28C9               	goto	u2227
  2384                           
  2385                           ;try_rfid.c: 141: uint8_t data0[5] = {0,1,0,3,13};
  2386  00CB  30AF               	movlw	low main@F3009
  2387  00CC  0086               	movwf	6
  2388  00CD  3000               	movlw	high main@F3009
  2389  00CE  0087               	movwf	7
  2390  00CF  304F               	movlw	low main@data0
  2391  00D0  0084               	movwf	4
  2392  00D1  3000               	movlw	high main@data0
  2393  00D2  0085               	movwf	5
  2394  00D3  3005               	movlw	5
  2395  00D4  0020               	movlb	0	; select bank0
  2396  00D5  00CA               	movwf	??_main
  2397  00D6                     u1940:	
  2398  00D6  0016               	moviw fsr1++
  2399  00D7  001A               	movwi fsr0++
  2400  00D8  0BCA               	decfsz	??_main,f
  2401  00D9  28D6               	goto	u1940
  2402                           
  2403                           ;try_rfid.c: 142: data0[0] = 3;
  2404  00DA  3003               	movlw	3
  2405  00DB  00CA               	movwf	??_main
  2406  00DC  084A               	movf	??_main,w
  2407  00DD  00CF               	movwf	main@data0
  2408                           
  2409                           ;try_rfid.c: 143: data0[2] = SW-1;
  2410  00DE  086F               	movf	_SW,w
  2411  00DF  3EFF               	addlw	255
  2412  00E0  00CA               	movwf	??_main
  2413  00E1  084A               	movf	??_main,w
  2414  00E2  00D1               	movwf	main@data0+2
  2415                           
  2416                           ;try_rfid.c: 144: WritePayload(5, data0);
  2417  00E3  304F               	movlw	(low (main@data0| 0))& (0+255)
  2418  00E4  00CA               	movwf	??_main
  2419  00E5  084A               	movf	??_main,w
  2420  00E6  00F3               	movwf	WritePayload@data
  2421  00E7  3005               	movlw	5
  2422  00E8  3187  279F  3180   	fcall	_WritePayload
  2423                           
  2424                           ;try_rfid.c: 145: _delay((unsigned long)((5)*(8000000L/4000.0)));
  2425  00EB  300D               	movlw	13
  2426  00EC  0020               	movlb	0	; select bank0
  2427  00ED  00CA               	movwf	??_main
  2428  00EE  30FB               	movlw	251
  2429  00EF                     u2237:	
  2430  00EF  0B89               	decfsz	9,f
  2431  00F0  28EF               	goto	u2237
  2432  00F1  0BCA               	decfsz	??_main,f
  2433  00F2  28EF               	goto	u2237
  2434  00F3  3200               	nop2
  2435                           
  2436                           ;try_rfid.c: 146: FlushTXRX();
  2437  00F4  318F  2776  3180   	fcall	_FlushTXRX
  2438                           
  2439                           ;try_rfid.c: 147: WriteRegister(0x00, 0x00);
  2440  00F7  01F6               	clrf	WriteRegister@val
  2441  00F8  3000               	movlw	0
  2442  00F9  318F  2759  3180   	fcall	_WriteRegister
  2443                           
  2444                           ;try_rfid.c: 148: _delay((unsigned long)((5)*(8000000L/4000.0)));
  2445  00FC  300D               	movlw	13
  2446  00FD  0020               	movlb	0	; select bank0
  2447  00FE  00CA               	movwf	??_main
  2448  00FF  30FB               	movlw	251
  2449  0100                     u2247:	
  2450  0100  0B89               	decfsz	9,f
  2451  0101  2900               	goto	u2247
  2452  0102  0BCA               	decfsz	??_main,f
  2453  0103  2900               	goto	u2247
  2454  0104  3200               	nop2
  2455                           
  2456                           ;try_rfid.c: 150: SW = 0;
  2457  0105  0020               	movlb	0	; select bank0
  2458  0106  01EF               	clrf	_SW
  2459                           
  2460                           ;try_rfid.c: 152: LATCbits.LATC4 = 1;
  2461  0107  0022               	movlb	2	; select bank2
  2462  0108  160E               	bsf	14,4	;volatile
  2463                           
  2464                           ;try_rfid.c: 153: _delay((unsigned long)((50)*(8000000L/4000.0)));
  2465  0109  3082               	movlw	130
  2466  010A  0020               	movlb	0	; select bank0
  2467  010B  00CA               	movwf	??_main
  2468  010C  30DD               	movlw	221
  2469  010D                     u2257:	
  2470  010D  0B89               	decfsz	9,f
  2471  010E  290D               	goto	u2257
  2472  010F  0BCA               	decfsz	??_main,f
  2473  0110  290D               	goto	u2257
  2474  0111  3200               	nop2
  2475                           
  2476                           ;try_rfid.c: 154: LATCbits.LATC4 = 0;
  2477  0112  0022               	movlb	2	; select bank2
  2478  0113  120E               	bcf	14,4	;volatile
  2479                           
  2480                           ;try_rfid.c: 155: LATCbits.LATC5 = 1;
  2481  0114  168E               	bsf	14,5	;volatile
  2482                           
  2483                           ;try_rfid.c: 156: _delay((unsigned long)((50)*(8000000L/4000.0)));
  2484  0115  3082               	movlw	130
  2485  0116  0020               	movlb	0	; select bank0
  2486  0117  00CA               	movwf	??_main
  2487  0118  30DD               	movlw	221
  2488  0119                     u2267:	
  2489  0119  0B89               	decfsz	9,f
  2490  011A  2919               	goto	u2267
  2491  011B  0BCA               	decfsz	??_main,f
  2492  011C  2919               	goto	u2267
  2493  011D  3200               	nop2
  2494                           
  2495                           ;try_rfid.c: 157: LATCbits.LATC5 = 0;
  2496  011E  0022               	movlb	2	; select bank2
  2497  011F  128E               	bcf	14,5	;volatile
  2498                           
  2499                           ;try_rfid.c: 159: INTCONbits.IOCIF = 0;
  2500  0120  100B               	bcf	11,0	;volatile
  2501                           
  2502                           ;try_rfid.c: 160: IOCAFbits.IOCAF0 = 0;
  2503  0121  0027               	movlb	7	; select bank7
  2504  0122  1013               	bcf	19,0	;volatile
  2505                           
  2506                           ;try_rfid.c: 161: INTCONbits.IOCIF = 0;
  2507  0123  100B               	bcf	11,0	;volatile
  2508                           
  2509                           ;try_rfid.c: 162: INTCONbits.IOCIE = 1;
  2510  0124  158B               	bsf	11,3	;volatile
  2511  0125                     l3012:	
  2512                           
  2513                           ;try_rfid.c: 164: }
  2514                           ;try_rfid.c: 169: if (MFRC522_isCard(&TagType))
  2515  0125  3065               	movlw	(low (main@TagType| 0))& (0+255)
  2516  0126  318F  2797  3180   	fcall	_MFRC522_isCard
  2517  0129  3A00               	xorlw	0
  2518  012A  1903               	skipnz
  2519  012B  2897               	goto	l2950
  2520                           
  2521                           ;try_rfid.c: 170: {
  2522                           ;try_rfid.c: 172: if (MFRC522_ReadCardSerial (&UID))
  2523  012C  305E               	movlw	(low (main@UID| 0))& (0+255)
  2524  012D  318F  27D0  3180   	fcall	_MFRC522_ReadCardSerial
  2525  0130  3A00               	xorlw	0
  2526  0131  1903               	skipnz
  2527  0132  2A39               	goto	l3112
  2528                           
  2529                           ;try_rfid.c: 173: {
  2530                           ;try_rfid.c: 174: size = MFRC522_SelectTag( &UID );
  2531  0133  305E               	movlw	(low (main@UID| 0))& (0+255)
  2532  0134  3185  2532  3180   	fcall	_MFRC522_SelectTag
  2533  0137  0020               	movlb	0	; select bank0
  2534  0138  00CA               	movwf	??_main
  2535  0139  084A               	movf	??_main,w
  2536  013A  00CE               	movwf	main@size
  2537                           
  2538                           ;try_rfid.c: 186: LATAbits.LATA4 = 0;
  2539  013B  0022               	movlb	2	; select bank2
  2540  013C  120C               	bcf	12,4	;volatile
  2541                           
  2542                           ;try_rfid.c: 187: SPI_init();
  2543  013D  3187  27DF  3180   	fcall	_SPI_init
  2544                           
  2545                           ;try_rfid.c: 188: nRF_Setup_Write();
  2546  0140  3183  2367  3180   	fcall	_nRF_Setup_Write
  2547                           
  2548                           ;try_rfid.c: 189: FlushTXRX();
  2549  0143  318F  2776  3180   	fcall	_FlushTXRX
  2550                           
  2551                           ;try_rfid.c: 190: WriteRegisterRF(0x07,0x70);
  2552  0146  3070               	movlw	112
  2553  0147  0020               	movlb	0	; select bank0
  2554  0148  00CA               	movwf	??_main
  2555  0149  084A               	movf	??_main,w
  2556  014A  00F3               	movwf	WriteRegisterRF@val
  2557  014B  3007               	movlw	7
  2558  014C  318F  274B  3180   	fcall	_WriteRegisterRF
  2559                           
  2560                           ;try_rfid.c: 191: _delay((unsigned long)((2)*(8000000L/4000.0)));
  2561  014F  3006               	movlw	6
  2562  0150  0020               	movlb	0	; select bank0
  2563  0151  00CA               	movwf	??_main
  2564  0152  3030               	movlw	48
  2565  0153                     u2277:	
  2566  0153  0B89               	decfsz	9,f
  2567  0154  2953               	goto	u2277
  2568  0155  0BCA               	decfsz	??_main,f
  2569  0156  2953               	goto	u2277
  2570  0157  0000               	nop
  2571                           
  2572                           ;try_rfid.c: 192: LATAbits.LATA4 = 1;
  2573  0158  0022               	movlb	2	; select bank2
  2574  0159  160C               	bsf	12,4	;volatile
  2575                           
  2576                           ;try_rfid.c: 193: _delay((unsigned long)((150)*(8000000L/4000000.0)));
  2577  015A  3064               	movlw	100
  2578  015B                     u2287:	
  2579  015B  0B89               	decfsz	9,f
  2580  015C  295B               	goto	u2287
  2581                           
  2582                           ;try_rfid.c: 195: uint8_t data[5] = {0,0,0,0,0};
  2583  015D  30C1               	movlw	low main@F3017
  2584  015E  0086               	movwf	6
  2585  015F  3000               	movlw	high main@F3017
  2586  0160  0087               	movwf	7
  2587  0161  3059               	movlw	low main@data
  2588  0162  0084               	movwf	4
  2589  0163  3000               	movlw	high main@data
  2590  0164  0085               	movwf	5
  2591  0165  3005               	movlw	5
  2592  0166  0020               	movlb	0	; select bank0
  2593  0167  00CA               	movwf	??_main
  2594  0168                     u1970:	
  2595  0168  0016               	moviw fsr1++
  2596  0169  001A               	movwi fsr0++
  2597  016A  0BCA               	decfsz	??_main,f
  2598  016B  2968               	goto	u1970
  2599                           
  2600                           ;try_rfid.c: 196: data[0] = 30;
  2601  016C  301E               	movlw	30
  2602  016D  00CA               	movwf	??_main
  2603  016E  084A               	movf	??_main,w
  2604  016F  00D9               	movwf	main@data
  2605                           
  2606                           ;try_rfid.c: 197: data[1] = UID[0];
  2607  0170  085E               	movf	main@UID,w
  2608  0171  00CA               	movwf	??_main
  2609  0172  084A               	movf	??_main,w
  2610  0173  00DA               	movwf	main@data+1
  2611                           
  2612                           ;try_rfid.c: 198: data[2] = UID[1];
  2613  0174  085F               	movf	main@UID+1,w
  2614  0175  00CA               	movwf	??_main
  2615  0176  084A               	movf	??_main,w
  2616  0177  00DB               	movwf	main@data+2
  2617                           
  2618                           ;try_rfid.c: 199: data[3] = UID[2];
  2619  0178  0860               	movf	main@UID+2,w
  2620  0179  00CA               	movwf	??_main
  2621  017A  084A               	movf	??_main,w
  2622  017B  00DC               	movwf	main@data+3
  2623                           
  2624                           ;try_rfid.c: 200: data[4] = UID[3];
  2625  017C  0861               	movf	main@UID+3,w
  2626  017D  00CA               	movwf	??_main
  2627  017E  084A               	movf	??_main,w
  2628  017F  00DD               	movwf	main@data+4
  2629                           
  2630                           ;try_rfid.c: 203: WritePayload(5, data);
  2631  0180  3059               	movlw	(low (main@data| 0))& (0+255)
  2632  0181  00CA               	movwf	??_main
  2633  0182  084A               	movf	??_main,w
  2634  0183  00F3               	movwf	WritePayload@data
  2635  0184  3005               	movlw	5
  2636  0185  3187  279F  3180   	fcall	_WritePayload
  2637                           
  2638                           ;try_rfid.c: 204: _delay((unsigned long)((5)*(8000000L/4000.0)));
  2639  0188  300D               	movlw	13
  2640  0189  0020               	movlb	0	; select bank0
  2641  018A  00CA               	movwf	??_main
  2642  018B  30FB               	movlw	251
  2643  018C                     u2297:	
  2644  018C  0B89               	decfsz	9,f
  2645  018D  298C               	goto	u2297
  2646  018E  0BCA               	decfsz	??_main,f
  2647  018F  298C               	goto	u2297
  2648  0190  3200               	nop2
  2649                           
  2650                           ;try_rfid.c: 206: FlushTXRX();
  2651  0191  318F  2776  3180   	fcall	_FlushTXRX
  2652                           
  2653                           ;try_rfid.c: 207: WriteRegisterRF(0x00, 0x00);
  2654  0194  01F3               	clrf	WriteRegisterRF@val
  2655  0195  3000               	movlw	0
  2656  0196  318F  274B  3180   	fcall	_WriteRegisterRF
  2657                           
  2658                           ;try_rfid.c: 208: _delay((unsigned long)((5)*(8000000L/4000.0)));
  2659  0199  300D               	movlw	13
  2660  019A  0020               	movlb	0	; select bank0
  2661  019B  00CA               	movwf	??_main
  2662  019C  30FB               	movlw	251
  2663  019D                     u2307:	
  2664  019D  0B89               	decfsz	9,f
  2665  019E  299D               	goto	u2307
  2666  019F  0BCA               	decfsz	??_main,f
  2667  01A0  299D               	goto	u2307
  2668  01A1  3200               	nop2
  2669                           
  2670                           ;try_rfid.c: 210: LATCbits.LATC4 = 1;
  2671  01A2  0022               	movlb	2	; select bank2
  2672  01A3  160E               	bsf	14,4	;volatile
  2673                           
  2674                           ;try_rfid.c: 214: LATAbits.LATA4 = 0;
  2675  01A4  120C               	bcf	12,4	;volatile
  2676                           
  2677                           ;try_rfid.c: 215: SPI_init();
  2678  01A5  3187  27DF  3180   	fcall	_SPI_init
  2679                           
  2680                           ;try_rfid.c: 216: nRF_Setup_Read();
  2681  01A8  3183  23ED  3180   	fcall	_nRF_Setup_Read
  2682                           
  2683                           ;try_rfid.c: 217: _delay((unsigned long)((2)*(8000000L/4000.0)));
  2684  01AB  3006               	movlw	6
  2685  01AC  0020               	movlb	0	; select bank0
  2686  01AD  00CA               	movwf	??_main
  2687  01AE  3030               	movlw	48
  2688  01AF                     u2317:	
  2689  01AF  0B89               	decfsz	9,f
  2690  01B0  29AF               	goto	u2317
  2691  01B1  0BCA               	decfsz	??_main,f
  2692  01B2  29AF               	goto	u2317
  2693  01B3  0000               	nop
  2694                           
  2695                           ;try_rfid.c: 218: LATAbits.LATA4 = 1;
  2696  01B4  0022               	movlb	2	; select bank2
  2697  01B5  160C               	bsf	12,4	;volatile
  2698                           
  2699                           ;try_rfid.c: 219: _delay((unsigned long)((170)*(8000000L/4000000.0)));
  2700  01B6  3071               	movlw	113
  2701  01B7                     u2327:	
  2702  01B7  0B89               	decfsz	9,f
  2703  01B8  29B7               	goto	u2327
  2704  01B9  0000               	nop
  2705                           
  2706                           ;try_rfid.c: 222: i = 2000;
  2707  01BA  30D0               	movlw	208
  2708  01BB  0020               	movlb	0	; select bank0
  2709  01BC  00CA               	movwf	??_main
  2710  01BD  084A               	movf	??_main,w
  2711  01BE  00E4               	movwf	main@i
  2712  01BF                     l3072:	
  2713                           ;try_rfid.c: 223: do
  2714                           
  2715                           
  2716                           ;try_rfid.c: 224: {
  2717                           ;try_rfid.c: 227: _delay((unsigned long)((50)*(8000000L/4000.0)));
  2718  01BF  3082               	movlw	130
  2719  01C0  0020               	movlb	0	; select bank0
  2720  01C1  00CA               	movwf	??_main
  2721  01C2  30DD               	movlw	221
  2722  01C3                     u2337:	
  2723  01C3  0B89               	decfsz	9,f
  2724  01C4  29C3               	goto	u2337
  2725  01C5  0BCA               	decfsz	??_main,f
  2726  01C6  29C3               	goto	u2337
  2727  01C7  3200               	nop2
  2728                           
  2729                           ;try_rfid.c: 228: uint8_t data2[5] = {0,0,0,0,0};
  2730  01C8  30BC               	movlw	low main@F3024
  2731  01C9  0086               	movwf	6
  2732  01CA  3000               	movlw	high main@F3024
  2733  01CB  0087               	movwf	7
  2734  01CC  3054               	movlw	low main@data2
  2735  01CD  0084               	movwf	4
  2736  01CE  3000               	movlw	high main@data2
  2737  01CF  0085               	movwf	5
  2738  01D0  3005               	movlw	5
  2739  01D1  0020               	movlb	0	; select bank0
  2740  01D2  00CA               	movwf	??_main
  2741  01D3                     u1980:	
  2742  01D3  0016               	moviw fsr1++
  2743  01D4  001A               	movwi fsr0++
  2744  01D5  0BCA               	decfsz	??_main,f
  2745  01D6  29D3               	goto	u1980
  2746                           
  2747                           ;try_rfid.c: 230: if (nRF_available())
  2748  01D7  318F  2728  3180   	fcall	_nRF_available
  2749  01DA  3A00               	xorlw	0
  2750  01DB  1903               	skipnz
  2751  01DC  2A31               	goto	l3110
  2752                           
  2753                           ;try_rfid.c: 231: {
  2754                           ;try_rfid.c: 232: ReadPayload(5, data2);
  2755  01DD  3054               	movlw	(low (main@data2| 0))& (0+255)
  2756  01DE  0020               	movlb	0	; select bank0
  2757  01DF  00CA               	movwf	??_main
  2758  01E0  084A               	movf	??_main,w
  2759  01E1  00F3               	movwf	ReadPayload@data
  2760  01E2  3005               	movlw	5
  2761  01E3  3187  2750  3180   	fcall	_ReadPayload
  2762                           
  2763                           ;try_rfid.c: 233: FlushTXRX();
  2764  01E6  318F  2776  3180   	fcall	_FlushTXRX
  2765                           
  2766                           ;try_rfid.c: 235: if (data2[0]==70)
  2767  01E9  3046               	movlw	70
  2768  01EA  0020               	movlb	0	; select bank0
  2769  01EB  0654               	xorwf	main@data2,w
  2770  01EC  1D03               	btfss	3,2
  2771  01ED  2A31               	goto	l3110
  2772                           
  2773                           ;try_rfid.c: 236: {
  2774                           ;try_rfid.c: 237: if (data2[1]==0x1)
  2775  01EE  0355               	decf	main@data2+1,w
  2776  01EF  1D03               	btfss	3,2
  2777  01F0  2A1C               	goto	l3102
  2778                           
  2779                           ;try_rfid.c: 238: {
  2780                           ;try_rfid.c: 240: LATCbits.LATC4 = 1;
  2781  01F1  0022               	movlb	2	; select bank2
  2782  01F2  160E               	bsf	14,4	;volatile
  2783                           
  2784                           ;try_rfid.c: 241: _delay((unsigned long)((50)*(8000000L/4000.0)));
  2785  01F3  3082               	movlw	130
  2786  01F4  0020               	movlb	0	; select bank0
  2787  01F5  00CA               	movwf	??_main
  2788  01F6  30DD               	movlw	221
  2789  01F7                     u2347:	
  2790  01F7  0B89               	decfsz	9,f
  2791  01F8  29F7               	goto	u2347
  2792  01F9  0BCA               	decfsz	??_main,f
  2793  01FA  29F7               	goto	u2347
  2794  01FB  3200               	nop2
  2795                           
  2796                           ;try_rfid.c: 242: LATCbits.LATC4 = 0;
  2797  01FC  0022               	movlb	2	; select bank2
  2798  01FD  120E               	bcf	14,4	;volatile
  2799                           
  2800                           ;try_rfid.c: 243: LATCbits.LATC5 = 1;
  2801  01FE  168E               	bsf	14,5	;volatile
  2802                           
  2803                           ;try_rfid.c: 244: _delay((unsigned long)((50)*(8000000L/4000.0)));
  2804  01FF  3082               	movlw	130
  2805  0200  0020               	movlb	0	; select bank0
  2806  0201  00CA               	movwf	??_main
  2807  0202  30DD               	movlw	221
  2808  0203                     u2357:	
  2809  0203  0B89               	decfsz	9,f
  2810  0204  2A03               	goto	u2357
  2811  0205  0BCA               	decfsz	??_main,f
  2812  0206  2A03               	goto	u2357
  2813  0207  3200               	nop2
  2814                           
  2815                           ;try_rfid.c: 245: LATCbits.LATC5 = 0;
  2816  0208  0022               	movlb	2	; select bank2
  2817  0209  128E               	bcf	14,5	;volatile
  2818                           
  2819                           ;try_rfid.c: 249: PORTCbits.RC1 = 1;
  2820  020A  0020               	movlb	0	; select bank0
  2821  020B  148E               	bsf	14,1	;volatile
  2822                           
  2823                           ;try_rfid.c: 250: _delay((unsigned long)((1000)*(8000000L/4000.0)));
  2824  020C  300B               	movlw	11
  2825  020D  0020               	movlb	0	; select bank0
  2826  020E  00CB               	movwf	??_main+1
  2827  020F  3026               	movlw	38
  2828  0210  00CA               	movwf	??_main
  2829  0211  305D               	movlw	93
  2830  0212                     u2367:	
  2831  0212  0B89               	decfsz	9,f
  2832  0213  2A12               	goto	u2367
  2833  0214  0BCA               	decfsz	??_main,f
  2834  0215  2A12               	goto	u2367
  2835  0216  0BCB               	decfsz	??_main+1,f
  2836  0217  2A12               	goto	u2367
  2837  0218  3200               	nop2
  2838                           
  2839                           ;try_rfid.c: 251: PORTCbits.RC1 = 0;
  2840  0219  0020               	movlb	0	; select bank0
  2841  021A  108E               	bcf	14,1	;volatile
  2842                           
  2843                           ;try_rfid.c: 252: break;
  2844  021B  2A37               	goto	l95
  2845  021C                     l3102:	
  2846                           ;try_rfid.c: 253: }
  2847                           
  2848                           
  2849                           ;try_rfid.c: 254: else if (data2[1]==0x0)
  2850  021C  0855               	movf	main@data2+1,w
  2851  021D  1D03               	btfss	3,2
  2852  021E  2A31               	goto	l3110
  2853                           
  2854                           ;try_rfid.c: 255: {
  2855                           ;try_rfid.c: 257: LATCbits.LATC5 = 1;
  2856  021F  0022               	movlb	2	; select bank2
  2857  0220  168E               	bsf	14,5	;volatile
  2858                           
  2859                           ;try_rfid.c: 258: _delay((unsigned long)((100)*(8000000L/4000.0)));
  2860  0221  3002               	movlw	2
  2861  0222  0020               	movlb	0	; select bank0
  2862  0223  00CB               	movwf	??_main+1
  2863  0224  3004               	movlw	4
  2864  0225  00CA               	movwf	??_main
  2865  0226  30BA               	movlw	186
  2866  0227                     u2377:	
  2867  0227  0B89               	decfsz	9,f
  2868  0228  2A27               	goto	u2377
  2869  0229  0BCA               	decfsz	??_main,f
  2870  022A  2A27               	goto	u2377
  2871  022B  0BCB               	decfsz	??_main+1,f
  2872  022C  2A27               	goto	u2377
  2873  022D  0000               	nop
  2874                           
  2875                           ;try_rfid.c: 259: LATCbits.LATC5 = 0;
  2876  022E  0022               	movlb	2	; select bank2
  2877  022F  128E               	bcf	14,5	;volatile
  2878                           
  2879                           ;try_rfid.c: 260: break;
  2880  0230  2A37               	goto	l95
  2881  0231                     l3110:	
  2882                           
  2883                           ;try_rfid.c: 261: }
  2884                           ;try_rfid.c: 262: }
  2885                           ;try_rfid.c: 264: }
  2886                           ;try_rfid.c: 265: i--;
  2887  0231  3001               	movlw	1
  2888  0232  0020               	movlb	0	; select bank0
  2889  0233  02E4               	subwf	main@i,f
  2890                           
  2891                           ;try_rfid.c: 266: }
  2892                           ;try_rfid.c: 267: while(i!=0);
  2893  0234  0864               	movf	main@i,w
  2894  0235  1D03               	btfss	3,2
  2895  0236  29BF               	goto	l3072
  2896  0237                     l95:	
  2897                           
  2898                           ;try_rfid.c: 271: LATCbits.LATC4 = 0;
  2899  0237  0022               	movlb	2	; select bank2
  2900  0238  120E               	bcf	14,4	;volatile
  2901  0239                     l3112:	
  2902                           
  2903                           ;try_rfid.c: 277: }
  2904                           ;try_rfid.c: 281: MFRC522_Halt () ;
  2905  0239  3186  26E1  3180   	fcall	_MFRC522_Halt
  2906  023C  2897               	goto	l2950
  2907  023D                     __end_of_main:	
  2908                           
  2909                           	psect	text1
  2910  0F28                     __ptext1:	
  2911 ;; *************** function _nRF_available *****************
  2912 ;; Defined at:
  2913 ;;		line 157 in file "nRF24L01P.c"
  2914 ;; Parameters:    Size  Location     Type
  2915 ;;		None
  2916 ;; Auto vars:     Size  Location     Type
  2917 ;;		None
  2918 ;; Return value:  Size  Location     Type
  2919 ;;                  1    wreg      unsigned char 
  2920 ;; Registers used:
  2921 ;;		wreg, status,2, status,0, pclath, cstack
  2922 ;; Tracked objects:
  2923 ;;		On entry : 0/0
  2924 ;;		On exit  : 0/0
  2925 ;;		Unchanged: 0/0
  2926 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2927 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2928 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2929 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2930 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2931 ;;Total ram usage:        0 bytes
  2932 ;; Hardware stack levels used:    1
  2933 ;; Hardware stack levels required when called:    3
  2934 ;; This function calls:
  2935 ;;		_ReadRegisterRF
  2936 ;; This function is called by:
  2937 ;;		_main
  2938 ;; This function uses a non-reentrant model
  2939 ;;
  2940                           
  2941                           
  2942                           ;psect for function _nRF_available
  2943  0F28                     _nRF_available:	
  2944                           
  2945                           ;nRF24L01P.c: 159: if (( ReadRegisterRF(0x07) == 0x40 ))
  2946                           
  2947                           ;incstack = 0
  2948                           ; Regs used in _nRF_available: [wreg+status,2+status,0+pclath+cstack]
  2949  0F28  3007               	movlw	7
  2950  0F29  318F  27BB  318F   	fcall	_ReadRegisterRF
  2951  0F2C  3A40               	xorlw	64
  2952  0F2D  1D03               	skipz
  2953  0F2E  2F31               	goto	l2902
  2954                           
  2955                           ;nRF24L01P.c: 160: {
  2956                           ;nRF24L01P.c: 161: return 1;
  2957  0F2F  3001               	movlw	1
  2958  0F30  0008               	return
  2959  0F31                     l2902:	
  2960                           
  2961                           ;nRF24L01P.c: 162: }
  2962                           ;nRF24L01P.c: 163: return 0;
  2963  0F31  3000               	movlw	0
  2964  0F32  0008               	return
  2965  0F33                     __end_of_nRF_available:	
  2966                           
  2967                           	psect	text2
  2968  0FBB                     __ptext2:	
  2969 ;; *************** function _ReadRegisterRF *****************
  2970 ;; Defined at:
  2971 ;;		line 47 in file "nRF24L01P.c"
  2972 ;; Parameters:    Size  Location     Type
  2973 ;;  reg             1    wreg     unsigned char 
  2974 ;; Auto vars:     Size  Location     Type
  2975 ;;  reg             1    4[COMMON] unsigned char 
  2976 ;;  temp1           1    6[COMMON] unsigned char 
  2977 ;;  temp            1    5[COMMON] unsigned char 
  2978 ;; Return value:  Size  Location     Type
  2979 ;;                  1    wreg      unsigned char 
  2980 ;; Registers used:
  2981 ;;		wreg, status,2, status,0, pclath, cstack
  2982 ;; Tracked objects:
  2983 ;;		On entry : 0/0
  2984 ;;		On exit  : 0/0
  2985 ;;		Unchanged: 0/0
  2986 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2987 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2988 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2989 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2990 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2991 ;;Total ram usage:        4 bytes
  2992 ;; Hardware stack levels used:    1
  2993 ;; Hardware stack levels required when called:    2
  2994 ;; This function calls:
  2995 ;;		_SPI_transfer
  2996 ;; This function is called by:
  2997 ;;		_nRF_available
  2998 ;; This function uses a non-reentrant model
  2999 ;;
  3000                           
  3001                           
  3002                           ;psect for function _ReadRegisterRF
  3003  0FBB                     _ReadRegisterRF:	
  3004                           
  3005                           ;incstack = 0
  3006                           ; Regs used in _ReadRegisterRF: [wreg+status,2+status,0+pclath+cstack]
  3007                           ;ReadRegisterRF@reg stored from wreg
  3008  0FBB  00F4               	movwf	ReadRegisterRF@reg
  3009                           
  3010                           ;nRF24L01P.c: 49: uint8_t temp;
  3011                           ;nRF24L01P.c: 50: uint8_t temp1;
  3012                           ;nRF24L01P.c: 52: LATCbits.LATC6 = 0;
  3013  0FBC  0022               	movlb	2	; select bank2
  3014  0FBD  130E               	bcf	14,6	;volatile
  3015                           
  3016                           ;nRF24L01P.c: 53: temp = 0x00 | reg;
  3017  0FBE  0874               	movf	ReadRegisterRF@reg,w
  3018  0FBF  00F3               	movwf	??_ReadRegisterRF
  3019  0FC0  0873               	movf	??_ReadRegisterRF,w
  3020  0FC1  00F5               	movwf	ReadRegisterRF@temp
  3021                           
  3022                           ;nRF24L01P.c: 54: SPI_transfer(temp);
  3023  0FC2  0875               	movf	ReadRegisterRF@temp,w
  3024  0FC3  318E  26F4  318F   	fcall	_SPI_transfer
  3025                           
  3026                           ;nRF24L01P.c: 56: temp1= SPI_transfer(0xFF);
  3027  0FC6  30FF               	movlw	255
  3028  0FC7  318E  26F4         	fcall	_SPI_transfer
  3029  0FC9  00F3               	movwf	??_ReadRegisterRF
  3030  0FCA  0873               	movf	??_ReadRegisterRF,w
  3031  0FCB  00F6               	movwf	ReadRegisterRF@temp1
  3032                           
  3033                           ;nRF24L01P.c: 57: LATCbits.LATC6 = 1;
  3034  0FCC  0022               	movlb	2	; select bank2
  3035  0FCD  170E               	bsf	14,6	;volatile
  3036                           
  3037                           ;nRF24L01P.c: 59: return temp1;
  3038  0FCE  0876               	movf	ReadRegisterRF@temp1,w
  3039  0FCF  0008               	return
  3040  0FD0                     __end_of_ReadRegisterRF:	
  3041                           
  3042                           	psect	text3
  3043  0367                     __ptext3:	
  3044 ;; *************** function _nRF_Setup_Write *****************
  3045 ;; Defined at:
  3046 ;;		line 95 in file "nRF24L01P.c"
  3047 ;; Parameters:    Size  Location     Type
  3048 ;;		None
  3049 ;; Auto vars:     Size  Location     Type
  3050 ;;  RXTX_ADDR       5    2[BANK0 ] unsigned char [5]
  3051 ;; Return value:  Size  Location     Type
  3052 ;;                  1    wreg      void 
  3053 ;; Registers used:
  3054 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3055 ;; Tracked objects:
  3056 ;;		On entry : 0/0
  3057 ;;		On exit  : 0/0
  3058 ;;		Unchanged: 0/0
  3059 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3060 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3061 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3062 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3063 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3064 ;;Total ram usage:        7 bytes
  3065 ;; Hardware stack levels used:    1
  3066 ;; Hardware stack levels required when called:    3
  3067 ;; This function calls:
  3068 ;;		_WriteAddress
  3069 ;;		_WriteRegisterRF
  3070 ;; This function is called by:
  3071 ;;		_main
  3072 ;; This function uses a non-reentrant model
  3073 ;;
  3074                           
  3075                           
  3076                           ;psect for function _nRF_Setup_Write
  3077  0367                     _nRF_Setup_Write:	
  3078                           
  3079                           ;nRF24L01P.c: 98: uint8_t RXTX_ADDR[5];
  3080                           ;nRF24L01P.c: 99: RXTX_ADDR[4] = 0xAB;
  3081                           
  3082                           ;incstack = 0
  3083                           ; Regs used in _nRF_Setup_Write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3084  0367  30AB               	movlw	171
  3085  0368  0020               	movlb	0	; select bank0
  3086  0369  00A0               	movwf	??_nRF_Setup_Write
  3087  036A  0820               	movf	??_nRF_Setup_Write,w
  3088  036B  00A6               	movwf	nRF_Setup_Write@RXTX_ADDR+4
  3089                           
  3090                           ;nRF24L01P.c: 100: RXTX_ADDR[3] = 0xAC;
  3091  036C  30AC               	movlw	172
  3092  036D  00A0               	movwf	??_nRF_Setup_Write
  3093  036E  0820               	movf	??_nRF_Setup_Write,w
  3094  036F  00A5               	movwf	nRF_Setup_Write@RXTX_ADDR+3
  3095                           
  3096                           ;nRF24L01P.c: 101: RXTX_ADDR[2] = 0xAD;
  3097  0370  30AD               	movlw	173
  3098  0371  00A0               	movwf	??_nRF_Setup_Write
  3099  0372  0820               	movf	??_nRF_Setup_Write,w
  3100  0373  00A4               	movwf	nRF_Setup_Write@RXTX_ADDR+2
  3101                           
  3102                           ;nRF24L01P.c: 102: RXTX_ADDR[1] = 0xAE;
  3103  0374  30AE               	movlw	174
  3104  0375  00A0               	movwf	??_nRF_Setup_Write
  3105  0376  0820               	movf	??_nRF_Setup_Write,w
  3106  0377  00A3               	movwf	nRF_Setup_Write@RXTX_ADDR+1
  3107                           
  3108                           ;nRF24L01P.c: 103: RXTX_ADDR[0] = 0xAF;
  3109  0378  30AF               	movlw	175
  3110  0379  00A0               	movwf	??_nRF_Setup_Write
  3111  037A  0820               	movf	??_nRF_Setup_Write,w
  3112  037B  00A2               	movwf	nRF_Setup_Write@RXTX_ADDR
  3113                           
  3114                           ;nRF24L01P.c: 105: LATAbits.LATA4 = 0;
  3115  037C  0022               	movlb	2	; select bank2
  3116  037D  120C               	bcf	12,4	;volatile
  3117                           
  3118                           ;nRF24L01P.c: 106: WriteAddress(0x10, 5, RXTX_ADDR);
  3119  037E  3005               	movlw	5
  3120  037F  0020               	movlb	0	; select bank0
  3121  0380  00A0               	movwf	??_nRF_Setup_Write
  3122  0381  0820               	movf	??_nRF_Setup_Write,w
  3123  0382  00F3               	movwf	WriteAddress@num
  3124  0383  3022               	movlw	(low (nRF_Setup_Write@RXTX_ADDR| 0))& (0+255)
  3125  0384  00A1               	movwf	??_nRF_Setup_Write+1
  3126  0385  0821               	movf	??_nRF_Setup_Write+1,w
  3127  0386  00F4               	movwf	WriteAddress@addr
  3128  0387  3010               	movlw	16
  3129  0388  3187  2778  3183   	fcall	_WriteAddress
  3130                           
  3131                           ;nRF24L01P.c: 107: WriteAddress(0x0A, 5, RXTX_ADDR);
  3132  038B  3005               	movlw	5
  3133  038C  0020               	movlb	0	; select bank0
  3134  038D  00A0               	movwf	??_nRF_Setup_Write
  3135  038E  0820               	movf	??_nRF_Setup_Write,w
  3136  038F  00F3               	movwf	WriteAddress@num
  3137  0390  3022               	movlw	(low (nRF_Setup_Write@RXTX_ADDR| 0))& (0+255)
  3138  0391  00A1               	movwf	??_nRF_Setup_Write+1
  3139  0392  0821               	movf	??_nRF_Setup_Write+1,w
  3140  0393  00F4               	movwf	WriteAddress@addr
  3141  0394  300A               	movlw	10
  3142  0395  3187  2778  3183   	fcall	_WriteAddress
  3143                           
  3144                           ;nRF24L01P.c: 108: WriteRegisterRF(0x01, 0x01);
  3145  0398  01F3               	clrf	WriteRegisterRF@val
  3146  0399  0AF3               	incf	WriteRegisterRF@val,f
  3147  039A  3001               	movlw	1
  3148  039B  318F  274B  3183   	fcall	_WriteRegisterRF
  3149                           
  3150                           ;nRF24L01P.c: 109: WriteRegisterRF(0x02, 0x01);
  3151  039E  01F3               	clrf	WriteRegisterRF@val
  3152  039F  0AF3               	incf	WriteRegisterRF@val,f
  3153  03A0  3002               	movlw	2
  3154  03A1  318F  274B  3183   	fcall	_WriteRegisterRF
  3155                           
  3156                           ;nRF24L01P.c: 110: WriteRegisterRF(0x03, 0x03);
  3157  03A4  3003               	movlw	3
  3158  03A5  0020               	movlb	0	; select bank0
  3159  03A6  00A0               	movwf	??_nRF_Setup_Write
  3160  03A7  0820               	movf	??_nRF_Setup_Write,w
  3161  03A8  00F3               	movwf	WriteRegisterRF@val
  3162  03A9  3003               	movlw	3
  3163  03AA  318F  274B  3183   	fcall	_WriteRegisterRF
  3164                           
  3165                           ;nRF24L01P.c: 111: WriteRegisterRF(0x04, 0x2F);
  3166  03AD  302F               	movlw	47
  3167  03AE  0020               	movlb	0	; select bank0
  3168  03AF  00A0               	movwf	??_nRF_Setup_Write
  3169  03B0  0820               	movf	??_nRF_Setup_Write,w
  3170  03B1  00F3               	movwf	WriteRegisterRF@val
  3171  03B2  3004               	movlw	4
  3172  03B3  318F  274B  3183   	fcall	_WriteRegisterRF
  3173                           
  3174                           ;nRF24L01P.c: 113: WriteRegisterRF(0x05, 0x2C);
  3175  03B6  302C               	movlw	44
  3176  03B7  0020               	movlb	0	; select bank0
  3177  03B8  00A0               	movwf	??_nRF_Setup_Write
  3178  03B9  0820               	movf	??_nRF_Setup_Write,w
  3179  03BA  00F3               	movwf	WriteRegisterRF@val
  3180  03BB  3005               	movlw	5
  3181  03BC  318F  274B  3183   	fcall	_WriteRegisterRF
  3182                           
  3183                           ;nRF24L01P.c: 114: WriteRegisterRF(0x06, 0x06);
  3184  03BF  3006               	movlw	6
  3185  03C0  0020               	movlb	0	; select bank0
  3186  03C1  00A0               	movwf	??_nRF_Setup_Write
  3187  03C2  0820               	movf	??_nRF_Setup_Write,w
  3188  03C3  00F3               	movwf	WriteRegisterRF@val
  3189  03C4  3006               	movlw	6
  3190  03C5  318F  274B  3183   	fcall	_WriteRegisterRF
  3191                           
  3192                           ;nRF24L01P.c: 115: WriteRegisterRF(0x07,0x70);
  3193  03C8  3070               	movlw	112
  3194  03C9  0020               	movlb	0	; select bank0
  3195  03CA  00A0               	movwf	??_nRF_Setup_Write
  3196  03CB  0820               	movf	??_nRF_Setup_Write,w
  3197  03CC  00F3               	movwf	WriteRegisterRF@val
  3198  03CD  3007               	movlw	7
  3199  03CE  318F  274B  3183   	fcall	_WriteRegisterRF
  3200                           
  3201                           ;nRF24L01P.c: 116: WriteRegisterRF(0x11, 0x05);
  3202  03D1  3005               	movlw	5
  3203  03D2  0020               	movlb	0	; select bank0
  3204  03D3  00A0               	movwf	??_nRF_Setup_Write
  3205  03D4  0820               	movf	??_nRF_Setup_Write,w
  3206  03D5  00F3               	movwf	WriteRegisterRF@val
  3207  03D6  3011               	movlw	17
  3208  03D7  318F  274B  3183   	fcall	_WriteRegisterRF
  3209                           
  3210                           ;nRF24L01P.c: 117: WriteRegisterRF(0x00,0x7A);
  3211  03DA  307A               	movlw	122
  3212  03DB  0020               	movlb	0	; select bank0
  3213  03DC  00A0               	movwf	??_nRF_Setup_Write
  3214  03DD  0820               	movf	??_nRF_Setup_Write,w
  3215  03DE  00F3               	movwf	WriteRegisterRF@val
  3216  03DF  3000               	movlw	0
  3217  03E0  318F  274B  3183   	fcall	_WriteRegisterRF
  3218                           
  3219                           ;nRF24L01P.c: 118: _delay((unsigned long)((2)*(8000000L/4000.0)));
  3220  03E3  3006               	movlw	6
  3221  03E4  0020               	movlb	0	; select bank0
  3222  03E5  00A0               	movwf	??_nRF_Setup_Write
  3223  03E6  3030               	movlw	48
  3224  03E7                     u2387:	
  3225  03E7  0B89               	decfsz	9,f
  3226  03E8  2BE7               	goto	u2387
  3227  03E9  0BA0               	decfsz	??_nRF_Setup_Write,f
  3228  03EA  2BE7               	goto	u2387
  3229  03EB  0000               	nop
  3230  03EC  0008               	return
  3231  03ED                     __end_of_nRF_Setup_Write:	
  3232                           
  3233                           	psect	text4
  3234  03ED                     __ptext4:	
  3235 ;; *************** function _nRF_Setup_Read *****************
  3236 ;; Defined at:
  3237 ;;		line 125 in file "nRF24L01P.c"
  3238 ;; Parameters:    Size  Location     Type
  3239 ;;		None
  3240 ;; Auto vars:     Size  Location     Type
  3241 ;;  RXTX_ADDR       5    2[BANK0 ] unsigned char [5]
  3242 ;; Return value:  Size  Location     Type
  3243 ;;                  1    wreg      void 
  3244 ;; Registers used:
  3245 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3246 ;; Tracked objects:
  3247 ;;		On entry : 0/0
  3248 ;;		On exit  : 0/0
  3249 ;;		Unchanged: 0/0
  3250 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3251 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3252 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3253 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3254 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3255 ;;Total ram usage:        7 bytes
  3256 ;; Hardware stack levels used:    1
  3257 ;; Hardware stack levels required when called:    3
  3258 ;; This function calls:
  3259 ;;		_WriteAddress
  3260 ;;		_WriteRegisterRF
  3261 ;; This function is called by:
  3262 ;;		_main
  3263 ;; This function uses a non-reentrant model
  3264 ;;
  3265                           
  3266                           
  3267                           ;psect for function _nRF_Setup_Read
  3268  03ED                     _nRF_Setup_Read:	
  3269                           
  3270                           ;nRF24L01P.c: 128: uint8_t RXTX_ADDR[5];
  3271                           ;nRF24L01P.c: 129: RXTX_ADDR[4] = 0xAB;
  3272                           
  3273                           ;incstack = 0
  3274                           ; Regs used in _nRF_Setup_Read: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3275  03ED  30AB               	movlw	171
  3276  03EE  0020               	movlb	0	; select bank0
  3277  03EF  00A0               	movwf	??_nRF_Setup_Read
  3278  03F0  0820               	movf	??_nRF_Setup_Read,w
  3279  03F1  00A6               	movwf	nRF_Setup_Read@RXTX_ADDR+4
  3280                           
  3281                           ;nRF24L01P.c: 130: RXTX_ADDR[3] = 0xAC;
  3282  03F2  30AC               	movlw	172
  3283  03F3  00A0               	movwf	??_nRF_Setup_Read
  3284  03F4  0820               	movf	??_nRF_Setup_Read,w
  3285  03F5  00A5               	movwf	nRF_Setup_Read@RXTX_ADDR+3
  3286                           
  3287                           ;nRF24L01P.c: 131: RXTX_ADDR[2] = 0xAD;
  3288  03F6  30AD               	movlw	173
  3289  03F7  00A0               	movwf	??_nRF_Setup_Read
  3290  03F8  0820               	movf	??_nRF_Setup_Read,w
  3291  03F9  00A4               	movwf	nRF_Setup_Read@RXTX_ADDR+2
  3292                           
  3293                           ;nRF24L01P.c: 132: RXTX_ADDR[1] = 0xAE;
  3294  03FA  30AE               	movlw	174
  3295  03FB  00A0               	movwf	??_nRF_Setup_Read
  3296  03FC  0820               	movf	??_nRF_Setup_Read,w
  3297  03FD  00A3               	movwf	nRF_Setup_Read@RXTX_ADDR+1
  3298                           
  3299                           ;nRF24L01P.c: 133: RXTX_ADDR[0] = 0xAF;
  3300  03FE  30AF               	movlw	175
  3301  03FF  00A0               	movwf	??_nRF_Setup_Read
  3302  0400  0820               	movf	??_nRF_Setup_Read,w
  3303  0401  00A2               	movwf	nRF_Setup_Read@RXTX_ADDR
  3304                           
  3305                           ;nRF24L01P.c: 136: WriteAddress(0x10, 5, RXTX_ADDR);
  3306  0402  3005               	movlw	5
  3307  0403  00A0               	movwf	??_nRF_Setup_Read
  3308  0404  0820               	movf	??_nRF_Setup_Read,w
  3309  0405  00F3               	movwf	WriteAddress@num
  3310  0406  3022               	movlw	(low (nRF_Setup_Read@RXTX_ADDR| 0))& (0+255)
  3311  0407  00A1               	movwf	??_nRF_Setup_Read+1
  3312  0408  0821               	movf	??_nRF_Setup_Read+1,w
  3313  0409  00F4               	movwf	WriteAddress@addr
  3314  040A  3010               	movlw	16
  3315  040B  3187  2778  3183   	fcall	_WriteAddress
  3316                           
  3317                           ;nRF24L01P.c: 137: WriteAddress(0x0A, 5, RXTX_ADDR);
  3318  040E  3005               	movlw	5
  3319  040F  0020               	movlb	0	; select bank0
  3320  0410  00A0               	movwf	??_nRF_Setup_Read
  3321  0411  0820               	movf	??_nRF_Setup_Read,w
  3322  0412  00F3               	movwf	WriteAddress@num
  3323  0413  3022               	movlw	(low (nRF_Setup_Read@RXTX_ADDR| 0))& (0+255)
  3324  0414  00A1               	movwf	??_nRF_Setup_Read+1
  3325  0415  0821               	movf	??_nRF_Setup_Read+1,w
  3326  0416  00F4               	movwf	WriteAddress@addr
  3327  0417  300A               	movlw	10
  3328  0418  3187  2778  3183   	fcall	_WriteAddress
  3329                           
  3330                           ;nRF24L01P.c: 138: WriteRegisterRF(0x01, 0x01);
  3331  041B  01F3               	clrf	WriteRegisterRF@val
  3332  041C  0AF3               	incf	WriteRegisterRF@val,f
  3333  041D  3001               	movlw	1
  3334  041E  318F  274B  3183   	fcall	_WriteRegisterRF
  3335                           
  3336                           ;nRF24L01P.c: 139: WriteRegisterRF(0x02, 0x01);
  3337  0421  01F3               	clrf	WriteRegisterRF@val
  3338  0422  0AF3               	incf	WriteRegisterRF@val,f
  3339  0423  3002               	movlw	2
  3340  0424  318F  274B  3183   	fcall	_WriteRegisterRF
  3341                           
  3342                           ;nRF24L01P.c: 140: WriteRegisterRF(0x03, 0x03);
  3343  0427  3003               	movlw	3
  3344  0428  0020               	movlb	0	; select bank0
  3345  0429  00A0               	movwf	??_nRF_Setup_Read
  3346  042A  0820               	movf	??_nRF_Setup_Read,w
  3347  042B  00F3               	movwf	WriteRegisterRF@val
  3348  042C  3003               	movlw	3
  3349  042D  318F  274B  3183   	fcall	_WriteRegisterRF
  3350                           
  3351                           ;nRF24L01P.c: 141: WriteRegisterRF(0x04, 0x2F);
  3352  0430  302F               	movlw	47
  3353  0431  0020               	movlb	0	; select bank0
  3354  0432  00A0               	movwf	??_nRF_Setup_Read
  3355  0433  0820               	movf	??_nRF_Setup_Read,w
  3356  0434  00F3               	movwf	WriteRegisterRF@val
  3357  0435  3004               	movlw	4
  3358  0436  318F  274B  3183   	fcall	_WriteRegisterRF
  3359                           
  3360                           ;nRF24L01P.c: 143: WriteRegisterRF(0x05, 0x28);
  3361  0439  3028               	movlw	40
  3362  043A  0020               	movlb	0	; select bank0
  3363  043B  00A0               	movwf	??_nRF_Setup_Read
  3364  043C  0820               	movf	??_nRF_Setup_Read,w
  3365  043D  00F3               	movwf	WriteRegisterRF@val
  3366  043E  3005               	movlw	5
  3367  043F  318F  274B  3183   	fcall	_WriteRegisterRF
  3368                           
  3369                           ;nRF24L01P.c: 144: WriteRegisterRF(0x06, 0x06);
  3370  0442  3006               	movlw	6
  3371  0443  0020               	movlb	0	; select bank0
  3372  0444  00A0               	movwf	??_nRF_Setup_Read
  3373  0445  0820               	movf	??_nRF_Setup_Read,w
  3374  0446  00F3               	movwf	WriteRegisterRF@val
  3375  0447  3006               	movlw	6
  3376  0448  318F  274B  3183   	fcall	_WriteRegisterRF
  3377                           
  3378                           ;nRF24L01P.c: 145: WriteRegisterRF(0x07,0x70);
  3379  044B  3070               	movlw	112
  3380  044C  0020               	movlb	0	; select bank0
  3381  044D  00A0               	movwf	??_nRF_Setup_Read
  3382  044E  0820               	movf	??_nRF_Setup_Read,w
  3383  044F  00F3               	movwf	WriteRegisterRF@val
  3384  0450  3007               	movlw	7
  3385  0451  318F  274B  3183   	fcall	_WriteRegisterRF
  3386                           
  3387                           ;nRF24L01P.c: 146: WriteRegisterRF(0x11, 0x05);
  3388  0454  3005               	movlw	5
  3389  0455  0020               	movlb	0	; select bank0
  3390  0456  00A0               	movwf	??_nRF_Setup_Read
  3391  0457  0820               	movf	??_nRF_Setup_Read,w
  3392  0458  00F3               	movwf	WriteRegisterRF@val
  3393  0459  3011               	movlw	17
  3394  045A  318F  274B  3183   	fcall	_WriteRegisterRF
  3395                           
  3396                           ;nRF24L01P.c: 147: WriteRegisterRF(0x00,0x7B);
  3397  045D  307B               	movlw	123
  3398  045E  0020               	movlb	0	; select bank0
  3399  045F  00A0               	movwf	??_nRF_Setup_Read
  3400  0460  0820               	movf	??_nRF_Setup_Read,w
  3401  0461  00F3               	movwf	WriteRegisterRF@val
  3402  0462  3000               	movlw	0
  3403  0463  318F  274B  3183   	fcall	_WriteRegisterRF
  3404                           
  3405                           ;nRF24L01P.c: 150: _delay((unsigned long)((2)*(8000000L/4000.0)));
  3406  0466  3006               	movlw	6
  3407  0467  0020               	movlb	0	; select bank0
  3408  0468  00A0               	movwf	??_nRF_Setup_Read
  3409  0469  3030               	movlw	48
  3410  046A                     u2397:	
  3411  046A  0B89               	decfsz	9,f
  3412  046B  2C6A               	goto	u2397
  3413  046C  0BA0               	decfsz	??_nRF_Setup_Read,f
  3414  046D  2C6A               	goto	u2397
  3415  046E  0000               	nop
  3416                           
  3417                           ;nRF24L01P.c: 152: LATAbits.LATA4 = 1;
  3418  046F  0022               	movlb	2	; select bank2
  3419  0470  160C               	bsf	12,4	;volatile
  3420  0471  0008               	return
  3421  0472                     __end_of_nRF_Setup_Read:	
  3422                           
  3423                           	psect	text5
  3424  0778                     __ptext5:	
  3425 ;; *************** function _WriteAddress *****************
  3426 ;; Defined at:
  3427 ;;		line 38 in file "nRF24L01P.c"
  3428 ;; Parameters:    Size  Location     Type
  3429 ;;  reg             1    wreg     unsigned char 
  3430 ;;  num             1    3[COMMON] unsigned char 
  3431 ;;  addr            1    4[COMMON] PTR unsigned char 
  3432 ;;		 -> nRF_Setup_Read@RXTX_ADDR(5), nRF_Setup_Write@RXTX_ADDR(5), 
  3433 ;; Auto vars:     Size  Location     Type
  3434 ;;  reg             1    6[COMMON] unsigned char 
  3435 ;;  i               2    7[COMMON] int 
  3436 ;; Return value:  Size  Location     Type
  3437 ;;                  1    wreg      void 
  3438 ;; Registers used:
  3439 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3440 ;; Tracked objects:
  3441 ;;		On entry : 0/0
  3442 ;;		On exit  : 0/0
  3443 ;;		Unchanged: 0/0
  3444 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3445 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3446 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3447 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3448 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3449 ;;Total ram usage:        6 bytes
  3450 ;; Hardware stack levels used:    1
  3451 ;; Hardware stack levels required when called:    2
  3452 ;; This function calls:
  3453 ;;		_SPI_transfer
  3454 ;; This function is called by:
  3455 ;;		_nRF_Setup_Write
  3456 ;;		_nRF_Setup_Read
  3457 ;; This function uses a non-reentrant model
  3458 ;;
  3459                           
  3460                           
  3461                           ;psect for function _WriteAddress
  3462  0778                     _WriteAddress:	
  3463                           
  3464                           ;incstack = 0
  3465                           ; Regs used in _WriteAddress: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3466                           ;WriteAddress@reg stored from wreg
  3467  0778  00F6               	movwf	WriteAddress@reg
  3468                           
  3469                           ;nRF24L01P.c: 40: LATCbits.LATC6 = 0;
  3470  0779  0022               	movlb	2	; select bank2
  3471  077A  130E               	bcf	14,6	;volatile
  3472                           
  3473                           ;nRF24L01P.c: 41: SPI_transfer(0x20 | reg);
  3474  077B  0876               	movf	WriteAddress@reg,w
  3475  077C  3820               	iorlw	32
  3476  077D  318E  26F4  3187   	fcall	_SPI_transfer
  3477                           
  3478                           ;nRF24L01P.c: 42: for (int i=0; i<num; i++)
  3479  0780  01F7               	clrf	WriteAddress@i
  3480  0781  01F8               	clrf	WriteAddress@i+1
  3481  0782                     l2724:	
  3482  0782  0878               	movf	WriteAddress@i+1,w
  3483  0783  3A80               	xorlw	128
  3484  0784  00F5               	movwf	??_WriteAddress
  3485  0785  3080               	movlw	128
  3486  0786  0275               	subwf	??_WriteAddress,w
  3487  0787  1D03               	skipz
  3488  0788  2F8B               	goto	u1805
  3489  0789  0873               	movf	WriteAddress@num,w
  3490  078A  0277               	subwf	WriteAddress@i,w
  3491  078B                     u1805:	
  3492  078B  1803               	btfsc	3,0
  3493  078C  2F9C               	goto	l316
  3494                           
  3495                           ;nRF24L01P.c: 43: SPI_transfer(addr[i]);
  3496  078D  0877               	movf	WriteAddress@i,w
  3497  078E  0774               	addwf	WriteAddress@addr,w
  3498  078F  00F5               	movwf	??_WriteAddress
  3499  0790  0875               	movf	??_WriteAddress,w
  3500  0791  0086               	movwf	6
  3501  0792  0187               	clrf	7
  3502  0793  0801               	movf	1,w
  3503  0794  318E  26F4  3187   	fcall	_SPI_transfer
  3504  0797  3001               	movlw	1
  3505  0798  07F7               	addwf	WriteAddress@i,f
  3506  0799  3000               	movlw	0
  3507  079A  3DF8               	addwfc	WriteAddress@i+1,f
  3508  079B  2F82               	goto	l2724
  3509  079C                     l316:	
  3510                           
  3511                           ;nRF24L01P.c: 44: LATCbits.LATC6 = 1;
  3512  079C  0022               	movlb	2	; select bank2
  3513  079D  170E               	bsf	14,6	;volatile
  3514  079E  0008               	return
  3515  079F                     __end_of_WriteAddress:	
  3516                           
  3517                           	psect	text6
  3518  079F                     __ptext6:	
  3519 ;; *************** function _WritePayload *****************
  3520 ;; Defined at:
  3521 ;;		line 69 in file "nRF24L01P.c"
  3522 ;; Parameters:    Size  Location     Type
  3523 ;;  num             1    wreg     unsigned char 
  3524 ;;  data            1    3[COMMON] PTR unsigned char 
  3525 ;;		 -> main@data(5), main@data0(5), 
  3526 ;; Auto vars:     Size  Location     Type
  3527 ;;  num             1    5[COMMON] unsigned char 
  3528 ;;  i               1    6[COMMON] unsigned char 
  3529 ;; Return value:  Size  Location     Type
  3530 ;;                  1    wreg      void 
  3531 ;; Registers used:
  3532 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3533 ;; Tracked objects:
  3534 ;;		On entry : 0/0
  3535 ;;		On exit  : 0/0
  3536 ;;		Unchanged: 0/0
  3537 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3538 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3539 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3540 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3541 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3542 ;;Total ram usage:        4 bytes
  3543 ;; Hardware stack levels used:    1
  3544 ;; Hardware stack levels required when called:    2
  3545 ;; This function calls:
  3546 ;;		_SPI_transfer
  3547 ;; This function is called by:
  3548 ;;		_main
  3549 ;; This function uses a non-reentrant model
  3550 ;;
  3551                           
  3552                           
  3553                           ;psect for function _WritePayload
  3554  079F                     _WritePayload:	
  3555                           
  3556                           ;incstack = 0
  3557                           ; Regs used in _WritePayload: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3558                           ;WritePayload@num stored from wreg
  3559  079F  00F5               	movwf	WritePayload@num
  3560                           
  3561                           ;nRF24L01P.c: 71: LATCbits.LATC6 = 0;
  3562  07A0  0022               	movlb	2	; select bank2
  3563  07A1  130E               	bcf	14,6	;volatile
  3564                           
  3565                           ;nRF24L01P.c: 72: SPI_transfer(0xA0);
  3566  07A2  30A0               	movlw	160
  3567  07A3  318E  26F4  3187   	fcall	_SPI_transfer
  3568                           
  3569                           ;nRF24L01P.c: 73: for ( uint8_t i=0; i<num; i++)
  3570  07A6  01F6               	clrf	WritePayload@i
  3571  07A7                     l2806:	
  3572  07A7  0875               	movf	WritePayload@num,w
  3573  07A8  0276               	subwf	WritePayload@i,w
  3574  07A9  1803               	btfsc	3,0
  3575  07AA  2FBA               	goto	l328
  3576                           
  3577                           ;nRF24L01P.c: 74: SPI_transfer(data[i]);
  3578  07AB  0876               	movf	WritePayload@i,w
  3579  07AC  0773               	addwf	WritePayload@data,w
  3580  07AD  00F4               	movwf	??_WritePayload
  3581  07AE  0874               	movf	??_WritePayload,w
  3582  07AF  0086               	movwf	6
  3583  07B0  0187               	clrf	7
  3584  07B1  0801               	movf	1,w
  3585  07B2  318E  26F4  3187   	fcall	_SPI_transfer
  3586  07B5  3001               	movlw	1
  3587  07B6  00F4               	movwf	??_WritePayload
  3588  07B7  0874               	movf	??_WritePayload,w
  3589  07B8  07F6               	addwf	WritePayload@i,f
  3590  07B9  2FA7               	goto	l2806
  3591  07BA                     l328:	
  3592                           
  3593                           ;nRF24L01P.c: 75: LATCbits.LATC6 = 1;
  3594  07BA  0022               	movlb	2	; select bank2
  3595  07BB  170E               	bsf	14,6	;volatile
  3596                           
  3597                           ;nRF24L01P.c: 77: LATAbits.LATA4 = 1;
  3598  07BC  160C               	bsf	12,4	;volatile
  3599                           
  3600                           ;nRF24L01P.c: 78: _delay((unsigned long)((12)*(8000000L/4000000.0)));
  3601  07BD  3008               	movlw	8
  3602  07BE                     u2407:	
  3603  07BE  0B89               	decfsz	9,f
  3604  07BF  2FBE               	goto	u2407
  3605                           
  3606                           ;nRF24L01P.c: 79: LATAbits.LATA4 = 0;
  3607  07C0  0022               	movlb	2	; select bank2
  3608  07C1  120C               	bcf	12,4	;volatile
  3609  07C2  0008               	return
  3610  07C3                     __end_of_WritePayload:	
  3611                           
  3612                           	psect	text7
  3613  07DF                     __ptext7:	
  3614 ;; *************** function _SPI_init *****************
  3615 ;; Defined at:
  3616 ;;		line 14 in file "spi.c"
  3617 ;; Parameters:    Size  Location     Type
  3618 ;;		None
  3619 ;; Auto vars:     Size  Location     Type
  3620 ;;		None
  3621 ;; Return value:  Size  Location     Type
  3622 ;;                  1    wreg      void 
  3623 ;; Registers used:
  3624 ;;		wreg, status,2, status,0
  3625 ;; Tracked objects:
  3626 ;;		On entry : 0/0
  3627 ;;		On exit  : 0/0
  3628 ;;		Unchanged: 0/0
  3629 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3630 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3631 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3632 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3633 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3634 ;;Total ram usage:        0 bytes
  3635 ;; Hardware stack levels used:    1
  3636 ;; Hardware stack levels required when called:    1
  3637 ;; This function calls:
  3638 ;;		Nothing
  3639 ;; This function is called by:
  3640 ;;		_main
  3641 ;; This function uses a non-reentrant model
  3642 ;;
  3643                           
  3644                           
  3645                           ;psect for function _SPI_init
  3646  07DF                     _SPI_init:	
  3647                           
  3648                           ;spi.c: 17: SSPCON1bits.SSPEN = 1;
  3649                           
  3650                           ;incstack = 0
  3651                           ; Regs used in _SPI_init: [wreg+status,2+status,0]
  3652  07DF  0024               	movlb	4	; select bank4
  3653  07E0  1695               	bsf	21,5	;volatile
  3654                           
  3655                           ;spi.c: 18: SSPBUF = 0;
  3656  07E1  0191               	clrf	17	;volatile
  3657                           
  3658                           ;spi.c: 20: ANSELA = 0x00;
  3659  07E2  0023               	movlb	3	; select bank3
  3660  07E3  018C               	clrf	12	;volatile
  3661                           
  3662                           ;spi.c: 21: ANSELB = 0x00;
  3663  07E4  018D               	clrf	13	;volatile
  3664                           
  3665                           ;spi.c: 22: ANSELC = 0x00;
  3666  07E5  018E               	clrf	14	;volatile
  3667                           
  3668                           ;spi.c: 24: TRISBbits.TRISB6 = 0;
  3669  07E6  0021               	movlb	1	; select bank1
  3670  07E7  130D               	bcf	13,6	;volatile
  3671                           
  3672                           ;spi.c: 25: TRISBbits.TRISB4 = 1;
  3673  07E8  160D               	bsf	13,4	;volatile
  3674                           
  3675                           ;spi.c: 26: TRISCbits.TRISC7 = 0;
  3676  07E9  138E               	bcf	14,7	;volatile
  3677                           
  3678                           ;spi.c: 27: TRISCbits.TRISC6 = 0;
  3679  07EA  130E               	bcf	14,6	;volatile
  3680                           
  3681                           ;spi.c: 28: TRISAbits.TRISA4 = 0;
  3682  07EB  120C               	bcf	12,4	;volatile
  3683                           
  3684                           ;spi.c: 29: TRISCbits.TRISC5 = 0;
  3685  07EC  128E               	bcf	14,5	;volatile
  3686                           
  3687                           ;spi.c: 30: TRISCbits.TRISC4 = 0;
  3688  07ED  120E               	bcf	14,4	;volatile
  3689                           
  3690                           ;spi.c: 31: TRISAbits.TRISA5 = 0;
  3691  07EE  128C               	bcf	12,5	;volatile
  3692                           
  3693                           ;spi.c: 35: LATAbits.LATA5 = 1;
  3694  07EF  0022               	movlb	2	; select bank2
  3695  07F0  168C               	bsf	12,5	;volatile
  3696                           
  3697                           ;spi.c: 36: LATCbits.LATC6 = 1;
  3698  07F1  170E               	bsf	14,6	;volatile
  3699                           
  3700                           ;spi.c: 37: LATAbits.LATA4 = 0;
  3701  07F2  120C               	bcf	12,4	;volatile
  3702                           
  3703                           ;spi.c: 40: SSPSTATbits.CKE = 1;
  3704  07F3  0024               	movlb	4	; select bank4
  3705  07F4  1714               	bsf	20,6	;volatile
  3706                           
  3707                           ;spi.c: 42: SSPCON1bits.CKP = 0;
  3708  07F5  1215               	bcf	21,4	;volatile
  3709                           
  3710                           ;spi.c: 44: SSPSTATbits.SMP = 0;
  3711  07F6  1394               	bcf	20,7	;volatile
  3712                           
  3713                           ;spi.c: 50: SSPCON1bits.SSPM = 0b0000;
  3714  07F7  30F0               	movlw	-16
  3715  07F8  0595               	andwf	21,f	;volatile
  3716  07F9  0008               	return
  3717  07FA                     __end_of_SPI_init:	
  3718                           
  3719                           	psect	text8
  3720  0750                     __ptext8:	
  3721 ;; *************** function _ReadPayload *****************
  3722 ;; Defined at:
  3723 ;;		line 82 in file "nRF24L01P.c"
  3724 ;; Parameters:    Size  Location     Type
  3725 ;;  num             1    wreg     unsigned char 
  3726 ;;  data            1    3[COMMON] PTR unsigned char 
  3727 ;;		 -> main@data2(5), 
  3728 ;; Auto vars:     Size  Location     Type
  3729 ;;  num             1    6[COMMON] unsigned char 
  3730 ;;  i               1    7[COMMON] unsigned char 
  3731 ;; Return value:  Size  Location     Type
  3732 ;;                  1    wreg      void 
  3733 ;; Registers used:
  3734 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3735 ;; Tracked objects:
  3736 ;;		On entry : 0/0
  3737 ;;		On exit  : 0/0
  3738 ;;		Unchanged: 0/0
  3739 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3740 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3741 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3742 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3743 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3744 ;;Total ram usage:        5 bytes
  3745 ;; Hardware stack levels used:    1
  3746 ;; Hardware stack levels required when called:    2
  3747 ;; This function calls:
  3748 ;;		_SPI_transfer
  3749 ;; This function is called by:
  3750 ;;		_main
  3751 ;; This function uses a non-reentrant model
  3752 ;;
  3753                           
  3754                           
  3755                           ;psect for function _ReadPayload
  3756  0750                     _ReadPayload:	
  3757                           
  3758                           ;incstack = 0
  3759                           ; Regs used in _ReadPayload: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3760                           ;ReadPayload@num stored from wreg
  3761  0750  00F6               	movwf	ReadPayload@num
  3762                           
  3763                           ;nRF24L01P.c: 84: LATCbits.LATC6 = 0;
  3764  0751  0022               	movlb	2	; select bank2
  3765  0752  130E               	bcf	14,6	;volatile
  3766                           
  3767                           ;nRF24L01P.c: 85: SPI_transfer(0x61);
  3768  0753  3061               	movlw	97
  3769  0754  318E  26F4  3187   	fcall	_SPI_transfer
  3770                           
  3771                           ;nRF24L01P.c: 86: for ( uint8_t i=0; i<num; i++)
  3772  0757  01F7               	clrf	ReadPayload@i
  3773  0758                     l2916:	
  3774  0758  0876               	movf	ReadPayload@num,w
  3775  0759  0277               	subwf	ReadPayload@i,w
  3776  075A  1803               	btfsc	3,0
  3777  075B  2F6E               	goto	l334
  3778                           
  3779                           ;nRF24L01P.c: 87: data[i] = SPI_transfer(0xFF);
  3780  075C  30FF               	movlw	255
  3781  075D  318E  26F4  3187   	fcall	_SPI_transfer
  3782  0760  00F4               	movwf	??_ReadPayload
  3783  0761  0877               	movf	ReadPayload@i,w
  3784  0762  0773               	addwf	ReadPayload@data,w
  3785  0763  00F5               	movwf	??_ReadPayload+1
  3786  0764  0875               	movf	??_ReadPayload+1,w
  3787  0765  0086               	movwf	6
  3788  0766  0187               	clrf	7
  3789  0767  0874               	movf	??_ReadPayload,w
  3790  0768  0081               	movwf	1
  3791  0769  3001               	movlw	1
  3792  076A  00F4               	movwf	??_ReadPayload
  3793  076B  0874               	movf	??_ReadPayload,w
  3794  076C  07F7               	addwf	ReadPayload@i,f
  3795  076D  2F58               	goto	l2916
  3796  076E                     l334:	
  3797                           
  3798                           ;nRF24L01P.c: 88: LATCbits.LATC6 = 1;
  3799  076E  0022               	movlb	2	; select bank2
  3800  076F  170E               	bsf	14,6	;volatile
  3801                           
  3802                           ;nRF24L01P.c: 89: _delay((unsigned long)((1)*(8000000L/4000.0)));
  3803  0770  3003               	movlw	3
  3804  0771  00F4               	movwf	??_ReadPayload
  3805  0772  3098               	movlw	152
  3806  0773                     u2417:	
  3807  0773  0B89               	decfsz	9,f
  3808  0774  2F73               	goto	u2417
  3809  0775  0BF4               	decfsz	??_ReadPayload,f
  3810  0776  2F73               	goto	u2417
  3811  0777  0008               	return
  3812  0778                     __end_of_ReadPayload:	
  3813                           
  3814                           	psect	text9
  3815  0F97                     __ptext9:	
  3816 ;; *************** function _MFRC522_isCard *****************
  3817 ;; Defined at:
  3818 ;;		line 554 in file "rc522.c"
  3819 ;; Parameters:    Size  Location     Type
  3820 ;;  TagType         1    wreg     PTR unsigned char 
  3821 ;;		 -> main@TagType(1), 
  3822 ;; Auto vars:     Size  Location     Type
  3823 ;;  TagType         1   32[BANK0 ] PTR unsigned char 
  3824 ;;		 -> main@TagType(1), 
  3825 ;; Return value:  Size  Location     Type
  3826 ;;                  1    wreg      unsigned char 
  3827 ;; Registers used:
  3828 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3829 ;; Tracked objects:
  3830 ;;		On entry : 0/0
  3831 ;;		On exit  : 0/0
  3832 ;;		Unchanged: 0/0
  3833 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3834 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3835 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3836 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3837 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3838 ;;Total ram usage:        2 bytes
  3839 ;; Hardware stack levels used:    1
  3840 ;; Hardware stack levels required when called:    6
  3841 ;; This function calls:
  3842 ;;		_MFRC522_Request
  3843 ;; This function is called by:
  3844 ;;		_main
  3845 ;; This function uses a non-reentrant model
  3846 ;;
  3847                           
  3848                           
  3849                           ;psect for function _MFRC522_isCard
  3850  0F97                     _MFRC522_isCard:	
  3851                           
  3852                           ;incstack = 0
  3853                           ; Regs used in _MFRC522_isCard: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3854                           ;MFRC522_isCard@TagType stored from wreg
  3855  0F97  0020               	movlb	0	; select bank0
  3856  0F98  00C0               	movwf	MFRC522_isCard@TagType
  3857                           
  3858                           ;rc522.c: 556: if (MFRC522_Request( 0x26, TagType ) == 0)
  3859  0F99  0840               	movf	MFRC522_isCard@TagType,w
  3860  0F9A  00BF               	movwf	??_MFRC522_isCard
  3861  0F9B  083F               	movf	??_MFRC522_isCard,w
  3862  0F9C  00B6               	movwf	MFRC522_Request@TagType
  3863  0F9D  3026               	movlw	38
  3864  0F9E  3187  271A  318F   	fcall	_MFRC522_Request
  3865  0FA1  3A00               	xorlw	0
  3866  0FA2  1D03               	skipz
  3867  0FA3  2FA6               	goto	l2820
  3868                           
  3869                           ;rc522.c: 557: return 1;
  3870  0FA4  3001               	movlw	1
  3871  0FA5  0008               	return
  3872  0FA6                     l2820:	
  3873                           
  3874                           ;rc522.c: 558: else
  3875                           ;rc522.c: 559: return 0;
  3876  0FA6  3000               	movlw	0
  3877  0FA7  0008               	return
  3878  0FA8                     __end_of_MFRC522_isCard:	
  3879                           
  3880                           	psect	text10
  3881  071A                     __ptext10:	
  3882 ;; *************** function _MFRC522_Request *****************
  3883 ;; Defined at:
  3884 ;;		line 266 in file "rc522.c"
  3885 ;; Parameters:    Size  Location     Type
  3886 ;;  reqMode         1    wreg     unsigned char 
  3887 ;;  TagType         1   22[BANK0 ] PTR unsigned char 
  3888 ;;		 -> main@TagType(1), 
  3889 ;; Auto vars:     Size  Location     Type
  3890 ;;  reqMode         1   27[BANK0 ] unsigned char 
  3891 ;;  backBits        2   29[BANK0 ] unsigned int 
  3892 ;;  _status         1   28[BANK0 ] unsigned char 
  3893 ;; Return value:  Size  Location     Type
  3894 ;;                  1    wreg      unsigned char 
  3895 ;; Registers used:
  3896 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3897 ;; Tracked objects:
  3898 ;;		On entry : 0/0
  3899 ;;		On exit  : 0/0
  3900 ;;		Unchanged: 0/0
  3901 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3902 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3903 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3904 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3905 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3906 ;;Total ram usage:        9 bytes
  3907 ;; Hardware stack levels used:    1
  3908 ;; Hardware stack levels required when called:    5
  3909 ;; This function calls:
  3910 ;;		_MFRC522_ToCard
  3911 ;;		_WriteRegister
  3912 ;; This function is called by:
  3913 ;;		_MFRC522_isCard
  3914 ;; This function uses a non-reentrant model
  3915 ;;
  3916                           
  3917                           
  3918                           ;psect for function _MFRC522_Request
  3919  071A                     _MFRC522_Request:	
  3920                           
  3921                           ;incstack = 0
  3922                           ; Regs used in _MFRC522_Request: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3923                           ;MFRC522_Request@reqMode stored from wreg
  3924  071A  0020               	movlb	0	; select bank0
  3925  071B  00BB               	movwf	MFRC522_Request@reqMode
  3926                           
  3927                           ;rc522.c: 268: char _status;
  3928                           ;rc522.c: 269: unsigned backBits;
  3929                           ;rc522.c: 270: WriteRegister( 0x0D, 0x07 );
  3930  071C  3007               	movlw	7
  3931  071D  00B7               	movwf	??_MFRC522_Request
  3932  071E  0837               	movf	??_MFRC522_Request,w
  3933  071F  00F6               	movwf	WriteRegister@val
  3934  0720  300D               	movlw	13
  3935  0721  318F  2759  3187   	fcall	_WriteRegister
  3936                           
  3937                           ;rc522.c: 271: TagType[0] = reqMode;
  3938  0724  0020               	movlb	0	; select bank0
  3939  0725  083B               	movf	MFRC522_Request@reqMode,w
  3940  0726  00B7               	movwf	??_MFRC522_Request
  3941  0727  0836               	movf	MFRC522_Request@TagType,w
  3942  0728  0086               	movwf	6
  3943  0729  0187               	clrf	7
  3944  072A  0837               	movf	??_MFRC522_Request,w
  3945  072B  0081               	movwf	1
  3946                           
  3947                           ;rc522.c: 272: _status = MFRC522_ToCard( 0x0C, TagType, 1, TagType, &backBits );
  3948  072C  0836               	movf	MFRC522_Request@TagType,w
  3949  072D  00B7               	movwf	??_MFRC522_Request
  3950  072E  0837               	movf	??_MFRC522_Request,w
  3951  072F  00A2               	movwf	MFRC522_ToCard@sendData
  3952  0730  01A3               	clrf	MFRC522_ToCard@sendLen
  3953  0731  0AA3               	incf	MFRC522_ToCard@sendLen,f
  3954  0732  0836               	movf	MFRC522_Request@TagType,w
  3955  0733  00B8               	movwf	??_MFRC522_Request+1
  3956  0734  0838               	movf	??_MFRC522_Request+1,w
  3957  0735  00A4               	movwf	MFRC522_ToCard@backData
  3958  0736  303D               	movlw	(low (MFRC522_Request@backBits| 0))& (0+255)
  3959  0737  00B9               	movwf	??_MFRC522_Request+2
  3960  0738  0839               	movf	??_MFRC522_Request+2,w
  3961  0739  00A5               	movwf	MFRC522_ToCard@backLen
  3962  073A  300C               	movlw	12
  3963  073B  3182  223D  3187   	fcall	_MFRC522_ToCard
  3964  073E  0020               	movlb	0	; select bank0
  3965  073F  00BA               	movwf	??_MFRC522_Request+3
  3966  0740  083A               	movf	??_MFRC522_Request+3,w
  3967  0741  00BC               	movwf	MFRC522_Request@_status
  3968                           
  3969                           ;rc522.c: 273: if ( (_status != 0) || (backBits != 0x10))
  3970  0742  083C               	movf	MFRC522_Request@_status,w
  3971  0743  1D03               	btfss	3,2
  3972  0744  2F4A               	goto	l2646
  3973  0745  3010               	movlw	16
  3974  0746  063D               	xorwf	MFRC522_Request@backBits,w
  3975  0747  043E               	iorwf	MFRC522_Request@backBits+1,w
  3976  0748  1903               	btfsc	3,2
  3977  0749  2F4E               	goto	l219
  3978  074A                     l2646:	
  3979                           
  3980                           ;rc522.c: 274: {
  3981                           ;rc522.c: 275: _status = 2;
  3982  074A  3002               	movlw	2
  3983  074B  00B7               	movwf	??_MFRC522_Request
  3984  074C  0837               	movf	??_MFRC522_Request,w
  3985  074D  00BC               	movwf	MFRC522_Request@_status
  3986  074E                     l219:	
  3987                           
  3988                           ;rc522.c: 276: }
  3989                           ;rc522.c: 277: return _status;
  3990  074E  083C               	movf	MFRC522_Request@_status,w
  3991  074F  0008               	return
  3992  0750                     __end_of_MFRC522_Request:	
  3993                           
  3994                           	psect	text11
  3995  0532                     __ptext11:	
  3996 ;; *************** function _MFRC522_SelectTag *****************
  3997 ;; Defined at:
  3998 ;;		line 391 in file "rc522.c"
  3999 ;; Parameters:    Size  Location     Type
  4000 ;;  serNum          1    wreg     PTR unsigned char 
  4001 ;;		 -> main@UID(6), 
  4002 ;; Auto vars:     Size  Location     Type
  4003 ;;  serNum          1   37[BANK0 ] PTR unsigned char 
  4004 ;;		 -> main@UID(6), 
  4005 ;;  buffer          9   27[BANK0 ] unsigned char [9]
  4006 ;;  recvBits        2   39[BANK0 ] unsigned int 
  4007 ;;  i               1   41[BANK0 ] unsigned char 
  4008 ;;  size            1   38[BANK0 ] unsigned char 
  4009 ;;  _status         1   36[BANK0 ] unsigned char 
  4010 ;; Return value:  Size  Location     Type
  4011 ;;                  1    wreg      unsigned char 
  4012 ;; Registers used:
  4013 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4014 ;; Tracked objects:
  4015 ;;		On entry : 0/0
  4016 ;;		On exit  : 0/0
  4017 ;;		Unchanged: 0/0
  4018 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4019 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4020 ;;      Locals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4021 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4022 ;;      Totals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4023 ;;Total ram usage:       20 bytes
  4024 ;; Hardware stack levels used:    1
  4025 ;; Hardware stack levels required when called:    5
  4026 ;; This function calls:
  4027 ;;		_MFRC522_CRC
  4028 ;;		_MFRC522_ToCard
  4029 ;; This function is called by:
  4030 ;;		_main
  4031 ;; This function uses a non-reentrant model
  4032 ;;
  4033                           
  4034                           
  4035                           ;psect for function _MFRC522_SelectTag
  4036  0532                     _MFRC522_SelectTag:	
  4037                           
  4038                           ;incstack = 0
  4039                           ; Regs used in _MFRC522_SelectTag: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4040                           ;MFRC522_SelectTag@serNum stored from wreg
  4041  0532  0020               	movlb	0	; select bank0
  4042  0533  00C5               	movwf	MFRC522_SelectTag@serNum
  4043                           
  4044                           ;rc522.c: 393: char i;
  4045                           ;rc522.c: 394: char _status;
  4046                           ;rc522.c: 395: char size;
  4047                           ;rc522.c: 396: unsigned recvBits;
  4048                           ;rc522.c: 397: char buffer[9];
  4049                           ;rc522.c: 401: buffer[0] = 0x93;
  4050  0534  3093               	movlw	147
  4051  0535  00B6               	movwf	??_MFRC522_SelectTag
  4052  0536  0836               	movf	??_MFRC522_SelectTag,w
  4053  0537  00BB               	movwf	MFRC522_SelectTag@buffer
  4054                           
  4055                           ;rc522.c: 402: buffer[1] = 0x70;
  4056  0538  3070               	movlw	112
  4057  0539  00B6               	movwf	??_MFRC522_SelectTag
  4058  053A  0836               	movf	??_MFRC522_SelectTag,w
  4059  053B  00BC               	movwf	MFRC522_SelectTag@buffer+1
  4060                           
  4061                           ;rc522.c: 404: for ( i=2; i < 7; i++ )
  4062  053C  3002               	movlw	2
  4063  053D  00B6               	movwf	??_MFRC522_SelectTag
  4064  053E  0836               	movf	??_MFRC522_SelectTag,w
  4065  053F  00C9               	movwf	MFRC522_SelectTag@i
  4066  0540  3007               	movlw	7
  4067  0541  0249               	subwf	MFRC522_SelectTag@i,w
  4068  0542  1803               	btfsc	3,0
  4069  0543  2D5B               	goto	l2852
  4070  0544                     l2844:	
  4071                           
  4072                           ;rc522.c: 405: {
  4073                           ;rc522.c: 406: buffer[i] = *serNum++;
  4074  0544  0845               	movf	MFRC522_SelectTag@serNum,w
  4075  0545  0086               	movwf	6
  4076  0546  0187               	clrf	7
  4077  0547  0801               	movf	1,w
  4078  0548  00B6               	movwf	??_MFRC522_SelectTag
  4079  0549  0849               	movf	MFRC522_SelectTag@i,w
  4080  054A  3E3B               	addlw	(low (MFRC522_SelectTag@buffer| 0))& (0+255)
  4081  054B  0086               	movwf	6
  4082  054C  0187               	clrf	7
  4083  054D  0836               	movf	??_MFRC522_SelectTag,w
  4084  054E  0081               	movwf	1
  4085  054F  3001               	movlw	1
  4086  0550  00B6               	movwf	??_MFRC522_SelectTag
  4087  0551  0836               	movf	??_MFRC522_SelectTag,w
  4088  0552  07C5               	addwf	MFRC522_SelectTag@serNum,f
  4089  0553  3001               	movlw	1
  4090  0554  00B6               	movwf	??_MFRC522_SelectTag
  4091  0555  0836               	movf	??_MFRC522_SelectTag,w
  4092  0556  07C9               	addwf	MFRC522_SelectTag@i,f
  4093  0557  3007               	movlw	7
  4094  0558  0249               	subwf	MFRC522_SelectTag@i,w
  4095  0559  1C03               	skipc
  4096  055A  2D44               	goto	l2844
  4097  055B                     l2852:	
  4098                           
  4099                           ;rc522.c: 407: }
  4100                           ;rc522.c: 409: MFRC522_CRC( buffer, 7, &buffer[7] );
  4101  055B  3007               	movlw	7
  4102  055C  00B6               	movwf	??_MFRC522_SelectTag
  4103  055D  0836               	movf	??_MFRC522_SelectTag,w
  4104  055E  00A2               	movwf	MFRC522_CRC@length
  4105  055F  3042               	movlw	(low ((MFRC522_SelectTag@buffer| 0+7)))& (0+255)
  4106  0560  00B7               	movwf	??_MFRC522_SelectTag+1
  4107  0561  0837               	movf	??_MFRC522_SelectTag+1,w
  4108  0562  00A3               	movwf	MFRC522_CRC@dataOut
  4109  0563  303B               	movlw	(low (MFRC522_SelectTag@buffer| 0))& (0+255)
  4110  0564  3184  24D2  3185   	fcall	_MFRC522_CRC
  4111                           
  4112                           ;rc522.c: 411: _status = MFRC522_ToCard( 0x0C, buffer, 9, buffer, &recvBits );
  4113  0567  303B               	movlw	(low (MFRC522_SelectTag@buffer| 0))& (0+255)
  4114  0568  0020               	movlb	0	; select bank0
  4115  0569  00B6               	movwf	??_MFRC522_SelectTag
  4116  056A  0836               	movf	??_MFRC522_SelectTag,w
  4117  056B  00A2               	movwf	MFRC522_ToCard@sendData
  4118  056C  3009               	movlw	9
  4119  056D  00B7               	movwf	??_MFRC522_SelectTag+1
  4120  056E  0837               	movf	??_MFRC522_SelectTag+1,w
  4121  056F  00A3               	movwf	MFRC522_ToCard@sendLen
  4122  0570  303B               	movlw	(low (MFRC522_SelectTag@buffer| 0))& (0+255)
  4123  0571  00B8               	movwf	??_MFRC522_SelectTag+2
  4124  0572  0838               	movf	??_MFRC522_SelectTag+2,w
  4125  0573  00A4               	movwf	MFRC522_ToCard@backData
  4126  0574  3047               	movlw	(low (MFRC522_SelectTag@recvBits| 0))& (0+255)
  4127  0575  00B9               	movwf	??_MFRC522_SelectTag+3
  4128  0576  0839               	movf	??_MFRC522_SelectTag+3,w
  4129  0577  00A5               	movwf	MFRC522_ToCard@backLen
  4130  0578  300C               	movlw	12
  4131  0579  3182  223D  3185   	fcall	_MFRC522_ToCard
  4132  057C  0020               	movlb	0	; select bank0
  4133  057D  00BA               	movwf	??_MFRC522_SelectTag+4
  4134  057E  083A               	movf	??_MFRC522_SelectTag+4,w
  4135  057F  00C4               	movwf	MFRC522_SelectTag@_status
  4136                           
  4137                           ;rc522.c: 412: if ( (_status == 0) && (recvBits == 0x18) )
  4138  0580  0844               	movf	MFRC522_SelectTag@_status,w
  4139  0581  1D03               	btfss	3,2
  4140  0582  2D8D               	goto	l2862
  4141  0583  3018               	movlw	24
  4142  0584  0647               	xorwf	MFRC522_SelectTag@recvBits,w
  4143  0585  0448               	iorwf	MFRC522_SelectTag@recvBits+1,w
  4144  0586  1D03               	btfss	3,2
  4145  0587  2D8D               	goto	l2862
  4146                           
  4147                           ;rc522.c: 413: {
  4148                           ;rc522.c: 414: size = buffer[0];
  4149  0588  083B               	movf	MFRC522_SelectTag@buffer,w
  4150  0589  00B6               	movwf	??_MFRC522_SelectTag
  4151  058A  0836               	movf	??_MFRC522_SelectTag,w
  4152  058B  00C6               	movwf	MFRC522_SelectTag@size
  4153                           
  4154                           ;rc522.c: 415: }
  4155  058C  2D8E               	goto	l2864
  4156  058D                     l2862:	
  4157                           
  4158                           ;rc522.c: 416: else
  4159                           ;rc522.c: 417: {
  4160                           ;rc522.c: 418: size = 0;
  4161  058D  01C6               	clrf	MFRC522_SelectTag@size
  4162  058E                     l2864:	
  4163                           
  4164                           ;rc522.c: 419: }
  4165                           ;rc522.c: 420: return size;
  4166  058E  0846               	movf	MFRC522_SelectTag@size,w
  4167  058F  0008               	return
  4168  0590                     __end_of_MFRC522_SelectTag:	
  4169                           
  4170                           	psect	text12
  4171  0FD0                     __ptext12:	
  4172 ;; *************** function _MFRC522_ReadCardSerial *****************
  4173 ;; Defined at:
  4174 ;;		line 563 in file "rc522.c"
  4175 ;; Parameters:    Size  Location     Type
  4176 ;;  str             1    wreg     PTR unsigned char 
  4177 ;;		 -> main@UID(6), 
  4178 ;; Auto vars:     Size  Location     Type
  4179 ;;  str             1   35[BANK0 ] PTR unsigned char 
  4180 ;;		 -> main@UID(6), 
  4181 ;;  _status         1   34[BANK0 ] unsigned char 
  4182 ;; Return value:  Size  Location     Type
  4183 ;;                  1    wreg      unsigned char 
  4184 ;; Registers used:
  4185 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4186 ;; Tracked objects:
  4187 ;;		On entry : 0/0
  4188 ;;		On exit  : 0/0
  4189 ;;		Unchanged: 0/0
  4190 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4191 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4192 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4193 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4194 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4195 ;;Total ram usage:        3 bytes
  4196 ;; Hardware stack levels used:    1
  4197 ;; Hardware stack levels required when called:    6
  4198 ;; This function calls:
  4199 ;;		_MFRC522_AntiColl
  4200 ;; This function is called by:
  4201 ;;		_main
  4202 ;; This function uses a non-reentrant model
  4203 ;;
  4204                           
  4205                           
  4206                           ;psect for function _MFRC522_ReadCardSerial
  4207  0FD0                     _MFRC522_ReadCardSerial:	
  4208                           
  4209                           ;incstack = 0
  4210                           ; Regs used in _MFRC522_ReadCardSerial: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4211                           ;MFRC522_ReadCardSerial@str stored from wreg
  4212  0FD0  0020               	movlb	0	; select bank0
  4213  0FD1  00C3               	movwf	MFRC522_ReadCardSerial@str
  4214                           
  4215                           ;rc522.c: 565: char _status;
  4216                           ;rc522.c: 566: _status = MFRC522_AntiColl( str );
  4217  0FD2  0843               	movf	MFRC522_ReadCardSerial@str,w
  4218  0FD3  3184  2472  318F   	fcall	_MFRC522_AntiColl
  4219  0FD6  0020               	movlb	0	; select bank0
  4220  0FD7  00C1               	movwf	??_MFRC522_ReadCardSerial
  4221  0FD8  0841               	movf	??_MFRC522_ReadCardSerial,w
  4222  0FD9  00C2               	movwf	MFRC522_ReadCardSerial@_status
  4223                           
  4224                           ;rc522.c: 567: str[5] = 0;
  4225  0FDA  0843               	movf	MFRC522_ReadCardSerial@str,w
  4226  0FDB  3E05               	addlw	5
  4227  0FDC  0086               	movwf	6
  4228  0FDD  0187               	clrf	7
  4229  0FDE  0181               	clrf	1
  4230                           
  4231                           ;rc522.c: 568: if (_status == 0)
  4232  0FDF  0842               	movf	MFRC522_ReadCardSerial@_status,w
  4233  0FE0  1D03               	btfss	3,2
  4234  0FE1  2FE4               	goto	l2836
  4235                           
  4236                           ;rc522.c: 569: return 1;
  4237  0FE2  3001               	movlw	1
  4238  0FE3  0008               	return
  4239  0FE4                     l2836:	
  4240                           
  4241                           ;rc522.c: 570: else
  4242                           ;rc522.c: 571: return 0;
  4243  0FE4  3000               	movlw	0
  4244  0FE5  0008               	return
  4245  0FE6                     __end_of_MFRC522_ReadCardSerial:	
  4246                           
  4247                           	psect	text13
  4248  0472                     __ptext13:	
  4249 ;; *************** function _MFRC522_AntiColl *****************
  4250 ;; Defined at:
  4251 ;;		line 520 in file "rc522.c"
  4252 ;; Parameters:    Size  Location     Type
  4253 ;;  serNum          1    wreg     PTR unsigned char 
  4254 ;;		 -> main@UID(6), 
  4255 ;; Auto vars:     Size  Location     Type
  4256 ;;  serNum          1   32[BANK0 ] PTR unsigned char 
  4257 ;;		 -> main@UID(6), 
  4258 ;;  unLen           2   28[BANK0 ] unsigned int 
  4259 ;;  i               1   31[BANK0 ] unsigned char 
  4260 ;;  _status         1   30[BANK0 ] unsigned char 
  4261 ;;  serNumCheck     1   27[BANK0 ] unsigned char 
  4262 ;; Return value:  Size  Location     Type
  4263 ;;                  1    wreg      unsigned char 
  4264 ;; Registers used:
  4265 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4266 ;; Tracked objects:
  4267 ;;		On entry : 0/0
  4268 ;;		On exit  : 0/0
  4269 ;;		Unchanged: 0/0
  4270 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4271 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4272 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4273 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4274 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4275 ;;Total ram usage:       11 bytes
  4276 ;; Hardware stack levels used:    1
  4277 ;; Hardware stack levels required when called:    5
  4278 ;; This function calls:
  4279 ;;		_MFRC522_Clear_Bit
  4280 ;;		_MFRC522_ToCard
  4281 ;;		_WriteRegister
  4282 ;; This function is called by:
  4283 ;;		_MFRC522_ReadCardSerial
  4284 ;; This function uses a non-reentrant model
  4285 ;;
  4286                           
  4287                           
  4288                           ;psect for function _MFRC522_AntiColl
  4289  0472                     _MFRC522_AntiColl:	
  4290                           
  4291                           ;incstack = 0
  4292                           ; Regs used in _MFRC522_AntiColl: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4293                           ;MFRC522_AntiColl@serNum stored from wreg
  4294  0472  0020               	movlb	0	; select bank0
  4295  0473  00C0               	movwf	MFRC522_AntiColl@serNum
  4296                           
  4297                           ;rc522.c: 522: char _status;
  4298                           ;rc522.c: 523: char i;
  4299                           ;rc522.c: 524: char serNumCheck = 0;
  4300  0474  01BB               	clrf	MFRC522_AntiColl@serNumCheck
  4301                           
  4302                           ;rc522.c: 525: unsigned unLen;
  4303                           ;rc522.c: 526: WriteRegister( 0x0D, 0x00 );
  4304  0475  01F6               	clrf	WriteRegister@val
  4305  0476  300D               	movlw	13
  4306  0477  318F  2759  3184   	fcall	_WriteRegister
  4307                           
  4308                           ;rc522.c: 527: serNum[0] = 0x93;
  4309  047A  3093               	movlw	147
  4310  047B  0020               	movlb	0	; select bank0
  4311  047C  00B6               	movwf	??_MFRC522_AntiColl
  4312  047D  0840               	movf	MFRC522_AntiColl@serNum,w
  4313  047E  0086               	movwf	6
  4314  047F  0187               	clrf	7
  4315  0480  0836               	movf	??_MFRC522_AntiColl,w
  4316  0481  0081               	movwf	1
  4317                           
  4318                           ;rc522.c: 528: serNum[1] = 0x20;
  4319  0482  3020               	movlw	32
  4320  0483  00B6               	movwf	??_MFRC522_AntiColl
  4321  0484  0A40               	incf	MFRC522_AntiColl@serNum,w
  4322  0485  0086               	movwf	6
  4323  0486  0187               	clrf	7
  4324  0487  0836               	movf	??_MFRC522_AntiColl,w
  4325  0488  0081               	movwf	1
  4326                           
  4327                           ;rc522.c: 529: MFRC522_Clear_Bit( 0x08, 0x08 );
  4328  0489  3008               	movlw	8
  4329  048A  00B6               	movwf	??_MFRC522_AntiColl
  4330  048B  0836               	movf	??_MFRC522_AntiColl,w
  4331  048C  00F8               	movwf	MFRC522_Clear_Bit@mask
  4332  048D  3008               	movlw	8
  4333  048E  318F  2786  3184   	fcall	_MFRC522_Clear_Bit
  4334                           
  4335                           ;rc522.c: 530: _status = MFRC522_ToCard( 0x0C, serNum, 2, serNum, &unLen );
  4336  0491  0020               	movlb	0	; select bank0
  4337  0492  0840               	movf	MFRC522_AntiColl@serNum,w
  4338  0493  00B6               	movwf	??_MFRC522_AntiColl
  4339  0494  0836               	movf	??_MFRC522_AntiColl,w
  4340  0495  00A2               	movwf	MFRC522_ToCard@sendData
  4341  0496  3002               	movlw	2
  4342  0497  00B7               	movwf	??_MFRC522_AntiColl+1
  4343  0498  0837               	movf	??_MFRC522_AntiColl+1,w
  4344  0499  00A3               	movwf	MFRC522_ToCard@sendLen
  4345  049A  0840               	movf	MFRC522_AntiColl@serNum,w
  4346  049B  00B8               	movwf	??_MFRC522_AntiColl+2
  4347  049C  0838               	movf	??_MFRC522_AntiColl+2,w
  4348  049D  00A4               	movwf	MFRC522_ToCard@backData
  4349  049E  303C               	movlw	(low (MFRC522_AntiColl@unLen| 0))& (0+255)
  4350  049F  00B9               	movwf	??_MFRC522_AntiColl+3
  4351  04A0  0839               	movf	??_MFRC522_AntiColl+3,w
  4352  04A1  00A5               	movwf	MFRC522_ToCard@backLen
  4353  04A2  300C               	movlw	12
  4354  04A3  3182  223D  3184   	fcall	_MFRC522_ToCard
  4355  04A6  0020               	movlb	0	; select bank0
  4356  04A7  00BA               	movwf	??_MFRC522_AntiColl+4
  4357  04A8  083A               	movf	??_MFRC522_AntiColl+4,w
  4358  04A9  00BE               	movwf	MFRC522_AntiColl@_status
  4359                           
  4360                           ;rc522.c: 531: if (_status == 0)
  4361  04AA  083E               	movf	MFRC522_AntiColl@_status,w
  4362  04AB  1D03               	btfss	3,2
  4363  04AC  2CD0               	goto	l273
  4364                           
  4365                           ;rc522.c: 532: {
  4366                           ;rc522.c: 533: for ( i=0; i < 4; i++ )
  4367  04AD  01BF               	clrf	MFRC522_AntiColl@i
  4368  04AE  3004               	movlw	4
  4369  04AF  023F               	subwf	MFRC522_AntiColl@i,w
  4370  04B0  1803               	btfsc	3,0
  4371  04B1  2CC4               	goto	l2702
  4372  04B2                     l2696:	
  4373                           
  4374                           ;rc522.c: 534: {
  4375                           ;rc522.c: 535: serNumCheck ^= serNum[i];
  4376  04B2  083F               	movf	MFRC522_AntiColl@i,w
  4377  04B3  0740               	addwf	MFRC522_AntiColl@serNum,w
  4378  04B4  00B6               	movwf	??_MFRC522_AntiColl
  4379  04B5  0836               	movf	??_MFRC522_AntiColl,w
  4380  04B6  0086               	movwf	6
  4381  04B7  0187               	clrf	7
  4382  04B8  0801               	movf	1,w
  4383  04B9  00B7               	movwf	??_MFRC522_AntiColl+1
  4384  04BA  0837               	movf	??_MFRC522_AntiColl+1,w
  4385  04BB  06BB               	xorwf	MFRC522_AntiColl@serNumCheck,f
  4386  04BC  3001               	movlw	1
  4387  04BD  00B6               	movwf	??_MFRC522_AntiColl
  4388  04BE  0836               	movf	??_MFRC522_AntiColl,w
  4389  04BF  07BF               	addwf	MFRC522_AntiColl@i,f
  4390  04C0  3004               	movlw	4
  4391  04C1  023F               	subwf	MFRC522_AntiColl@i,w
  4392  04C2  1C03               	skipc
  4393  04C3  2CB2               	goto	l2696
  4394  04C4                     l2702:	
  4395                           
  4396                           ;rc522.c: 536: }
  4397                           ;rc522.c: 538: if ( serNumCheck != serNum[4] )
  4398  04C4  0840               	movf	MFRC522_AntiColl@serNum,w
  4399  04C5  3E04               	addlw	4
  4400  04C6  0086               	movwf	6
  4401  04C7  0187               	clrf	7
  4402  04C8  0801               	movf	1,w
  4403  04C9  063B               	xorwf	MFRC522_AntiColl@serNumCheck,w
  4404  04CA  1903               	skipnz
  4405  04CB  2CD0               	goto	l273
  4406                           
  4407                           ;rc522.c: 539: {
  4408                           ;rc522.c: 540: _status = 2;
  4409  04CC  3002               	movlw	2
  4410  04CD  00B6               	movwf	??_MFRC522_AntiColl
  4411  04CE  0836               	movf	??_MFRC522_AntiColl,w
  4412  04CF  00BE               	movwf	MFRC522_AntiColl@_status
  4413  04D0                     l273:	
  4414                           
  4415                           ;rc522.c: 541: }
  4416                           ;rc522.c: 542: }
  4417                           ;rc522.c: 543: return _status;
  4418  04D0  083E               	movf	MFRC522_AntiColl@_status,w
  4419  04D1  0008               	return
  4420  04D2                     __end_of_MFRC522_AntiColl:	
  4421                           
  4422                           	psect	text14
  4423  0590                     __ptext14:	
  4424 ;; *************** function _MFRC522_Init *****************
  4425 ;; Defined at:
  4426 ;;		line 82 in file "rc522.c"
  4427 ;; Parameters:    Size  Location     Type
  4428 ;;		None
  4429 ;; Auto vars:     Size  Location     Type
  4430 ;;		None
  4431 ;; Return value:  Size  Location     Type
  4432 ;;                  1    wreg      void 
  4433 ;; Registers used:
  4434 ;;		wreg, status,2, status,0, pclath, cstack
  4435 ;; Tracked objects:
  4436 ;;		On entry : 0/0
  4437 ;;		On exit  : 0/0
  4438 ;;		Unchanged: 0/0
  4439 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4440 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4441 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4442 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4443 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4444 ;;Total ram usage:        1 bytes
  4445 ;; Hardware stack levels used:    1
  4446 ;; Hardware stack levels required when called:    5
  4447 ;; This function calls:
  4448 ;;		_MFRC522_AntennaOn
  4449 ;;		_MFRC522_Reset
  4450 ;;		_WriteRegister
  4451 ;; This function is called by:
  4452 ;;		_main
  4453 ;; This function uses a non-reentrant model
  4454 ;;
  4455                           
  4456                           
  4457                           ;psect for function _MFRC522_Init
  4458  0590                     _MFRC522_Init:	
  4459                           
  4460                           ;rc522.c: 84: LATCbits.LATC4 = 1;
  4461                           
  4462                           ;incstack = 0
  4463                           ; Regs used in _MFRC522_Init: [wreg+status,2+status,0+pclath+cstack]
  4464  0590  0022               	movlb	2	; select bank2
  4465  0591  160E               	bsf	14,4	;volatile
  4466                           
  4467                           ;rc522.c: 85: _delay((unsigned long)((50)*(8000000L/4000.0)));
  4468  0592  3082               	movlw	130
  4469  0593  0020               	movlb	0	; select bank0
  4470  0594  00A2               	movwf	??_MFRC522_Init
  4471  0595  30DD               	movlw	221
  4472  0596                     u2427:	
  4473  0596  0B89               	decfsz	9,f
  4474  0597  2D96               	goto	u2427
  4475  0598  0BA2               	decfsz	??_MFRC522_Init,f
  4476  0599  2D96               	goto	u2427
  4477  059A  3200               	nop2
  4478                           
  4479                           ;rc522.c: 86: LATCbits.LATC4 = 0;
  4480  059B  0022               	movlb	2	; select bank2
  4481  059C  120E               	bcf	14,4	;volatile
  4482                           
  4483                           ;rc522.c: 87: LATCbits.LATC5 = 1;
  4484  059D  168E               	bsf	14,5	;volatile
  4485                           
  4486                           ;rc522.c: 88: _delay((unsigned long)((50)*(8000000L/4000.0)));
  4487  059E  3082               	movlw	130
  4488  059F  0020               	movlb	0	; select bank0
  4489  05A0  00A2               	movwf	??_MFRC522_Init
  4490  05A1  30DD               	movlw	221
  4491  05A2                     u2437:	
  4492  05A2  0B89               	decfsz	9,f
  4493  05A3  2DA2               	goto	u2437
  4494  05A4  0BA2               	decfsz	??_MFRC522_Init,f
  4495  05A5  2DA2               	goto	u2437
  4496  05A6  3200               	nop2
  4497                           
  4498                           ;rc522.c: 89: LATCbits.LATC5 = 0;
  4499  05A7  0022               	movlb	2	; select bank2
  4500  05A8  128E               	bcf	14,5	;volatile
  4501                           
  4502                           ;rc522.c: 93: MFRC522_Reset();
  4503  05A9  318E  26FC  3185   	fcall	_MFRC522_Reset
  4504                           
  4505                           ;rc522.c: 96: WriteRegister(0x2A, 0x8D );
  4506  05AC  308D               	movlw	141
  4507  05AD  0020               	movlb	0	; select bank0
  4508  05AE  00A2               	movwf	??_MFRC522_Init
  4509  05AF  0822               	movf	??_MFRC522_Init,w
  4510  05B0  00F6               	movwf	WriteRegister@val
  4511  05B1  302A               	movlw	42
  4512  05B2  318F  2759  3185   	fcall	_WriteRegister
  4513                           
  4514                           ;rc522.c: 97: WriteRegister( 0x2B, 0x3E );
  4515  05B5  303E               	movlw	62
  4516  05B6  0020               	movlb	0	; select bank0
  4517  05B7  00A2               	movwf	??_MFRC522_Init
  4518  05B8  0822               	movf	??_MFRC522_Init,w
  4519  05B9  00F6               	movwf	WriteRegister@val
  4520  05BA  302B               	movlw	43
  4521  05BB  318F  2759  3185   	fcall	_WriteRegister
  4522                           
  4523                           ;rc522.c: 99: WriteRegister( 0x2D, 30 );
  4524  05BE  301E               	movlw	30
  4525  05BF  0020               	movlb	0	; select bank0
  4526  05C0  00A2               	movwf	??_MFRC522_Init
  4527  05C1  0822               	movf	??_MFRC522_Init,w
  4528  05C2  00F6               	movwf	WriteRegister@val
  4529  05C3  302D               	movlw	45
  4530  05C4  318F  2759  3185   	fcall	_WriteRegister
  4531                           
  4532                           ;rc522.c: 100: WriteRegister( 0x2C, 0 );
  4533  05C7  01F6               	clrf	WriteRegister@val
  4534  05C8  302C               	movlw	44
  4535  05C9  318F  2759  3185   	fcall	_WriteRegister
  4536                           
  4537                           ;rc522.c: 102: WriteRegister( 0x15, 0x40 );
  4538  05CC  3040               	movlw	64
  4539  05CD  0020               	movlb	0	; select bank0
  4540  05CE  00A2               	movwf	??_MFRC522_Init
  4541  05CF  0822               	movf	??_MFRC522_Init,w
  4542  05D0  00F6               	movwf	WriteRegister@val
  4543  05D1  3015               	movlw	21
  4544  05D2  318F  2759  3185   	fcall	_WriteRegister
  4545                           
  4546                           ;rc522.c: 103: WriteRegister( 0x11, 0x3D );
  4547  05D5  303D               	movlw	61
  4548  05D6  0020               	movlb	0	; select bank0
  4549  05D7  00A2               	movwf	??_MFRC522_Init
  4550  05D8  0822               	movf	??_MFRC522_Init,w
  4551  05D9  00F6               	movwf	WriteRegister@val
  4552  05DA  3011               	movlw	17
  4553  05DB  318F  2759  3185   	fcall	_WriteRegister
  4554                           
  4555                           ;rc522.c: 109: MFRC522_AntennaOn();
  4556  05DE  318F  2715         	fcall	_MFRC522_AntennaOn
  4557  05E0  0008               	return
  4558  05E1                     __end_of_MFRC522_Init:	
  4559                           
  4560                           	psect	text15
  4561  0EFC                     __ptext15:	
  4562 ;; *************** function _MFRC522_Reset *****************
  4563 ;; Defined at:
  4564 ;;		line 69 in file "rc522.c"
  4565 ;; Parameters:    Size  Location     Type
  4566 ;;		None
  4567 ;; Auto vars:     Size  Location     Type
  4568 ;;		None
  4569 ;; Return value:  Size  Location     Type
  4570 ;;                  1    wreg      void 
  4571 ;; Registers used:
  4572 ;;		wreg, status,2, status,0, pclath, cstack
  4573 ;; Tracked objects:
  4574 ;;		On entry : 0/0
  4575 ;;		On exit  : 0/0
  4576 ;;		Unchanged: 0/0
  4577 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4578 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4579 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4580 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4581 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4582 ;;Total ram usage:        1 bytes
  4583 ;; Hardware stack levels used:    1
  4584 ;; Hardware stack levels required when called:    3
  4585 ;; This function calls:
  4586 ;;		_WriteRegister
  4587 ;; This function is called by:
  4588 ;;		_MFRC522_Init
  4589 ;; This function uses a non-reentrant model
  4590 ;;
  4591                           
  4592                           
  4593                           ;psect for function _MFRC522_Reset
  4594  0EFC                     _MFRC522_Reset:	
  4595                           
  4596                           ;rc522.c: 71: WriteRegister( 0x01, 0x0F );
  4597                           
  4598                           ;incstack = 0
  4599                           ; Regs used in _MFRC522_Reset: [wreg+status,2+status,0+pclath+cstack]
  4600  0EFC  300F               	movlw	15
  4601  0EFD  00F8               	movwf	??_MFRC522_Reset
  4602  0EFE  0878               	movf	??_MFRC522_Reset,w
  4603  0EFF  00F6               	movwf	WriteRegister@val
  4604  0F00  3001               	movlw	1
  4605  0F01  318F  2759         	fcall	_WriteRegister
  4606  0F03  0008               	return
  4607  0F04                     __end_of_MFRC522_Reset:	
  4608                           
  4609                           	psect	text16
  4610  0F15                     __ptext16:	
  4611 ;; *************** function _MFRC522_AntennaOn *****************
  4612 ;; Defined at:
  4613 ;;		line 74 in file "rc522.c"
  4614 ;; Parameters:    Size  Location     Type
  4615 ;;		None
  4616 ;; Auto vars:     Size  Location     Type
  4617 ;;		None
  4618 ;; Return value:  Size  Location     Type
  4619 ;;                  1    wreg      void 
  4620 ;; Registers used:
  4621 ;;		wreg, status,2, status,0, pclath, cstack
  4622 ;; Tracked objects:
  4623 ;;		On entry : 0/0
  4624 ;;		On exit  : 0/0
  4625 ;;		Unchanged: 0/0
  4626 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4627 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4628 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4629 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4630 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4631 ;;Total ram usage:        1 bytes
  4632 ;; Hardware stack levels used:    1
  4633 ;; Hardware stack levels required when called:    4
  4634 ;; This function calls:
  4635 ;;		_MFRC522_Set_Bit
  4636 ;; This function is called by:
  4637 ;;		_MFRC522_Init
  4638 ;; This function uses a non-reentrant model
  4639 ;;
  4640                           
  4641                           
  4642                           ;psect for function _MFRC522_AntennaOn
  4643  0F15                     _MFRC522_AntennaOn:	
  4644                           
  4645                           ;rc522.c: 76: MFRC522_Set_Bit( 0x14, 0x03 );
  4646                           
  4647                           ;incstack = 0
  4648                           ; Regs used in _MFRC522_AntennaOn: [wreg+status,2+status,0+pclath+cstack]
  4649  0F15  3003               	movlw	3
  4650  0F16  0020               	movlb	0	; select bank0
  4651  0F17  00A1               	movwf	??_MFRC522_AntennaOn
  4652  0F18  0821               	movf	??_MFRC522_AntennaOn,w
  4653  0F19  00F8               	movwf	MFRC522_Set_Bit@mask
  4654  0F1A  3014               	movlw	20
  4655  0F1B  318F  2767         	fcall	_MFRC522_Set_Bit
  4656  0F1D  0008               	return
  4657  0F1E                     __end_of_MFRC522_AntennaOn:	
  4658                           
  4659                           	psect	text17
  4660  06E1                     __ptext17:	
  4661 ;; *************** function _MFRC522_Halt *****************
  4662 ;; Defined at:
  4663 ;;		line 425 in file "rc522.c"
  4664 ;; Parameters:    Size  Location     Type
  4665 ;;		None
  4666 ;; Auto vars:     Size  Location     Type
  4667 ;;  buff            4   26[BANK0 ] unsigned char [4]
  4668 ;;  unLen           2   30[BANK0 ] unsigned int 
  4669 ;; Return value:  Size  Location     Type
  4670 ;;                  1    wreg      void 
  4671 ;; Registers used:
  4672 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4673 ;; Tracked objects:
  4674 ;;		On entry : 0/0
  4675 ;;		On exit  : 0/0
  4676 ;;		Unchanged: 0/0
  4677 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4678 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4679 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4680 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4681 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4682 ;;Total ram usage:       10 bytes
  4683 ;; Hardware stack levels used:    1
  4684 ;; Hardware stack levels required when called:    5
  4685 ;; This function calls:
  4686 ;;		_MFRC522_CRC
  4687 ;;		_MFRC522_Clear_Bit
  4688 ;;		_MFRC522_ToCard
  4689 ;; This function is called by:
  4690 ;;		_main
  4691 ;; This function uses a non-reentrant model
  4692 ;;
  4693                           
  4694                           
  4695                           ;psect for function _MFRC522_Halt
  4696  06E1                     _MFRC522_Halt:	
  4697                           
  4698                           ;rc522.c: 427: unsigned unLen;
  4699                           ;rc522.c: 428: char buff[4];
  4700                           ;rc522.c: 430: buff[0] = 0x50;
  4701                           
  4702                           ;incstack = 0
  4703                           ; Regs used in _MFRC522_Halt: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4704  06E1  3050               	movlw	80
  4705  06E2  0020               	movlb	0	; select bank0
  4706  06E3  00B6               	movwf	??_MFRC522_Halt
  4707  06E4  0836               	movf	??_MFRC522_Halt,w
  4708  06E5  00BA               	movwf	MFRC522_Halt@buff
  4709                           
  4710                           ;rc522.c: 431: buff[1] = 0;
  4711  06E6  01BB               	clrf	MFRC522_Halt@buff+1
  4712                           
  4713                           ;rc522.c: 432: MFRC522_CRC( buff, 2, &buff[2] );
  4714  06E7  3002               	movlw	2
  4715  06E8  00B6               	movwf	??_MFRC522_Halt
  4716  06E9  0836               	movf	??_MFRC522_Halt,w
  4717  06EA  00A2               	movwf	MFRC522_CRC@length
  4718  06EB  303C               	movlw	(low ((MFRC522_Halt@buff| 0+2)))& (0+255)
  4719  06EC  00B7               	movwf	??_MFRC522_Halt+1
  4720  06ED  0837               	movf	??_MFRC522_Halt+1,w
  4721  06EE  00A3               	movwf	MFRC522_CRC@dataOut
  4722  06EF  303A               	movlw	(low (MFRC522_Halt@buff| 0))& (0+255)
  4723  06F0  3184  24D2  3186   	fcall	_MFRC522_CRC
  4724                           
  4725                           ;rc522.c: 433: MFRC522_Clear_Bit( 0x08, 0x80 );
  4726  06F3  3080               	movlw	128
  4727  06F4  0020               	movlb	0	; select bank0
  4728  06F5  00B6               	movwf	??_MFRC522_Halt
  4729  06F6  0836               	movf	??_MFRC522_Halt,w
  4730  06F7  00F8               	movwf	MFRC522_Clear_Bit@mask
  4731  06F8  3008               	movlw	8
  4732  06F9  318F  2786  3186   	fcall	_MFRC522_Clear_Bit
  4733                           
  4734                           ;rc522.c: 434: MFRC522_ToCard( 0x0C, buff, 4, buff, &unLen );
  4735  06FC  303A               	movlw	(low (MFRC522_Halt@buff| 0))& (0+255)
  4736  06FD  0020               	movlb	0	; select bank0
  4737  06FE  00B6               	movwf	??_MFRC522_Halt
  4738  06FF  0836               	movf	??_MFRC522_Halt,w
  4739  0700  00A2               	movwf	MFRC522_ToCard@sendData
  4740  0701  3004               	movlw	4
  4741  0702  00B7               	movwf	??_MFRC522_Halt+1
  4742  0703  0837               	movf	??_MFRC522_Halt+1,w
  4743  0704  00A3               	movwf	MFRC522_ToCard@sendLen
  4744  0705  303A               	movlw	(low (MFRC522_Halt@buff| 0))& (0+255)
  4745  0706  00B8               	movwf	??_MFRC522_Halt+2
  4746  0707  0838               	movf	??_MFRC522_Halt+2,w
  4747  0708  00A4               	movwf	MFRC522_ToCard@backData
  4748  0709  303E               	movlw	(low (MFRC522_Halt@unLen| 0))& (0+255)
  4749  070A  00B9               	movwf	??_MFRC522_Halt+3
  4750  070B  0839               	movf	??_MFRC522_Halt+3,w
  4751  070C  00A5               	movwf	MFRC522_ToCard@backLen
  4752  070D  300C               	movlw	12
  4753  070E  3182  223D  3186   	fcall	_MFRC522_ToCard
  4754                           
  4755                           ;rc522.c: 435: MFRC522_Clear_Bit( 0x08, 0x08 );
  4756  0711  3008               	movlw	8
  4757  0712  0020               	movlb	0	; select bank0
  4758  0713  00B6               	movwf	??_MFRC522_Halt
  4759  0714  0836               	movf	??_MFRC522_Halt,w
  4760  0715  00F8               	movwf	MFRC522_Clear_Bit@mask
  4761  0716  3008               	movlw	8
  4762  0717  318F  2786         	fcall	_MFRC522_Clear_Bit
  4763  0719  0008               	return
  4764  071A                     __end_of_MFRC522_Halt:	
  4765                           
  4766                           	psect	text18
  4767  023D                     __ptext18:	
  4768 ;; *************** function _MFRC522_ToCard *****************
  4769 ;; Defined at:
  4770 ;;		line 131 in file "rc522.c"
  4771 ;; Parameters:    Size  Location     Type
  4772 ;;  command         1    wreg     unsigned char 
  4773 ;;  sendData        1    2[BANK0 ] PTR unsigned char 
  4774 ;;		 -> MFRC522_Write@buff(18), MFRC522_Auth@buff(12), MFRC522_Halt@buff(4), MFRC522_SelectTag@buffer(9), 
  4775 ;;		 -> main@UID(6), main@TagType(1), 
  4776 ;;  sendLen         1    3[BANK0 ] unsigned char 
  4777 ;;  backData        1    4[BANK0 ] PTR unsigned char 
  4778 ;;		 -> MFRC522_Write@buff(18), MFRC522_Auth@buff(12), MFRC522_Halt@buff(4), MFRC522_SelectTag@buffer(9), 
  4779 ;;		 -> main@UID(6), main@TagType(1), 
  4780 ;;  backLen         1    5[BANK0 ] PTR unsigned int 
  4781 ;;		 -> MFRC522_AntiColl@unLen(2), MFRC522_Read@unLen(2), MFRC522_Write@recvBits(2), MFRC522_Auth@recvBits(2), 
  4782 ;;		 -> MFRC522_Halt@unLen(2), MFRC522_SelectTag@recvBits(2), MFRC522_Request@backBits(2), 
  4783 ;; Auto vars:     Size  Location     Type
  4784 ;;  command         1   18[BANK0 ] unsigned char 
  4785 ;;  i               2   19[BANK0 ] unsigned int 
  4786 ;;  n               1   21[BANK0 ] unsigned char 
  4787 ;;  irqEn           1   17[BANK0 ] unsigned char 
  4788 ;;  lastBits        1   16[BANK0 ] unsigned char 
  4789 ;;  _status         1   15[BANK0 ] unsigned char 
  4790 ;;  waitIRq         1   14[BANK0 ] unsigned char 
  4791 ;; Return value:  Size  Location     Type
  4792 ;;                  1    wreg      unsigned char 
  4793 ;; Registers used:
  4794 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4795 ;; Tracked objects:
  4796 ;;		On entry : 0/0
  4797 ;;		On exit  : 0/0
  4798 ;;		Unchanged: 0/0
  4799 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4800 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4801 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4802 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4803 ;;      Totals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4804 ;;Total ram usage:       20 bytes
  4805 ;; Hardware stack levels used:    1
  4806 ;; Hardware stack levels required when called:    4
  4807 ;; This function calls:
  4808 ;;		_MFRC522_Clear_Bit
  4809 ;;		_MFRC522_Set_Bit
  4810 ;;		_ReadRegister
  4811 ;;		_WriteRegister
  4812 ;; This function is called by:
  4813 ;;		_MFRC522_Request
  4814 ;;		_MFRC522_SelectTag
  4815 ;;		_MFRC522_Halt
  4816 ;;		_MFRC522_AntiColl
  4817 ;;		_MFRC522_Auth
  4818 ;;		_MFRC522_Write
  4819 ;;		_MFRC522_Read
  4820 ;; This function uses a non-reentrant model
  4821 ;;
  4822                           
  4823                           
  4824                           ;psect for function _MFRC522_ToCard
  4825  023D                     _MFRC522_ToCard:	
  4826                           
  4827                           ;incstack = 0
  4828                           ; Regs used in _MFRC522_ToCard: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4829                           ;MFRC522_ToCard@command stored from wreg
  4830  023D  0020               	movlb	0	; select bank0
  4831  023E  00B2               	movwf	MFRC522_ToCard@command
  4832                           
  4833                           ;rc522.c: 133: char _status = 2;
  4834  023F  3002               	movlw	2
  4835  0240  00A6               	movwf	??_MFRC522_ToCard
  4836  0241  0826               	movf	??_MFRC522_ToCard,w
  4837  0242  00AF               	movwf	MFRC522_ToCard@_status
  4838                           
  4839                           ;rc522.c: 134: char irqEn = 0x00;
  4840  0243  01B1               	clrf	MFRC522_ToCard@irqEn
  4841                           
  4842                           ;rc522.c: 135: char waitIRq = 0x00;
  4843  0244  01AE               	clrf	MFRC522_ToCard@waitIRq
  4844                           
  4845                           ;rc522.c: 136: char lastBits;
  4846                           ;rc522.c: 137: char n;
  4847                           ;rc522.c: 138: unsigned int i;
  4848                           ;rc522.c: 147: switch (command)
  4849  0245  2A55               	goto	l2556
  4850  0246                     l2550:	
  4851                           ;rc522.c: 148: {
  4852                           ;rc522.c: 149: case 0x0E:
  4853                           
  4854                           
  4855                           ;rc522.c: 150: {
  4856                           ;rc522.c: 151: irqEn = 0x12;
  4857  0246  3012               	movlw	18
  4858  0247  00A6               	movwf	??_MFRC522_ToCard
  4859  0248  0826               	movf	??_MFRC522_ToCard,w
  4860  0249  00B1               	movwf	MFRC522_ToCard@irqEn
  4861                           
  4862                           ;rc522.c: 152: waitIRq = 0x10;
  4863  024A  3010               	movlw	16
  4864  024B  2A51               	goto	L1
  4865  024C                     l2552:	
  4866                           ;rc522.c: 154: }
  4867                           ;rc522.c: 155: case 0x0C:
  4868                           
  4869                           ;rc522.c: 153: break;
  4870                           
  4871                           
  4872                           ;rc522.c: 156: {
  4873                           ;rc522.c: 157: irqEn = 0x77;
  4874  024C  3077               	movlw	119
  4875  024D  00A6               	movwf	??_MFRC522_ToCard
  4876  024E  0826               	movf	??_MFRC522_ToCard,w
  4877  024F  00B1               	movwf	MFRC522_ToCard@irqEn
  4878                           
  4879                           ;rc522.c: 158: waitIRq = 0x30;
  4880  0250  3030               	movlw	48
  4881  0251                     L1:	
  4882  0251  00A6               	movwf	??_MFRC522_ToCard
  4883  0252  0826               	movf	??_MFRC522_ToCard,w
  4884  0253  00AE               	movwf	MFRC522_ToCard@waitIRq
  4885                           
  4886                           ;rc522.c: 163: }
  4887                           
  4888                           ;rc522.c: 162: break;
  4889                           
  4890                           ;rc522.c: 160: }
  4891                           ;rc522.c: 161: default:
  4892                           
  4893                           ;rc522.c: 159: break;
  4894  0254  2A5D               	goto	l2558
  4895  0255                     l2556:	
  4896  0255  0832               	movf	MFRC522_ToCard@command,w
  4897                           
  4898                           ; Switch size 1, requested type "space"
  4899                           ; Number of cases is 2, Range of values is 12 to 14
  4900                           ; switch strategies available:
  4901                           ; Name         Instructions Cycles
  4902                           ; simple_byte            7     4 (average)
  4903                           ; direct_byte           15     9 (fixed)
  4904                           ; jumptable            263     9 (fixed)
  4905                           ;	Chosen strategy is simple_byte
  4906  0256  3A0C               	xorlw	12	; case 12
  4907  0257  1903               	skipnz
  4908  0258  2A4C               	goto	l2552
  4909  0259  3A02               	xorlw	2	; case 14
  4910  025A  1903               	skipnz
  4911  025B  2A46               	goto	l2550
  4912  025C  2A5D               	goto	l2558
  4913  025D                     l2558:	
  4914                           
  4915                           ;rc522.c: 166: WriteRegister( 0x02, irqEn | 0x80 );
  4916  025D  0831               	movf	MFRC522_ToCard@irqEn,w
  4917  025E  3880               	iorlw	128
  4918  025F  00A6               	movwf	??_MFRC522_ToCard
  4919  0260  0826               	movf	??_MFRC522_ToCard,w
  4920  0261  00F6               	movwf	WriteRegister@val
  4921  0262  3002               	movlw	2
  4922  0263  318F  2759  3182   	fcall	_WriteRegister
  4923                           
  4924                           ;rc522.c: 167: MFRC522_Clear_Bit( 0x04, 0x80 );
  4925  0266  3080               	movlw	128
  4926  0267  0020               	movlb	0	; select bank0
  4927  0268  00A6               	movwf	??_MFRC522_ToCard
  4928  0269  0826               	movf	??_MFRC522_ToCard,w
  4929  026A  00F8               	movwf	MFRC522_Clear_Bit@mask
  4930  026B  3004               	movlw	4
  4931  026C  318F  2786  3182   	fcall	_MFRC522_Clear_Bit
  4932                           
  4933                           ;rc522.c: 168: MFRC522_Set_Bit( 0x0A, 0x80 );
  4934  026F  3080               	movlw	128
  4935  0270  0020               	movlb	0	; select bank0
  4936  0271  00A6               	movwf	??_MFRC522_ToCard
  4937  0272  0826               	movf	??_MFRC522_ToCard,w
  4938  0273  00F8               	movwf	MFRC522_Set_Bit@mask
  4939  0274  300A               	movlw	10
  4940  0275  318F  2767  3182   	fcall	_MFRC522_Set_Bit
  4941                           
  4942                           ;rc522.c: 169: WriteRegister( 0x01, 0x00 );
  4943  0278  01F6               	clrf	WriteRegister@val
  4944  0279  3001               	movlw	1
  4945  027A  318F  2759  3182   	fcall	_WriteRegister
  4946                           
  4947                           ;rc522.c: 172: for ( i=0; i < sendLen; i++ )
  4948  027D  0020               	movlb	0	; select bank0
  4949  027E  01B3               	clrf	MFRC522_ToCard@i
  4950  027F  01B4               	clrf	MFRC522_ToCard@i+1
  4951  0280                     l2566:	
  4952  0280  0823               	movf	MFRC522_ToCard@sendLen,w
  4953  0281  00A6               	movwf	??_MFRC522_ToCard
  4954  0282  01A7               	clrf	??_MFRC522_ToCard+1
  4955  0283  0827               	movf	??_MFRC522_ToCard+1,w
  4956  0284  0234               	subwf	MFRC522_ToCard@i+1,w
  4957  0285  1D03               	skipz
  4958  0286  2A89               	goto	u1585
  4959  0287  0826               	movf	??_MFRC522_ToCard,w
  4960  0288  0233               	subwf	MFRC522_ToCard@i,w
  4961  0289                     u1585:	
  4962  0289  1803               	btfsc	3,0
  4963  028A  2A9F               	goto	l2568
  4964                           
  4965                           ;rc522.c: 173: {
  4966                           ;rc522.c: 174: WriteRegister( 0x09, sendData[i] );
  4967  028B  0833               	movf	MFRC522_ToCard@i,w
  4968  028C  0722               	addwf	MFRC522_ToCard@sendData,w
  4969  028D  00A6               	movwf	??_MFRC522_ToCard
  4970  028E  0826               	movf	??_MFRC522_ToCard,w
  4971  028F  0086               	movwf	6
  4972  0290  0187               	clrf	7
  4973  0291  0801               	movf	1,w
  4974  0292  00A7               	movwf	??_MFRC522_ToCard+1
  4975  0293  0827               	movf	??_MFRC522_ToCard+1,w
  4976  0294  00F6               	movwf	WriteRegister@val
  4977  0295  3009               	movlw	9
  4978  0296  318F  2759  3182   	fcall	_WriteRegister
  4979  0299  3001               	movlw	1
  4980  029A  0020               	movlb	0	; select bank0
  4981  029B  07B3               	addwf	MFRC522_ToCard@i,f
  4982  029C  3000               	movlw	0
  4983  029D  3DB4               	addwfc	MFRC522_ToCard@i+1,f
  4984  029E  2A80               	goto	l2566
  4985  029F                     l2568:	
  4986                           
  4987                           ;rc522.c: 175: }
  4988                           ;rc522.c: 177: WriteRegister( 0x01, command );
  4989  029F  0832               	movf	MFRC522_ToCard@command,w
  4990  02A0  00A6               	movwf	??_MFRC522_ToCard
  4991  02A1  0826               	movf	??_MFRC522_ToCard,w
  4992  02A2  00F6               	movwf	WriteRegister@val
  4993  02A3  3001               	movlw	1
  4994  02A4  318F  2759  3182   	fcall	_WriteRegister
  4995                           
  4996                           ;rc522.c: 178: if (command == 0x0C )
  4997  02A7  300C               	movlw	12
  4998  02A8  0020               	movlb	0	; select bank0
  4999  02A9  0632               	xorwf	MFRC522_ToCard@command,w
  5000  02AA  1D03               	btfss	3,2
  5001  02AB  2AB4               	goto	l2574
  5002                           
  5003                           ;rc522.c: 179: {
  5004                           ;rc522.c: 180: MFRC522_Set_Bit( 0x0D, 0x80 );
  5005  02AC  3080               	movlw	128
  5006  02AD  00A6               	movwf	??_MFRC522_ToCard
  5007  02AE  0826               	movf	??_MFRC522_ToCard,w
  5008  02AF  00F8               	movwf	MFRC522_Set_Bit@mask
  5009  02B0  300D               	movlw	13
  5010  02B1  318F  2767  3182   	fcall	_MFRC522_Set_Bit
  5011  02B4                     l2574:	
  5012                           
  5013                           ;rc522.c: 181: }
  5014                           ;rc522.c: 185: i = 2000;
  5015  02B4  30D0               	movlw	208
  5016  02B5  0020               	movlb	0	; select bank0
  5017  02B6  00B3               	movwf	MFRC522_ToCard@i
  5018  02B7  3007               	movlw	7
  5019  02B8  00B4               	movwf	MFRC522_ToCard@i+1
  5020  02B9                     l2576:	
  5021                           ;rc522.c: 186: do
  5022                           
  5023                           
  5024                           ;rc522.c: 187: {
  5025                           ;rc522.c: 190: n = ReadRegister( 0x04 );
  5026  02B9  3004               	movlw	4
  5027  02BA  318F  27A8  3182   	fcall	_ReadRegister
  5028  02BD  0020               	movlb	0	; select bank0
  5029  02BE  00A6               	movwf	??_MFRC522_ToCard
  5030  02BF  0826               	movf	??_MFRC522_ToCard,w
  5031  02C0  00B5               	movwf	MFRC522_ToCard@n
  5032                           
  5033                           ;rc522.c: 191: i--;
  5034  02C1  3001               	movlw	1
  5035  02C2  02B3               	subwf	MFRC522_ToCard@i,f
  5036  02C3  3000               	movlw	0
  5037  02C4  3BB4               	subwfb	MFRC522_ToCard@i+1,f
  5038                           
  5039                           ;rc522.c: 192: } while ((i!=0) && !(n&0x01) && !(n&waitIRq));
  5040  02C5  0833               	movf	MFRC522_ToCard@i,w
  5041  02C6  0434               	iorwf	MFRC522_ToCard@i+1,w
  5042  02C7  1D03               	btfss	3,2
  5043  02C8  1835               	btfsc	MFRC522_ToCard@n,0
  5044  02C9  2ACE               	goto	l2584
  5045  02CA  0835               	movf	MFRC522_ToCard@n,w
  5046  02CB  052E               	andwf	MFRC522_ToCard@waitIRq,w
  5047  02CC  1903               	btfsc	3,2
  5048  02CD  2AB9               	goto	l2576
  5049  02CE                     l2584:	
  5050                           
  5051                           ;rc522.c: 195: MFRC522_Clear_Bit( 0x0D, 0x80 );
  5052  02CE  3080               	movlw	128
  5053  02CF  00A6               	movwf	??_MFRC522_ToCard
  5054  02D0  0826               	movf	??_MFRC522_ToCard,w
  5055  02D1  00F8               	movwf	MFRC522_Clear_Bit@mask
  5056  02D2  300D               	movlw	13
  5057  02D3  318F  2786  3182   	fcall	_MFRC522_Clear_Bit
  5058                           
  5059                           ;rc522.c: 196: if (i != 0)
  5060  02D6  0020               	movlb	0	; select bank0
  5061  02D7  0833               	movf	MFRC522_ToCard@i,w
  5062  02D8  0434               	iorwf	MFRC522_ToCard@i+1,w
  5063  02D9  1903               	btfsc	3,2
  5064  02DA  2B65               	goto	l204
  5065                           
  5066                           ;rc522.c: 197: {
  5067                           ;rc522.c: 198: if( !( ReadRegister( 0x06 ) & 0x1B ) )
  5068  02DB  3006               	movlw	6
  5069  02DC  318F  27A8  3182   	fcall	_ReadRegister
  5070  02DF  391B               	andlw	27
  5071  02E0  1D03               	btfss	3,2
  5072  02E1  2B60               	goto	l2622
  5073                           
  5074                           ;rc522.c: 199: {
  5075                           ;rc522.c: 200: _status = 0;
  5076  02E2  0020               	movlb	0	; select bank0
  5077  02E3  01AF               	clrf	MFRC522_ToCard@_status
  5078                           
  5079                           ;rc522.c: 201: if ( n & irqEn & 0x01 )
  5080  02E4  0831               	movf	MFRC522_ToCard@irqEn,w
  5081  02E5  0535               	andwf	MFRC522_ToCard@n,w
  5082  02E6  00A6               	movwf	??_MFRC522_ToCard
  5083  02E7  1C26               	btfss	??_MFRC522_ToCard,0
  5084  02E8  2AEB               	goto	l2596
  5085                           
  5086                           ;rc522.c: 202: {
  5087                           ;rc522.c: 203: _status = 1;
  5088  02E9  01AF               	clrf	MFRC522_ToCard@_status
  5089  02EA  0AAF               	incf	MFRC522_ToCard@_status,f
  5090  02EB                     l2596:	
  5091                           
  5092                           ;rc522.c: 204: }
  5093                           ;rc522.c: 205: if ( command == 0x0C )
  5094  02EB  300C               	movlw	12
  5095  02EC  0632               	xorwf	MFRC522_ToCard@command,w
  5096  02ED  1D03               	btfss	3,2
  5097  02EE  2B65               	goto	l204
  5098                           
  5099                           ;rc522.c: 206: {
  5100                           ;rc522.c: 207: n = ReadRegister( 0x0A );
  5101  02EF  300A               	movlw	10
  5102  02F0  318F  27A8  3182   	fcall	_ReadRegister
  5103  02F3  0020               	movlb	0	; select bank0
  5104  02F4  00A6               	movwf	??_MFRC522_ToCard
  5105  02F5  0826               	movf	??_MFRC522_ToCard,w
  5106  02F6  00B5               	movwf	MFRC522_ToCard@n
  5107                           
  5108                           ;rc522.c: 208: lastBits = ReadRegister( 0x0C ) & 0x07;
  5109  02F7  300C               	movlw	12
  5110  02F8  318F  27A8  3182   	fcall	_ReadRegister
  5111  02FB  3907               	andlw	7
  5112  02FC  0020               	movlb	0	; select bank0
  5113  02FD  00A6               	movwf	??_MFRC522_ToCard
  5114  02FE  0826               	movf	??_MFRC522_ToCard,w
  5115  02FF  00B0               	movwf	MFRC522_ToCard@lastBits
  5116                           
  5117                           ;rc522.c: 209: if (lastBits)
  5118  0300  0830               	movf	MFRC522_ToCard@lastBits,w
  5119  0301  1903               	btfsc	3,2
  5120  0302  2B23               	goto	l2604
  5121                           
  5122                           ;rc522.c: 210: {
  5123                           ;rc522.c: 211: *backLen = (n-1) * 8 + lastBits;
  5124  0303  0830               	movf	MFRC522_ToCard@lastBits,w
  5125  0304  00A6               	movwf	??_MFRC522_ToCard
  5126  0305  01A7               	clrf	??_MFRC522_ToCard+1
  5127  0306  0835               	movf	MFRC522_ToCard@n,w
  5128  0307  00A8               	movwf	??_MFRC522_ToCard+2
  5129  0308  01A9               	clrf	??_MFRC522_ToCard+3
  5130  0309  35A8               	lslf	??_MFRC522_ToCard+2,f
  5131  030A  0DA9               	rlf	??_MFRC522_ToCard+3,f
  5132  030B  35A8               	lslf	??_MFRC522_ToCard+2,f
  5133  030C  0DA9               	rlf	??_MFRC522_ToCard+3,f
  5134  030D  35A8               	lslf	??_MFRC522_ToCard+2,f
  5135  030E  0DA9               	rlf	??_MFRC522_ToCard+3,f
  5136  030F  0826               	movf	??_MFRC522_ToCard,w
  5137  0310  0728               	addwf	??_MFRC522_ToCard+2,w
  5138  0311  00AA               	movwf	??_MFRC522_ToCard+4
  5139  0312  0827               	movf	??_MFRC522_ToCard+1,w
  5140  0313  3D29               	addwfc	??_MFRC522_ToCard+3,w
  5141  0314  00AB               	movwf	??_MFRC522_ToCard+5
  5142  0315  082A               	movf	??_MFRC522_ToCard+4,w
  5143  0316  3EF8               	addlw	248
  5144  0317  00AC               	movwf	??_MFRC522_ToCard+6
  5145  0318  30FF               	movlw	255
  5146  0319  3D2B               	addwfc	??_MFRC522_ToCard+5,w
  5147  031A  00AD               	movwf	??_MFRC522_ToCard+7
  5148  031B  0825               	movf	MFRC522_ToCard@backLen,w
  5149  031C  0086               	movwf	6
  5150  031D  0187               	clrf	7
  5151  031E  082C               	movf	??_MFRC522_ToCard+6,w
  5152  031F  3FC0               	movwi [0]fsr1
  5153  0320  082D               	movf	??_MFRC522_ToCard+7,w
  5154  0321  3FC1               	movwi [1]fsr1
  5155                           
  5156                           ;rc522.c: 212: }
  5157  0322  2B33               	goto	l2606
  5158  0323                     l2604:	
  5159                           
  5160                           ;rc522.c: 213: else
  5161                           ;rc522.c: 214: {
  5162                           ;rc522.c: 215: *backLen = n * 8;
  5163  0323  0835               	movf	MFRC522_ToCard@n,w
  5164  0324  00A6               	movwf	??_MFRC522_ToCard
  5165  0325  01A7               	clrf	??_MFRC522_ToCard+1
  5166  0326  35A6               	lslf	??_MFRC522_ToCard,f
  5167  0327  0DA7               	rlf	??_MFRC522_ToCard+1,f
  5168  0328  35A6               	lslf	??_MFRC522_ToCard,f
  5169  0329  0DA7               	rlf	??_MFRC522_ToCard+1,f
  5170  032A  35A6               	lslf	??_MFRC522_ToCard,f
  5171  032B  0DA7               	rlf	??_MFRC522_ToCard+1,f
  5172  032C  0825               	movf	MFRC522_ToCard@backLen,w
  5173  032D  0086               	movwf	6
  5174  032E  0187               	clrf	7
  5175  032F  0826               	movf	??_MFRC522_ToCard,w
  5176  0330  3FC0               	movwi [0]fsr1
  5177  0331  0827               	movf	??_MFRC522_ToCard+1,w
  5178  0332  3FC1               	movwi [1]fsr1
  5179  0333                     l2606:	
  5180                           
  5181                           ;rc522.c: 216: }
  5182                           ;rc522.c: 217: if (n == 0)
  5183  0333  0835               	movf	MFRC522_ToCard@n,w
  5184  0334  1D03               	btfss	3,2
  5185  0335  2B38               	goto	l2610
  5186                           
  5187                           ;rc522.c: 218: {
  5188                           ;rc522.c: 219: n = 1;
  5189  0336  01B5               	clrf	MFRC522_ToCard@n
  5190  0337  0AB5               	incf	MFRC522_ToCard@n,f
  5191  0338                     l2610:	
  5192                           
  5193                           ;rc522.c: 220: }
  5194                           ;rc522.c: 221: if (n > 16)
  5195  0338  3011               	movlw	17
  5196  0339  0235               	subwf	MFRC522_ToCard@n,w
  5197  033A  1C03               	skipc
  5198  033B  2B40               	goto	l2614
  5199                           
  5200                           ;rc522.c: 222: {
  5201                           ;rc522.c: 223: n = 16;
  5202  033C  3010               	movlw	16
  5203  033D  00A6               	movwf	??_MFRC522_ToCard
  5204  033E  0826               	movf	??_MFRC522_ToCard,w
  5205  033F  00B5               	movwf	MFRC522_ToCard@n
  5206  0340                     l2614:	
  5207                           
  5208                           ;rc522.c: 224: }
  5209                           ;rc522.c: 226: for (i=0; i < n; i++)
  5210  0340  01B3               	clrf	MFRC522_ToCard@i
  5211  0341  01B4               	clrf	MFRC522_ToCard@i+1
  5212  0342                     l2620:	
  5213  0342  0835               	movf	MFRC522_ToCard@n,w
  5214  0343  00A6               	movwf	??_MFRC522_ToCard
  5215  0344  01A7               	clrf	??_MFRC522_ToCard+1
  5216  0345  0827               	movf	??_MFRC522_ToCard+1,w
  5217  0346  0234               	subwf	MFRC522_ToCard@i+1,w
  5218  0347  1D03               	skipz
  5219  0348  2B4B               	goto	u1705
  5220  0349  0826               	movf	??_MFRC522_ToCard,w
  5221  034A  0233               	subwf	MFRC522_ToCard@i,w
  5222  034B                     u1705:	
  5223  034B  1803               	btfsc	3,0
  5224  034C  2B65               	goto	l204
  5225                           
  5226                           ;rc522.c: 227: {
  5227                           ;rc522.c: 228: backData[i] = ReadRegister( 0x09 );
  5228  034D  3009               	movlw	9
  5229  034E  318F  27A8  3182   	fcall	_ReadRegister
  5230  0351  0020               	movlb	0	; select bank0
  5231  0352  00A6               	movwf	??_MFRC522_ToCard
  5232  0353  0833               	movf	MFRC522_ToCard@i,w
  5233  0354  0724               	addwf	MFRC522_ToCard@backData,w
  5234  0355  00A7               	movwf	??_MFRC522_ToCard+1
  5235  0356  0827               	movf	??_MFRC522_ToCard+1,w
  5236  0357  0086               	movwf	6
  5237  0358  0187               	clrf	7
  5238  0359  0826               	movf	??_MFRC522_ToCard,w
  5239  035A  0081               	movwf	1
  5240  035B  3001               	movlw	1
  5241  035C  07B3               	addwf	MFRC522_ToCard@i,f
  5242  035D  3000               	movlw	0
  5243  035E  3DB4               	addwfc	MFRC522_ToCard@i+1,f
  5244  035F  2B42               	goto	l2620
  5245  0360                     l2622:	
  5246                           ;rc522.c: 229: }
  5247                           ;rc522.c: 232: }
  5248                           ;rc522.c: 233: }
  5249                           
  5250                           
  5251                           ;rc522.c: 234: else
  5252                           ;rc522.c: 235: {
  5253                           ;rc522.c: 236: _status = 2;
  5254  0360  3002               	movlw	2
  5255  0361  0020               	movlb	0	; select bank0
  5256  0362  00A6               	movwf	??_MFRC522_ToCard
  5257  0363  0826               	movf	??_MFRC522_ToCard,w
  5258  0364  00AF               	movwf	MFRC522_ToCard@_status
  5259  0365                     l204:	
  5260                           
  5261                           ;rc522.c: 237: }
  5262                           ;rc522.c: 238: }
  5263                           ;rc522.c: 241: return _status;
  5264  0365  082F               	movf	MFRC522_ToCard@_status,w
  5265  0366  0008               	return
  5266  0367                     __end_of_MFRC522_ToCard:	
  5267                           
  5268                           	psect	text19
  5269  04D2                     __ptext19:	
  5270 ;; *************** function _MFRC522_CRC *****************
  5271 ;; Defined at:
  5272 ;;		line 361 in file "rc522.c"
  5273 ;; Parameters:    Size  Location     Type
  5274 ;;  dataIn          1    wreg     PTR unsigned char 
  5275 ;;		 -> MFRC522_Write@buff(18), MFRC522_Halt@buff(4), MFRC522_SelectTag@buffer(9), 
  5276 ;;  length          1    2[BANK0 ] unsigned char 
  5277 ;;  dataOut         1    3[BANK0 ] PTR unsigned char 
  5278 ;;		 -> MFRC522_Write@buff(18), MFRC522_Halt@buff(4), MFRC522_SelectTag@buffer(9), 
  5279 ;; Auto vars:     Size  Location     Type
  5280 ;;  dataIn          1    6[BANK0 ] PTR unsigned char 
  5281 ;;		 -> MFRC522_Write@buff(18), MFRC522_Halt@buff(4), MFRC522_SelectTag@buffer(9), 
  5282 ;;  i               1    7[BANK0 ] unsigned char 
  5283 ;;  n               1    5[BANK0 ] unsigned char 
  5284 ;; Return value:  Size  Location     Type
  5285 ;;                  1    wreg      void 
  5286 ;; Registers used:
  5287 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5288 ;; Tracked objects:
  5289 ;;		On entry : 0/0
  5290 ;;		On exit  : 0/0
  5291 ;;		Unchanged: 0/0
  5292 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5293 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5294 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5295 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5296 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5297 ;;Total ram usage:        6 bytes
  5298 ;; Hardware stack levels used:    1
  5299 ;; Hardware stack levels required when called:    4
  5300 ;; This function calls:
  5301 ;;		_MFRC522_Clear_Bit
  5302 ;;		_MFRC522_Set_Bit
  5303 ;;		_ReadRegister
  5304 ;;		_WriteRegister
  5305 ;; This function is called by:
  5306 ;;		_MFRC522_SelectTag
  5307 ;;		_MFRC522_Halt
  5308 ;;		_MFRC522_Write
  5309 ;;		_MFRC522_Read
  5310 ;; This function uses a non-reentrant model
  5311 ;;
  5312                           
  5313                           
  5314                           ;psect for function _MFRC522_CRC
  5315  04D2                     _MFRC522_CRC:	
  5316                           
  5317                           ;incstack = 0
  5318                           ; Regs used in _MFRC522_CRC: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5319                           ;MFRC522_CRC@dataIn stored from wreg
  5320  04D2  0020               	movlb	0	; select bank0
  5321  04D3  00A6               	movwf	MFRC522_CRC@dataIn
  5322                           
  5323                           ;rc522.c: 363: char i, n;
  5324                           ;rc522.c: 364: MFRC522_Clear_Bit( 0x05, 0x04 );
  5325  04D4  3004               	movlw	4
  5326  04D5  00A4               	movwf	??_MFRC522_CRC
  5327  04D6  0824               	movf	??_MFRC522_CRC,w
  5328  04D7  00F8               	movwf	MFRC522_Clear_Bit@mask
  5329  04D8  3005               	movlw	5
  5330  04D9  318F  2786  3184   	fcall	_MFRC522_Clear_Bit
  5331                           
  5332                           ;rc522.c: 365: MFRC522_Set_Bit( 0x0A, 0x80 );
  5333  04DC  3080               	movlw	128
  5334  04DD  0020               	movlb	0	; select bank0
  5335  04DE  00A4               	movwf	??_MFRC522_CRC
  5336  04DF  0824               	movf	??_MFRC522_CRC,w
  5337  04E0  00F8               	movwf	MFRC522_Set_Bit@mask
  5338  04E1  300A               	movlw	10
  5339  04E2  318F  2767  3184   	fcall	_MFRC522_Set_Bit
  5340                           
  5341                           ;rc522.c: 368: for ( i = 0; i < length; i++ )
  5342  04E5  0020               	movlb	0	; select bank0
  5343  04E6  01A7               	clrf	MFRC522_CRC@i
  5344  04E7                     l2660:	
  5345  04E7  0822               	movf	MFRC522_CRC@length,w
  5346  04E8  0227               	subwf	MFRC522_CRC@i,w
  5347  04E9  1803               	btfsc	3,0
  5348  04EA  2D00               	goto	l2662
  5349                           
  5350                           ;rc522.c: 369: {
  5351                           ;rc522.c: 370: WriteRegister( 0x09, *dataIn++ );
  5352  04EB  0826               	movf	MFRC522_CRC@dataIn,w
  5353  04EC  0086               	movwf	6
  5354  04ED  0187               	clrf	7
  5355  04EE  0801               	movf	1,w
  5356  04EF  00A4               	movwf	??_MFRC522_CRC
  5357  04F0  0824               	movf	??_MFRC522_CRC,w
  5358  04F1  00F6               	movwf	WriteRegister@val
  5359  04F2  3009               	movlw	9
  5360  04F3  318F  2759  3184   	fcall	_WriteRegister
  5361  04F6  3001               	movlw	1
  5362  04F7  0020               	movlb	0	; select bank0
  5363  04F8  00A4               	movwf	??_MFRC522_CRC
  5364  04F9  0824               	movf	??_MFRC522_CRC,w
  5365  04FA  07A6               	addwf	MFRC522_CRC@dataIn,f
  5366  04FB  3001               	movlw	1
  5367  04FC  00A4               	movwf	??_MFRC522_CRC
  5368  04FD  0824               	movf	??_MFRC522_CRC,w
  5369  04FE  07A7               	addwf	MFRC522_CRC@i,f
  5370  04FF  2CE7               	goto	l2660
  5371  0500                     l2662:	
  5372                           
  5373                           ;rc522.c: 371: }
  5374                           ;rc522.c: 373: WriteRegister( 0x01, 0x03 );
  5375  0500  3003               	movlw	3
  5376  0501  00A4               	movwf	??_MFRC522_CRC
  5377  0502  0824               	movf	??_MFRC522_CRC,w
  5378  0503  00F6               	movwf	WriteRegister@val
  5379  0504  3001               	movlw	1
  5380  0505  318F  2759  3184   	fcall	_WriteRegister
  5381                           
  5382                           ;rc522.c: 375: i = 0xFF;
  5383  0508  30FF               	movlw	255
  5384  0509  0020               	movlb	0	; select bank0
  5385  050A  00A4               	movwf	??_MFRC522_CRC
  5386  050B  0824               	movf	??_MFRC522_CRC,w
  5387  050C  00A7               	movwf	MFRC522_CRC@i
  5388  050D                     l2666:	
  5389                           ;rc522.c: 377: do
  5390                           
  5391                           
  5392                           ;rc522.c: 378: {
  5393                           ;rc522.c: 379: n = ReadRegister( 0x05 );
  5394  050D  3005               	movlw	5
  5395  050E  318F  27A8  3184   	fcall	_ReadRegister
  5396  0511  0020               	movlb	0	; select bank0
  5397  0512  00A4               	movwf	??_MFRC522_CRC
  5398  0513  0824               	movf	??_MFRC522_CRC,w
  5399  0514  00A5               	movwf	MFRC522_CRC@n
  5400                           
  5401                           ;rc522.c: 380: i--;
  5402  0515  3001               	movlw	1
  5403  0516  02A7               	subwf	MFRC522_CRC@i,f
  5404                           
  5405                           ;rc522.c: 381: }
  5406                           ;rc522.c: 382: while( i && !(n & 0x04) );
  5407  0517  0827               	movf	MFRC522_CRC@i,w
  5408  0518  1903               	btfsc	3,2
  5409  0519  2D1C               	goto	l2674
  5410  051A  1D25               	btfss	MFRC522_CRC@n,2
  5411  051B  2D0D               	goto	l2666
  5412  051C                     l2674:	
  5413                           
  5414                           ;rc522.c: 384: dataOut[0] = ReadRegister( 0x22 );
  5415  051C  3022               	movlw	34
  5416  051D  318F  27A8  3184   	fcall	_ReadRegister
  5417  0520  0020               	movlb	0	; select bank0
  5418  0521  00A4               	movwf	??_MFRC522_CRC
  5419  0522  0823               	movf	MFRC522_CRC@dataOut,w
  5420  0523  0086               	movwf	6
  5421  0524  0187               	clrf	7
  5422  0525  0824               	movf	??_MFRC522_CRC,w
  5423  0526  0081               	movwf	1
  5424                           
  5425                           ;rc522.c: 385: dataOut[1] = ReadRegister( 0x21 );
  5426  0527  3021               	movlw	33
  5427  0528  318F  27A8         	fcall	_ReadRegister
  5428  052A  0020               	movlb	0	; select bank0
  5429  052B  00A4               	movwf	??_MFRC522_CRC
  5430  052C  0A23               	incf	MFRC522_CRC@dataOut,w
  5431  052D  0086               	movwf	6
  5432  052E  0187               	clrf	7
  5433  052F  0824               	movf	??_MFRC522_CRC,w
  5434  0530  0081               	movwf	1
  5435  0531  0008               	return
  5436  0532                     __end_of_MFRC522_CRC:	
  5437                           
  5438                           	psect	text20
  5439  0F67                     __ptext20:	
  5440 ;; *************** function _MFRC522_Set_Bit *****************
  5441 ;; Defined at:
  5442 ;;		line 65 in file "rc522.c"
  5443 ;; Parameters:    Size  Location     Type
  5444 ;;  addr            1    wreg     unsigned char 
  5445 ;;  mask            1    8[COMMON] unsigned char 
  5446 ;; Auto vars:     Size  Location     Type
  5447 ;;  addr            1    0[BANK0 ] unsigned char 
  5448 ;; Return value:  Size  Location     Type
  5449 ;;                  1    wreg      void 
  5450 ;; Registers used:
  5451 ;;		wreg, status,2, status,0, pclath, cstack
  5452 ;; Tracked objects:
  5453 ;;		On entry : 0/0
  5454 ;;		On exit  : 0/0
  5455 ;;		Unchanged: 0/0
  5456 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5457 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5458 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5459 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5460 ;;      Totals:         2       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5461 ;;Total ram usage:        3 bytes
  5462 ;; Hardware stack levels used:    1
  5463 ;; Hardware stack levels required when called:    3
  5464 ;; This function calls:
  5465 ;;		_ReadRegister
  5466 ;;		_WriteRegister
  5467 ;; This function is called by:
  5468 ;;		_MFRC522_AntennaOn
  5469 ;;		_MFRC522_ToCard
  5470 ;;		_MFRC522_CRC
  5471 ;; This function uses a non-reentrant model
  5472 ;;
  5473                           
  5474                           
  5475                           ;psect for function _MFRC522_Set_Bit
  5476  0F67                     _MFRC522_Set_Bit:	
  5477                           
  5478                           ;incstack = 0
  5479                           ; Regs used in _MFRC522_Set_Bit: [wreg+status,2+status,0+pclath+cstack]
  5480                           ;MFRC522_Set_Bit@addr stored from wreg
  5481  0F67  0020               	movlb	0	; select bank0
  5482  0F68  00A0               	movwf	MFRC522_Set_Bit@addr
  5483                           
  5484                           ;rc522.c: 67: WriteRegister( addr, ReadRegister( addr ) | mask );
  5485  0F69  0820               	movf	MFRC522_Set_Bit@addr,w
  5486  0F6A  318F  27A8  318F   	fcall	_ReadRegister
  5487  0F6D  0478               	iorwf	MFRC522_Set_Bit@mask,w
  5488  0F6E  00F9               	movwf	??_MFRC522_Set_Bit
  5489  0F6F  0879               	movf	??_MFRC522_Set_Bit,w
  5490  0F70  00F6               	movwf	WriteRegister@val
  5491  0F71  0020               	movlb	0	; select bank0
  5492  0F72  0820               	movf	MFRC522_Set_Bit@addr,w
  5493  0F73  318F  2759         	fcall	_WriteRegister
  5494  0F75  0008               	return
  5495  0F76                     __end_of_MFRC522_Set_Bit:	
  5496                           
  5497                           	psect	text21
  5498  0F86                     __ptext21:	
  5499 ;; *************** function _MFRC522_Clear_Bit *****************
  5500 ;; Defined at:
  5501 ;;		line 61 in file "rc522.c"
  5502 ;; Parameters:    Size  Location     Type
  5503 ;;  addr            1    wreg     unsigned char 
  5504 ;;  mask            1    8[COMMON] unsigned char 
  5505 ;; Auto vars:     Size  Location     Type
  5506 ;;  addr            1    9[COMMON] unsigned char 
  5507 ;; Return value:  Size  Location     Type
  5508 ;;                  1    wreg      void 
  5509 ;; Registers used:
  5510 ;;		wreg, status,2, status,0, pclath, cstack
  5511 ;; Tracked objects:
  5512 ;;		On entry : 0/0
  5513 ;;		On exit  : 0/0
  5514 ;;		Unchanged: 0/0
  5515 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5516 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5517 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5518 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5519 ;;      Totals:         2       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5520 ;;Total ram usage:        4 bytes
  5521 ;; Hardware stack levels used:    1
  5522 ;; Hardware stack levels required when called:    3
  5523 ;; This function calls:
  5524 ;;		_ReadRegister
  5525 ;;		_WriteRegister
  5526 ;; This function is called by:
  5527 ;;		_MFRC522_ToCard
  5528 ;;		_MFRC522_CRC
  5529 ;;		_MFRC522_Halt
  5530 ;;		_MFRC522_AntiColl
  5531 ;;		_MFRC522_AntennaOff
  5532 ;; This function uses a non-reentrant model
  5533 ;;
  5534                           
  5535                           
  5536                           ;psect for function _MFRC522_Clear_Bit
  5537  0F86                     _MFRC522_Clear_Bit:	
  5538                           
  5539                           ;incstack = 0
  5540                           ; Regs used in _MFRC522_Clear_Bit: [wreg+status,2+status,0+pclath+cstack]
  5541                           ;MFRC522_Clear_Bit@addr stored from wreg
  5542  0F86  00F9               	movwf	MFRC522_Clear_Bit@addr
  5543                           
  5544                           ;rc522.c: 63: WriteRegister( addr, ReadRegister( addr ) & (~mask) );
  5545  0F87  0978               	comf	MFRC522_Clear_Bit@mask,w
  5546  0F88  0020               	movlb	0	; select bank0
  5547  0F89  00A0               	movwf	??_MFRC522_Clear_Bit
  5548  0F8A  0879               	movf	MFRC522_Clear_Bit@addr,w
  5549  0F8B  318F  27A8  318F   	fcall	_ReadRegister
  5550  0F8E  0020               	movlb	0	; select bank0
  5551  0F8F  0520               	andwf	??_MFRC522_Clear_Bit,w
  5552  0F90  00A1               	movwf	??_MFRC522_Clear_Bit+1
  5553  0F91  0821               	movf	??_MFRC522_Clear_Bit+1,w
  5554  0F92  00F6               	movwf	WriteRegister@val
  5555  0F93  0879               	movf	MFRC522_Clear_Bit@addr,w
  5556  0F94  318F  2759         	fcall	_WriteRegister
  5557  0F96  0008               	return
  5558  0F97                     __end_of_MFRC522_Clear_Bit:	
  5559                           
  5560                           	psect	text22
  5561  0F59                     __ptext22:	
  5562 ;; *************** function _WriteRegister *****************
  5563 ;; Defined at:
  5564 ;;		line 23 in file "rc522.c"
  5565 ;; Parameters:    Size  Location     Type
  5566 ;;  reg             1    wreg     unsigned char 
  5567 ;;  val             1    6[COMMON] unsigned char 
  5568 ;; Auto vars:     Size  Location     Type
  5569 ;;  reg             1    7[COMMON] unsigned char 
  5570 ;; Return value:  Size  Location     Type
  5571 ;;                  1    wreg      void 
  5572 ;; Registers used:
  5573 ;;		wreg, status,2, status,0, pclath, cstack
  5574 ;; Tracked objects:
  5575 ;;		On entry : 0/0
  5576 ;;		On exit  : 0/0
  5577 ;;		Unchanged: 0/0
  5578 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5579 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5580 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5581 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5582 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5583 ;;Total ram usage:        2 bytes
  5584 ;; Hardware stack levels used:    1
  5585 ;; Hardware stack levels required when called:    2
  5586 ;; This function calls:
  5587 ;;		_SPI_transfer
  5588 ;; This function is called by:
  5589 ;;		_main
  5590 ;;		_MFRC522_Clear_Bit
  5591 ;;		_MFRC522_Set_Bit
  5592 ;;		_MFRC522_Reset
  5593 ;;		_MFRC522_Init
  5594 ;;		_MFRC522_ToCard
  5595 ;;		_MFRC522_Request
  5596 ;;		_MFRC522_CRC
  5597 ;;		_MFRC522_AntiColl
  5598 ;; This function uses a non-reentrant model
  5599 ;;
  5600                           
  5601                           
  5602                           ;psect for function _WriteRegister
  5603  0F59                     _WriteRegister:	
  5604                           
  5605                           ;incstack = 0
  5606                           ; Regs used in _WriteRegister: [wreg+status,2+status,0+pclath+cstack]
  5607                           ;WriteRegister@reg stored from wreg
  5608  0F59  00F7               	movwf	WriteRegister@reg
  5609                           
  5610                           ;rc522.c: 25: LATAbits.LATA5 = 0;
  5611  0F5A  0022               	movlb	2	; select bank2
  5612  0F5B  128C               	bcf	12,5	;volatile
  5613                           
  5614                           ;rc522.c: 27: SPI_transfer(( reg << 1 ) & 0x7E);
  5615  0F5C  3577               	lslf	WriteRegister@reg,w
  5616  0F5D  397E               	andlw	126
  5617  0F5E  318E  26F4  318F   	fcall	_SPI_transfer
  5618                           
  5619                           ;rc522.c: 28: SPI_transfer(val);
  5620  0F61  0876               	movf	WriteRegister@val,w
  5621  0F62  318E  26F4         	fcall	_SPI_transfer
  5622                           
  5623                           ;rc522.c: 29: LATAbits.LATA5 = 1;
  5624  0F64  0022               	movlb	2	; select bank2
  5625  0F65  168C               	bsf	12,5	;volatile
  5626  0F66  0008               	return
  5627  0F67                     __end_of_WriteRegister:	
  5628                           
  5629                           	psect	text23
  5630  0FA8                     __ptext23:	
  5631 ;; *************** function _ReadRegister *****************
  5632 ;; Defined at:
  5633 ;;		line 44 in file "rc522.c"
  5634 ;; Parameters:    Size  Location     Type
  5635 ;;  reg             1    wreg     unsigned char 
  5636 ;; Auto vars:     Size  Location     Type
  5637 ;;  reg             1    4[COMMON] unsigned char 
  5638 ;;  val             1    5[COMMON] unsigned char 
  5639 ;; Return value:  Size  Location     Type
  5640 ;;                  1    wreg      unsigned char 
  5641 ;; Registers used:
  5642 ;;		wreg, status,2, status,0, pclath, cstack
  5643 ;; Tracked objects:
  5644 ;;		On entry : 0/0
  5645 ;;		On exit  : 0/0
  5646 ;;		Unchanged: 0/0
  5647 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5648 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5649 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5650 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5651 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5652 ;;Total ram usage:        3 bytes
  5653 ;; Hardware stack levels used:    1
  5654 ;; Hardware stack levels required when called:    2
  5655 ;; This function calls:
  5656 ;;		_SPI_transfer
  5657 ;; This function is called by:
  5658 ;;		_main
  5659 ;;		_MFRC522_Clear_Bit
  5660 ;;		_MFRC522_Set_Bit
  5661 ;;		_MFRC522_ToCard
  5662 ;;		_MFRC522_CRC
  5663 ;;		_MFRC522_Auth
  5664 ;; This function uses a non-reentrant model
  5665 ;;
  5666                           
  5667                           
  5668                           ;psect for function _ReadRegister
  5669  0FA8                     _ReadRegister:	
  5670                           
  5671                           ;incstack = 0
  5672                           ; Regs used in _ReadRegister: [wreg+status,2+status,0+pclath+cstack]
  5673                           ;ReadRegister@reg stored from wreg
  5674  0FA8  00F4               	movwf	ReadRegister@reg
  5675                           
  5676                           ;rc522.c: 47: uint8_t val;
  5677                           ;rc522.c: 49: LATAbits.LATA5 = 0;
  5678  0FA9  0022               	movlb	2	; select bank2
  5679  0FAA  128C               	bcf	12,5	;volatile
  5680                           
  5681                           ;rc522.c: 51: SPI_transfer((( reg << 1 ) & 0x7E) | 0x80);
  5682  0FAB  3574               	lslf	ReadRegister@reg,w
  5683  0FAC  397E               	andlw	126
  5684  0FAD  3880               	iorlw	128
  5685  0FAE  318E  26F4  318F   	fcall	_SPI_transfer
  5686                           
  5687                           ;rc522.c: 52: val=SPI_transfer(0x00);
  5688  0FB1  3000               	movlw	0
  5689  0FB2  318E  26F4         	fcall	_SPI_transfer
  5690  0FB4  00F3               	movwf	??_ReadRegister
  5691  0FB5  0873               	movf	??_ReadRegister,w
  5692  0FB6  00F5               	movwf	ReadRegister@val
  5693                           
  5694                           ;rc522.c: 55: LATAbits.LATA5 = 1;
  5695  0FB7  0022               	movlb	2	; select bank2
  5696  0FB8  168C               	bsf	12,5	;volatile
  5697                           
  5698                           ;rc522.c: 57: return val;
  5699  0FB9  0875               	movf	ReadRegister@val,w
  5700  0FBA  0008               	return
  5701  0FBB                     __end_of_ReadRegister:	
  5702                           
  5703                           	psect	text24
  5704  0FE6                     __ptext24:	
  5705 ;; *************** function _InitApp *****************
  5706 ;; Defined at:
  5707 ;;		line 20 in file "user.c"
  5708 ;; Parameters:    Size  Location     Type
  5709 ;;		None
  5710 ;; Auto vars:     Size  Location     Type
  5711 ;;		None
  5712 ;; Return value:  Size  Location     Type
  5713 ;;                  1    wreg      void 
  5714 ;; Registers used:
  5715 ;;		status,2
  5716 ;; Tracked objects:
  5717 ;;		On entry : 0/0
  5718 ;;		On exit  : 0/0
  5719 ;;		Unchanged: 0/0
  5720 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5721 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5722 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5723 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5724 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5725 ;;Total ram usage:        0 bytes
  5726 ;; Hardware stack levels used:    1
  5727 ;; Hardware stack levels required when called:    1
  5728 ;; This function calls:
  5729 ;;		Nothing
  5730 ;; This function is called by:
  5731 ;;		_main
  5732 ;; This function uses a non-reentrant model
  5733 ;;
  5734                           
  5735                           
  5736                           ;psect for function _InitApp
  5737  0FE6                     _InitApp:	
  5738                           
  5739                           ;user.c: 23: ANSELA = 0x00;
  5740                           
  5741                           ;incstack = 0
  5742                           ; Regs used in _InitApp: [status,2]
  5743  0FE6  0023               	movlb	3	; select bank3
  5744  0FE7  018C               	clrf	12	;volatile
  5745                           
  5746                           ;user.c: 24: ANSELB = 0x00;
  5747  0FE8  018D               	clrf	13	;volatile
  5748                           
  5749                           ;user.c: 25: ANSELC = 0x00;
  5750  0FE9  018E               	clrf	14	;volatile
  5751                           
  5752                           ;user.c: 40: TRISCbits.TRISC0 = 0;
  5753  0FEA  0021               	movlb	1	; select bank1
  5754  0FEB  100E               	bcf	14,0	;volatile
  5755                           
  5756                           ;user.c: 41: TRISCbits.TRISC1 = 0;
  5757  0FEC  108E               	bcf	14,1	;volatile
  5758                           
  5759                           ;user.c: 42: TRISCbits.TRISC2 = 0;
  5760  0FED  110E               	bcf	14,2	;volatile
  5761                           
  5762                           ;user.c: 43: TRISCbits.TRISC3 = 0;
  5763  0FEE  118E               	bcf	14,3	;volatile
  5764                           
  5765                           ;user.c: 44: TRISCbits.TRISC4 = 0;
  5766  0FEF  120E               	bcf	14,4	;volatile
  5767                           
  5768                           ;user.c: 45: TRISCbits.TRISC5 = 0;
  5769  0FF0  128E               	bcf	14,5	;volatile
  5770                           
  5771                           ;user.c: 46: TRISCbits.TRISC6 = 0;
  5772  0FF1  130E               	bcf	14,6	;volatile
  5773                           
  5774                           ;user.c: 47: TRISCbits.TRISC7 = 0;
  5775  0FF2  138E               	bcf	14,7	;volatile
  5776                           
  5777                           ;user.c: 49: TRISAbits.TRISA5 = 0;
  5778  0FF3  128C               	bcf	12,5	;volatile
  5779                           
  5780                           ;user.c: 50: TRISAbits.TRISA4 = 0;
  5781  0FF4  120C               	bcf	12,4	;volatile
  5782                           
  5783                           ;user.c: 52: TRISBbits.TRISB4 = 0;
  5784  0FF5  120D               	bcf	13,4	;volatile
  5785                           
  5786                           ;user.c: 53: TRISBbits.TRISB5 = 1;
  5787  0FF6  168D               	bsf	13,5	;volatile
  5788                           
  5789                           ;user.c: 54: TRISBbits.TRISB6 = 0;
  5790  0FF7  130D               	bcf	13,6	;volatile
  5791                           
  5792                           ;user.c: 55: TRISBbits.TRISB7 = 1;
  5793  0FF8  178D               	bsf	13,7	;volatile
  5794                           
  5795                           ;user.c: 58: IOCAPbits.IOCAP0 = 1;
  5796  0FF9  0027               	movlb	7	; select bank7
  5797  0FFA  1411               	bsf	17,0	;volatile
  5798                           
  5799                           ;user.c: 64: IOCANbits.IOCAN0 = 1;
  5800  0FFB  1412               	bsf	18,0	;volatile
  5801                           
  5802                           ;user.c: 67: INTCONbits.IOCIE = 1;
  5803  0FFC  158B               	bsf	11,3	;volatile
  5804                           
  5805                           ;user.c: 68: INTCONbits.PEIE = 1;
  5806  0FFD  170B               	bsf	11,6	;volatile
  5807                           
  5808                           ;user.c: 69: INTCONbits.GIE = 1;
  5809  0FFE  178B               	bsf	11,7	;volatile
  5810  0FFF  0008               	return
  5811  1000                     __end_of_InitApp:	
  5812                           
  5813                           	psect	text25
  5814  0F76                     __ptext25:	
  5815 ;; *************** function _FlushTXRX *****************
  5816 ;; Defined at:
  5817 ;;		line 20 in file "nRF24L01P.c"
  5818 ;; Parameters:    Size  Location     Type
  5819 ;;		None
  5820 ;; Auto vars:     Size  Location     Type
  5821 ;;		None
  5822 ;; Return value:  Size  Location     Type
  5823 ;;                  1    wreg      void 
  5824 ;; Registers used:
  5825 ;;		wreg, status,2, status,0, pclath, cstack
  5826 ;; Tracked objects:
  5827 ;;		On entry : 0/0
  5828 ;;		On exit  : 0/0
  5829 ;;		Unchanged: 0/0
  5830 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5831 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5832 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5833 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5834 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5835 ;;Total ram usage:        1 bytes
  5836 ;; Hardware stack levels used:    1
  5837 ;; Hardware stack levels required when called:    3
  5838 ;; This function calls:
  5839 ;;		_WriteCommand
  5840 ;;		_WriteRegisterRF
  5841 ;; This function is called by:
  5842 ;;		_main
  5843 ;; This function uses a non-reentrant model
  5844 ;;
  5845                           
  5846                           
  5847                           ;psect for function _FlushTXRX
  5848  0F76                     _FlushTXRX:	
  5849                           
  5850                           ;nRF24L01P.c: 22: WriteRegisterRF(0x07, 0x70);
  5851                           
  5852                           ;incstack = 0
  5853                           ; Regs used in _FlushTXRX: [wreg+status,2+status,0+pclath+cstack]
  5854  0F76  3070               	movlw	112
  5855  0F77  00F5               	movwf	??_FlushTXRX
  5856  0F78  0875               	movf	??_FlushTXRX,w
  5857  0F79  00F3               	movwf	WriteRegisterRF@val
  5858  0F7A  3007               	movlw	7
  5859  0F7B  318F  274B  318F   	fcall	_WriteRegisterRF
  5860                           
  5861                           ;nRF24L01P.c: 23: WriteCommand(0xE2);
  5862  0F7E  30E2               	movlw	226
  5863  0F7F  318F  270C  318F   	fcall	_WriteCommand
  5864                           
  5865                           ;nRF24L01P.c: 24: WriteCommand(0xE1);
  5866  0F82  30E1               	movlw	225
  5867  0F83  318F  270C         	fcall	_WriteCommand
  5868  0F85  0008               	return
  5869  0F86                     __end_of_FlushTXRX:	
  5870                           
  5871                           	psect	text26
  5872  0F4B                     __ptext26:	
  5873 ;; *************** function _WriteRegisterRF *****************
  5874 ;; Defined at:
  5875 ;;		line 28 in file "nRF24L01P.c"
  5876 ;; Parameters:    Size  Location     Type
  5877 ;;  reg             1    wreg     unsigned char 
  5878 ;;  val             1    3[COMMON] unsigned char 
  5879 ;; Auto vars:     Size  Location     Type
  5880 ;;  reg             1    4[COMMON] unsigned char 
  5881 ;; Return value:  Size  Location     Type
  5882 ;;                  1    wreg      void 
  5883 ;; Registers used:
  5884 ;;		wreg, status,2, status,0, pclath, cstack
  5885 ;; Tracked objects:
  5886 ;;		On entry : 0/0
  5887 ;;		On exit  : 0/0
  5888 ;;		Unchanged: 0/0
  5889 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5890 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5891 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5892 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5893 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5894 ;;Total ram usage:        2 bytes
  5895 ;; Hardware stack levels used:    1
  5896 ;; Hardware stack levels required when called:    2
  5897 ;; This function calls:
  5898 ;;		_SPI_transfer
  5899 ;; This function is called by:
  5900 ;;		_main
  5901 ;;		_FlushTXRX
  5902 ;;		_nRF_Setup_Write
  5903 ;;		_nRF_Setup_Read
  5904 ;; This function uses a non-reentrant model
  5905 ;;
  5906                           
  5907                           
  5908                           ;psect for function _WriteRegisterRF
  5909  0F4B                     _WriteRegisterRF:	
  5910                           
  5911                           ;incstack = 0
  5912                           ; Regs used in _WriteRegisterRF: [wreg+status,2+status,0+pclath+cstack]
  5913                           ;WriteRegisterRF@reg stored from wreg
  5914  0F4B  00F4               	movwf	WriteRegisterRF@reg
  5915                           
  5916                           ;nRF24L01P.c: 30: LATCbits.LATC6 = 0;
  5917  0F4C  0022               	movlb	2	; select bank2
  5918  0F4D  130E               	bcf	14,6	;volatile
  5919                           
  5920                           ;nRF24L01P.c: 32: SPI_transfer(0x20 | reg);
  5921  0F4E  0874               	movf	WriteRegisterRF@reg,w
  5922  0F4F  3820               	iorlw	32
  5923  0F50  318E  26F4  318F   	fcall	_SPI_transfer
  5924                           
  5925                           ;nRF24L01P.c: 33: SPI_transfer(val);
  5926  0F53  0873               	movf	WriteRegisterRF@val,w
  5927  0F54  318E  26F4         	fcall	_SPI_transfer
  5928                           
  5929                           ;nRF24L01P.c: 34: LATCbits.LATC6 = 1;
  5930  0F56  0022               	movlb	2	; select bank2
  5931  0F57  170E               	bsf	14,6	;volatile
  5932  0F58  0008               	return
  5933  0F59                     __end_of_WriteRegisterRF:	
  5934                           
  5935                           	psect	text27
  5936  0F0C                     __ptext27:	
  5937 ;; *************** function _WriteCommand *****************
  5938 ;; Defined at:
  5939 ;;		line 62 in file "nRF24L01P.c"
  5940 ;; Parameters:    Size  Location     Type
  5941 ;;  command         1    wreg     unsigned char 
  5942 ;; Auto vars:     Size  Location     Type
  5943 ;;  command         1    3[COMMON] unsigned char 
  5944 ;; Return value:  Size  Location     Type
  5945 ;;                  1    wreg      void 
  5946 ;; Registers used:
  5947 ;;		wreg, status,2, status,0, pclath, cstack
  5948 ;; Tracked objects:
  5949 ;;		On entry : 0/0
  5950 ;;		On exit  : 0/0
  5951 ;;		Unchanged: 0/0
  5952 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5953 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5954 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5955 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5956 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5957 ;;Total ram usage:        1 bytes
  5958 ;; Hardware stack levels used:    1
  5959 ;; Hardware stack levels required when called:    2
  5960 ;; This function calls:
  5961 ;;		_SPI_transfer
  5962 ;; This function is called by:
  5963 ;;		_FlushTXRX
  5964 ;; This function uses a non-reentrant model
  5965 ;;
  5966                           
  5967                           
  5968                           ;psect for function _WriteCommand
  5969  0F0C                     _WriteCommand:	
  5970                           
  5971                           ;incstack = 0
  5972                           ; Regs used in _WriteCommand: [wreg+status,2+status,0+pclath+cstack]
  5973                           ;WriteCommand@command stored from wreg
  5974  0F0C  00F3               	movwf	WriteCommand@command
  5975                           
  5976                           ;nRF24L01P.c: 64: LATCbits.LATC6 = 0;
  5977  0F0D  0022               	movlb	2	; select bank2
  5978  0F0E  130E               	bcf	14,6	;volatile
  5979                           
  5980                           ;nRF24L01P.c: 65: SPI_transfer(command);
  5981  0F0F  0873               	movf	WriteCommand@command,w
  5982  0F10  318E  26F4         	fcall	_SPI_transfer
  5983                           
  5984                           ;nRF24L01P.c: 66: LATCbits.LATC6 = 1;
  5985  0F12  0022               	movlb	2	; select bank2
  5986  0F13  170E               	bsf	14,6	;volatile
  5987  0F14  0008               	return
  5988  0F15                     __end_of_WriteCommand:	
  5989                           
  5990                           	psect	text28
  5991  0EF4                     __ptext28:	
  5992 ;; *************** function _SPI_transfer *****************
  5993 ;; Defined at:
  5994 ;;		line 54 in file "spi.c"
  5995 ;; Parameters:    Size  Location     Type
  5996 ;;  data            1    wreg     unsigned char 
  5997 ;; Auto vars:     Size  Location     Type
  5998 ;;  data            1    2[COMMON] unsigned char 
  5999 ;; Return value:  Size  Location     Type
  6000 ;;                  1    wreg      unsigned char 
  6001 ;; Registers used:
  6002 ;;		wreg
  6003 ;; Tracked objects:
  6004 ;;		On entry : 0/0
  6005 ;;		On exit  : 0/0
  6006 ;;		Unchanged: 0/0
  6007 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6008 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6009 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6010 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6011 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6012 ;;Total ram usage:        1 bytes
  6013 ;; Hardware stack levels used:    1
  6014 ;; Hardware stack levels required when called:    1
  6015 ;; This function calls:
  6016 ;;		Nothing
  6017 ;; This function is called by:
  6018 ;;		_WriteRegister
  6019 ;;		_ReadRegister
  6020 ;;		_WriteRegisterRF
  6021 ;;		_WriteAddress
  6022 ;;		_ReadRegisterRF
  6023 ;;		_WriteCommand
  6024 ;;		_WritePayload
  6025 ;;		_ReadPayload
  6026 ;; This function uses a non-reentrant model
  6027 ;;
  6028                           
  6029                           
  6030                           ;psect for function _SPI_transfer
  6031  0EF4                     _SPI_transfer:	
  6032                           
  6033                           ;incstack = 0
  6034                           ; Regs used in _SPI_transfer: [wreg]
  6035                           ;SPI_transfer@data stored from wreg
  6036  0EF4  00F2               	movwf	SPI_transfer@data
  6037                           
  6038                           ;spi.c: 56: SSPBUF = data;
  6039  0EF5  0872               	movf	SPI_transfer@data,w
  6040  0EF6  0024               	movlb	4	; select bank4
  6041  0EF7  0091               	movwf	17	;volatile
  6042  0EF8                     l134:	
  6043                           ;spi.c: 57: while (!SSPSTATbits.BF);
  6044                           
  6045  0EF8  1C14               	btfss	20,0	;volatile
  6046  0EF9  2EF8               	goto	l134
  6047                           
  6048                           ;spi.c: 58: return SSPBUF;
  6049  0EFA  0811               	movf	17,w	;volatile
  6050  0EFB  0008               	return
  6051  0EFC                     __end_of_SPI_transfer:	
  6052                           
  6053                           	psect	text29
  6054  0F1E                     __ptext29:	
  6055 ;; *************** function _ConfigureOscillator *****************
  6056 ;; Defined at:
  6057 ;;		line 18 in file "system.c"
  6058 ;; Parameters:    Size  Location     Type
  6059 ;;		None
  6060 ;; Auto vars:     Size  Location     Type
  6061 ;;		None
  6062 ;; Return value:  Size  Location     Type
  6063 ;;                  1    wreg      void 
  6064 ;; Registers used:
  6065 ;;		wreg, status,2, status,0
  6066 ;; Tracked objects:
  6067 ;;		On entry : 0/0
  6068 ;;		On exit  : 0/0
  6069 ;;		Unchanged: 0/0
  6070 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6071 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6072 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6073 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6074 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6075 ;;Total ram usage:        0 bytes
  6076 ;; Hardware stack levels used:    1
  6077 ;; Hardware stack levels required when called:    1
  6078 ;; This function calls:
  6079 ;;		Nothing
  6080 ;; This function is called by:
  6081 ;;		_main
  6082 ;; This function uses a non-reentrant model
  6083 ;;
  6084                           
  6085                           
  6086                           ;psect for function _ConfigureOscillator
  6087  0F1E                     _ConfigureOscillator:	
  6088                           
  6089                           ;system.c: 20: OSCCONbits.IRCF = 0b1110;
  6090                           
  6091                           ;incstack = 0
  6092                           ; Regs used in _ConfigureOscillator: [wreg+status,2+status,0]
  6093  0F1E  0021               	movlb	1	; select bank1
  6094  0F1F  0819               	movf	25,w	;volatile
  6095  0F20  39C3               	andlw	-61
  6096  0F21  3838               	iorlw	56
  6097  0F22  0099               	movwf	25	;volatile
  6098                           
  6099                           ;system.c: 36: OSCCONbits.SCS = 0b00;
  6100  0F23  30FC               	movlw	-4
  6101  0F24  0599               	andwf	25,f	;volatile
  6102                           
  6103                           ;system.c: 41: OSCCONbits.SPLLMULT = 0b1;
  6104  0F25  1719               	bsf	25,6	;volatile
  6105                           
  6106                           ;system.c: 45: OSCCONbits.SPLLEN = 0b0;
  6107  0F26  1399               	bcf	25,7	;volatile
  6108  0F27  0008               	return
  6109  0F28                     __end_of_ConfigureOscillator:	
  6110                           
  6111                           	psect	intentry
  6112  0004                     __pintentry:	
  6113 ;; *************** function _isr *****************
  6114 ;; Defined at:
  6115 ;;		line 25 in file "interrupts.c"
  6116 ;; Parameters:    Size  Location     Type
  6117 ;;		None
  6118 ;; Auto vars:     Size  Location     Type
  6119 ;;		None
  6120 ;; Return value:  Size  Location     Type
  6121 ;;                  1    wreg      void 
  6122 ;; Registers used:
  6123 ;;		wreg, status,2, status,0
  6124 ;; Tracked objects:
  6125 ;;		On entry : 0/0
  6126 ;;		On exit  : 0/0
  6127 ;;		Unchanged: 0/0
  6128 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6129 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6130 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6131 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6132 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6133 ;;Total ram usage:        2 bytes
  6134 ;; Hardware stack levels used:    1
  6135 ;; This function calls:
  6136 ;;		Nothing
  6137 ;; This function is called by:
  6138 ;;		Interrupt level 1
  6139 ;; This function uses a non-reentrant model
  6140 ;;
  6141                           
  6142  0004                     _isr:	
  6143                           
  6144                           ;incstack = 0
  6145  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  6146                           
  6147                           ; Regs used in _isr: [wreg+status,2+status,0]
  6148  0005  3180               	pagesel	$
  6149  0006  0020               	movlb	0	; select bank0
  6150  0007  087F               	movf	127,w
  6151  0008  00F1               	movwf	??_isr+1
  6152                           
  6153                           ;interrupts.c: 36: if(INTCONbits.IOCIF)
  6154  0009  1C0B               	btfss	11,0	;volatile
  6155  000A  2838               	goto	i1l367
  6156                           
  6157                           ;interrupts.c: 37: {
  6158                           ;interrupts.c: 38: INTCONbits.IOCIF = 0;
  6159  000B  100B               	bcf	11,0	;volatile
  6160                           
  6161                           ;interrupts.c: 39: if (IOCAFbits.IOCAF0 == 1)
  6162  000C  0027               	movlb	7	; select bank7
  6163  000D  1C13               	btfss	19,0	;volatile
  6164  000E  2838               	goto	i1l367
  6165                           
  6166                           ;interrupts.c: 40: {
  6167                           ;interrupts.c: 41: IOCAFbits.IOCAF0 = 0;
  6168  000F  1013               	bcf	19,0	;volatile
  6169                           
  6170                           ;interrupts.c: 42: if ((SW == 0) & (PORTAbits.RA0 == 1))
  6171  0010  0020               	movlb	0	; select bank0
  6172  0011  1C0C               	btfss	12,0	;volatile
  6173  0012  2815               	goto	u151_20
  6174  0013  3001               	movlw	1
  6175  0014  2816               	goto	u151_22
  6176  0015                     u151_20:	
  6177  0015  3000               	movlw	0
  6178  0016                     u151_22:	
  6179  0016  00F0               	movwf	??_isr
  6180  0017  086F               	movf	_SW,w
  6181  0018  1D03               	btfss	3,2
  6182  0019  281C               	goto	u152_20
  6183  001A  3001               	movlw	1
  6184  001B  281D               	goto	u152_22
  6185  001C                     u152_20:	
  6186  001C  3000               	movlw	0
  6187  001D                     u152_22:	
  6188  001D  0570               	andwf	??_isr,w
  6189  001E  3800               	iorlw	0
  6190  001F  1903               	skipnz
  6191  0020  2824               	goto	i1l2512
  6192                           
  6193                           ;interrupts.c: 43: {
  6194                           ;interrupts.c: 45: SW = 1;
  6195  0021  01EF               	clrf	_SW
  6196  0022  0AEF               	incf	_SW,f
  6197                           
  6198                           ;interrupts.c: 46: }
  6199  0023  2838               	goto	i1l367
  6200  0024                     i1l2512:	
  6201                           
  6202                           ;interrupts.c: 47: else if ((SW == 0) & (PORTAbits.RA0 == 0))
  6203  0024  180C               	btfsc	12,0	;volatile
  6204  0025  2828               	goto	u154_20
  6205  0026  3001               	movlw	1
  6206  0027  2829               	goto	u154_22
  6207  0028                     u154_20:	
  6208  0028  3000               	movlw	0
  6209  0029                     u154_22:	
  6210  0029  00F0               	movwf	??_isr
  6211  002A  086F               	movf	_SW,w
  6212  002B  1D03               	btfss	3,2
  6213  002C  282F               	goto	u155_20
  6214  002D  3001               	movlw	1
  6215  002E  2830               	goto	u155_22
  6216  002F                     u155_20:	
  6217  002F  3000               	movlw	0
  6218  0030                     u155_22:	
  6219  0030  0570               	andwf	??_isr,w
  6220  0031  3800               	iorlw	0
  6221  0032  1903               	skipnz
  6222  0033  2838               	goto	i1l367
  6223                           
  6224                           ;interrupts.c: 48: {
  6225                           ;interrupts.c: 50: SW = 2;
  6226  0034  3002               	movlw	2
  6227  0035  00F0               	movwf	??_isr
  6228  0036  0870               	movf	??_isr,w
  6229  0037  00EF               	movwf	_SW
  6230  0038                     i1l367:	
  6231  0038  0871               	movf	??_isr+1,w
  6232  0039  0020               	movlb	0	; select bank0
  6233  003A  00FF               	movwf	127
  6234  003B  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  6235  003C  0009               	retfie
  6236  003D                     __end_of_isr:	
  6237  007E                     btemp	set	126	;btemp
  6238  007E                     int$flags	set	126
  6239  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    256
    Data        36
    BSS         14
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     10      12
    BANK0            80     70      80
    BANK1            80      0      38
    BANK2            80      0       0
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           28      0       0
    BANK12            0      0       0

Pointer List with Targets:

    ReadPayload@data	PTR unsigned char  size(1) Largest target is 5
		 -> main@data2(BANK0[5]), 

    WritePayload@data	PTR unsigned char  size(1) Largest target is 5
		 -> main@data(BANK0[5]), main@data0(BANK0[5]), 

    WriteAddress@addr	PTR unsigned char  size(1) Largest target is 5
		 -> nRF_Setup_Read@RXTX_ADDR(BANK0[5]), nRF_Setup_Write@RXTX_ADDR(BANK0[5]), 

    MFRC522_ReadCardSerial@str	PTR unsigned char  size(1) Largest target is 6
		 -> main@UID(BANK0[6]), 

    MFRC522_isCard@TagType	PTR unsigned char  size(1) Largest target is 1
		 -> main@TagType(BANK0[1]), 

    MFRC522_AntiColl@serNum	PTR unsigned char  size(1) Largest target is 6
		 -> main@UID(BANK0[6]), 

    MFRC522_SelectTag@serNum	PTR unsigned char  size(1) Largest target is 6
		 -> main@UID(BANK0[6]), 

    MFRC522_CRC@dataOut	PTR unsigned char  size(1) Largest target is 18
		 -> MFRC522_Write@buff(BANK0[18]), MFRC522_Halt@buff(BANK0[4]), MFRC522_SelectTag@buffer(BANK0[9]), 

    MFRC522_CRC@dataIn	PTR unsigned char  size(1) Largest target is 18
		 -> MFRC522_Write@buff(BANK0[18]), MFRC522_Halt@buff(BANK0[4]), MFRC522_SelectTag@buffer(BANK0[9]), 

    MFRC522_Request@TagType	PTR unsigned char  size(1) Largest target is 1
		 -> main@TagType(BANK0[1]), 

    MFRC522_ToCard@backData	PTR unsigned char  size(1) Largest target is 18
		 -> MFRC522_Write@buff(BANK0[18]), MFRC522_Auth@buff(COMMON[12]), MFRC522_Halt@buff(BANK0[4]), MFRC522_SelectTag@buffer(BANK0[9]), 
		 -> main@UID(BANK0[6]), main@TagType(BANK0[1]), 

    MFRC522_ToCard@backLen	PTR unsigned int  size(1) Largest target is 2
		 -> MFRC522_AntiColl@unLen(BANK0[2]), MFRC522_Read@unLen(COMMON[2]), MFRC522_Write@recvBits(COMMON[2]), MFRC522_Auth@recvBits(COMMON[2]), 
		 -> MFRC522_Halt@unLen(BANK0[2]), MFRC522_SelectTag@recvBits(BANK0[2]), MFRC522_Request@backBits(BANK0[2]), 

    MFRC522_ToCard@sendData	PTR unsigned char  size(1) Largest target is 18
		 -> MFRC522_Write@buff(BANK0[18]), MFRC522_Auth@buff(COMMON[12]), MFRC522_Halt@buff(BANK0[4]), MFRC522_SelectTag@buffer(BANK0[9]), 
		 -> main@UID(BANK0[6]), main@TagType(BANK0[1]), 


Critical Paths under _main in COMMON

    _nRF_available->_ReadRegisterRF
    _ReadRegisterRF->_SPI_transfer
    _nRF_Setup_Write->_WriteAddress
    _nRF_Setup_Read->_WriteAddress
    _WriteAddress->_SPI_transfer
    _WritePayload->_SPI_transfer
    _ReadPayload->_SPI_transfer
    _MFRC522_AntiColl->_MFRC522_Clear_Bit
    _MFRC522_Reset->_WriteRegister
    _MFRC522_AntennaOn->_MFRC522_Set_Bit
    _MFRC522_Halt->_MFRC522_Clear_Bit
    _MFRC522_ToCard->_MFRC522_Clear_Bit
    _MFRC522_ToCard->_MFRC522_Set_Bit
    _MFRC522_CRC->_MFRC522_Clear_Bit
    _MFRC522_CRC->_MFRC522_Set_Bit
    _MFRC522_Set_Bit->_WriteRegister
    _MFRC522_Clear_Bit->_WriteRegister
    _WriteRegister->_ReadRegister
    _ReadRegister->_SPI_transfer
    _FlushTXRX->_WriteRegisterRF
    _WriteRegisterRF->_SPI_transfer
    _WriteCommand->_SPI_transfer

Critical Paths under _isr in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_MFRC522_SelectTag
    _MFRC522_isCard->_MFRC522_Request
    _MFRC522_Request->_MFRC522_ToCard
    _MFRC522_SelectTag->_MFRC522_ToCard
    _MFRC522_ReadCardSerial->_MFRC522_AntiColl
    _MFRC522_AntiColl->_MFRC522_ToCard
    _MFRC522_Init->_MFRC522_AntennaOn
    _MFRC522_AntennaOn->_MFRC522_Set_Bit
    _MFRC522_Halt->_MFRC522_ToCard
    _MFRC522_ToCard->_MFRC522_Clear_Bit
    _MFRC522_CRC->_MFRC522_Clear_Bit

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _isr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _isr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _isr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _isr in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                40    40      0   67200
                                             42 BANK0     28    28      0
                _ConfigureOscillator
                          _FlushTXRX
                            _InitApp
                       _MFRC522_Halt
                       _MFRC522_Init
             _MFRC522_ReadCardSerial
                  _MFRC522_SelectTag
                     _MFRC522_isCard
                        _ReadPayload
                       _ReadRegister
                           _SPI_init
                       _WritePayload
                      _WriteRegister
                    _WriteRegisterRF
                     _nRF_Setup_Read
                    _nRF_Setup_Write
                      _nRF_available
 ---------------------------------------------------------------------------------
 (1) _nRF_available                                        0     0      0     130
                     _ReadRegisterRF
 ---------------------------------------------------------------------------------
 (2) _ReadRegisterRF                                       4     4      0     130
                                              3 COMMON     4     4      0
                       _SPI_transfer
 ---------------------------------------------------------------------------------
 (1) _nRF_Setup_Write                                      7     7      0    2451
                                              0 BANK0      7     7      0
                       _WriteAddress
                    _WriteRegisterRF
 ---------------------------------------------------------------------------------
 (1) _nRF_Setup_Read                                       7     7      0    2451
                                              0 BANK0      7     7      0
                       _WriteAddress
                    _WriteRegisterRF
 ---------------------------------------------------------------------------------
 (2) _WriteAddress                                         6     4      2     712
                                              3 COMMON     6     4      2
                       _SPI_transfer
 ---------------------------------------------------------------------------------
 (1) _WritePayload                                         4     3      1     291
                                              3 COMMON     4     3      1
                       _SPI_transfer
 ---------------------------------------------------------------------------------
 (1) _SPI_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ReadPayload                                          5     4      1     226
                                              3 COMMON     5     4      1
                       _SPI_transfer
 ---------------------------------------------------------------------------------
 (1) _MFRC522_isCard                                       2     2      0    9675
                                             31 BANK0      2     2      0
                    _MFRC522_Request
 ---------------------------------------------------------------------------------
 (2) _MFRC522_Request                                      9     8      1    9614
                                             22 BANK0      9     8      1
                     _MFRC522_ToCard
                      _WriteRegister
 ---------------------------------------------------------------------------------
 (1) _MFRC522_SelectTag                                   20    20      0   14597
                                             22 BANK0     20    20      0
                        _MFRC522_CRC
                     _MFRC522_ToCard
 ---------------------------------------------------------------------------------
 (1) _MFRC522_ReadCardSerial                               3     3      0   11779
                                             33 BANK0      3     3      0
                   _MFRC522_AntiColl
 ---------------------------------------------------------------------------------
 (2) _MFRC522_AntiColl                                    11    11      0   11653
                                             22 BANK0     11    11      0
                  _MFRC522_Clear_Bit
                     _MFRC522_ToCard
                      _WriteRegister
 ---------------------------------------------------------------------------------
 (1) _MFRC522_Init                                         1     1      0    4238
                                              2 BANK0      1     1      0
                  _MFRC522_AntennaOn
                      _MFRC522_Reset
                      _WriteRegister
 ---------------------------------------------------------------------------------
 (2) _MFRC522_Reset                                        1     1      0    1263
                                              8 COMMON     1     1      0
                      _WriteRegister
 ---------------------------------------------------------------------------------
 (2) _MFRC522_AntennaOn                                    1     1      0    1712
                                              1 BANK0      1     1      0
                    _MFRC522_Set_Bit
 ---------------------------------------------------------------------------------
 (1) _MFRC522_Halt                                        10    10      0   16171
                                             22 BANK0     10    10      0
                        _MFRC522_CRC
                  _MFRC522_Clear_Bit
                     _MFRC522_ToCard
 ---------------------------------------------------------------------------------
 (3) _MFRC522_ToCard                                      20    16      4    8020
                                              2 BANK0     20    16      4
                  _MFRC522_Clear_Bit
                    _MFRC522_Set_Bit
                       _ReadRegister
                      _WriteRegister
 ---------------------------------------------------------------------------------
 (2) _MFRC522_CRC                                          6     4      2    6013
                                              2 BANK0      6     4      2
                  _MFRC522_Clear_Bit
                    _MFRC522_Set_Bit
                       _ReadRegister
                      _WriteRegister
 ---------------------------------------------------------------------------------
 (4) _MFRC522_Set_Bit                                      3     2      1    1712
                                              8 COMMON     2     1      1
                                              0 BANK0      1     1      0
                       _ReadRegister
                      _WriteRegister
 ---------------------------------------------------------------------------------
 (4) _MFRC522_Clear_Bit                                    4     3      1    1907
                                              8 COMMON     2     1      1
                                              0 BANK0      2     2      0
                       _ReadRegister
                      _WriteRegister
 ---------------------------------------------------------------------------------
 (1) _WriteRegister                                        2     1      1    1263
                                              6 COMMON     2     1      1
                       _ReadRegister (ARG)
                       _SPI_transfer
 ---------------------------------------------------------------------------------
 (1) _ReadRegister                                         3     3      0      96
                                              3 COMMON     3     3      0
                       _SPI_transfer
 ---------------------------------------------------------------------------------
 (1) _InitApp                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _FlushTXRX                                            1     1      0    1585
                                              5 COMMON     1     1      0
                       _WriteCommand
                    _WriteRegisterRF
 ---------------------------------------------------------------------------------
 (2) _WriteRegisterRF                                      2     1      1    1523
                                              3 COMMON     2     1      1
                       _SPI_transfer
 ---------------------------------------------------------------------------------
 (2) _WriteCommand                                         1     1      0      62
                                              3 COMMON     1     1      0
                       _SPI_transfer
 ---------------------------------------------------------------------------------
 (3) _SPI_transfer                                         1     1      0      31
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _ConfigureOscillator                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _isr                                                  2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ConfigureOscillator
   _FlushTXRX
     _WriteCommand
       _SPI_transfer
     _WriteRegisterRF
       _SPI_transfer
   _InitApp
   _MFRC522_Halt
     _MFRC522_CRC
       _MFRC522_Clear_Bit
         _ReadRegister
           _SPI_transfer
         _WriteRegister
           _ReadRegister (ARG)
             _SPI_transfer
           _SPI_transfer (ARG)
       _MFRC522_Set_Bit
         _ReadRegister
           _SPI_transfer
         _WriteRegister
           _ReadRegister (ARG)
             _SPI_transfer
           _SPI_transfer (ARG)
       _ReadRegister
         _SPI_transfer
       _WriteRegister
         _ReadRegister (ARG)
           _SPI_transfer
         _SPI_transfer (ARG)
     _MFRC522_Clear_Bit
       _ReadRegister
         _SPI_transfer
       _WriteRegister
         _ReadRegister (ARG)
           _SPI_transfer
         _SPI_transfer (ARG)
     _MFRC522_ToCard
       _MFRC522_Clear_Bit
         _ReadRegister
           _SPI_transfer
         _WriteRegister
           _ReadRegister (ARG)
             _SPI_transfer
           _SPI_transfer (ARG)
       _MFRC522_Set_Bit
         _ReadRegister
           _SPI_transfer
         _WriteRegister
           _ReadRegister (ARG)
             _SPI_transfer
           _SPI_transfer (ARG)
       _ReadRegister
         _SPI_transfer
       _WriteRegister
         _ReadRegister (ARG)
           _SPI_transfer
         _SPI_transfer (ARG)
   _MFRC522_Init
     _MFRC522_AntennaOn
       _MFRC522_Set_Bit
         _ReadRegister
           _SPI_transfer
         _WriteRegister
           _ReadRegister (ARG)
             _SPI_transfer
           _SPI_transfer (ARG)
     _MFRC522_Reset
       _WriteRegister
         _ReadRegister (ARG)
           _SPI_transfer
         _SPI_transfer (ARG)
     _WriteRegister
       _ReadRegister (ARG)
         _SPI_transfer
       _SPI_transfer (ARG)
   _MFRC522_ReadCardSerial
     _MFRC522_AntiColl
       _MFRC522_Clear_Bit
         _ReadRegister
           _SPI_transfer
         _WriteRegister
           _ReadRegister (ARG)
             _SPI_transfer
           _SPI_transfer (ARG)
       _MFRC522_ToCard
         _MFRC522_Clear_Bit
           _ReadRegister
             _SPI_transfer
           _WriteRegister
             _ReadRegister (ARG)
               _SPI_transfer
             _SPI_transfer (ARG)
         _MFRC522_Set_Bit
           _ReadRegister
             _SPI_transfer
           _WriteRegister
             _ReadRegister (ARG)
               _SPI_transfer
             _SPI_transfer (ARG)
         _ReadRegister
           _SPI_transfer
         _WriteRegister
           _ReadRegister (ARG)
             _SPI_transfer
           _SPI_transfer (ARG)
       _WriteRegister
         _ReadRegister (ARG)
           _SPI_transfer
         _SPI_transfer (ARG)
   _MFRC522_SelectTag
     _MFRC522_CRC
       _MFRC522_Clear_Bit
         _ReadRegister
           _SPI_transfer
         _WriteRegister
           _ReadRegister (ARG)
             _SPI_transfer
           _SPI_transfer (ARG)
       _MFRC522_Set_Bit
         _ReadRegister
           _SPI_transfer
         _WriteRegister
           _ReadRegister (ARG)
             _SPI_transfer
           _SPI_transfer (ARG)
       _ReadRegister
         _SPI_transfer
       _WriteRegister
         _ReadRegister (ARG)
           _SPI_transfer
         _SPI_transfer (ARG)
     _MFRC522_ToCard
       _MFRC522_Clear_Bit
         _ReadRegister
           _SPI_transfer
         _WriteRegister
           _ReadRegister (ARG)
             _SPI_transfer
           _SPI_transfer (ARG)
       _MFRC522_Set_Bit
         _ReadRegister
           _SPI_transfer
         _WriteRegister
           _ReadRegister (ARG)
             _SPI_transfer
           _SPI_transfer (ARG)
       _ReadRegister
         _SPI_transfer
       _WriteRegister
         _ReadRegister (ARG)
           _SPI_transfer
         _SPI_transfer (ARG)
   _MFRC522_isCard
     _MFRC522_Request
       _MFRC522_ToCard
         _MFRC522_Clear_Bit
           _ReadRegister
             _SPI_transfer
           _WriteRegister
             _ReadRegister (ARG)
               _SPI_transfer
             _SPI_transfer (ARG)
         _MFRC522_Set_Bit
           _ReadRegister
             _SPI_transfer
           _WriteRegister
             _ReadRegister (ARG)
               _SPI_transfer
             _SPI_transfer (ARG)
         _ReadRegister
           _SPI_transfer
         _WriteRegister
           _ReadRegister (ARG)
             _SPI_transfer
           _SPI_transfer (ARG)
       _WriteRegister
         _ReadRegister (ARG)
           _SPI_transfer
         _SPI_transfer (ARG)
   _ReadPayload
     _SPI_transfer
   _ReadRegister
     _SPI_transfer
   _SPI_init
   _WritePayload
     _SPI_transfer
   _WriteRegister
     _ReadRegister (ARG)
       _SPI_transfer
     _SPI_transfer (ARG)
   _WriteRegisterRF
     _SPI_transfer
   _nRF_Setup_Read
     _WriteAddress
       _SPI_transfer
     _WriteRegisterRF
       _SPI_transfer
   _nRF_Setup_Write
     _WriteAddress
       _SPI_transfer
     _WriteRegisterRF
       _SPI_transfer
   _nRF_available
     _ReadRegisterRF
       _SPI_transfer

 _isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      A       C       2       85.7%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     46      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0      26       7       47.5%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0      82      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              1C      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BANK12               0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0      82      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Mon Jul 23 13:33:21 2018

                           __CFG_CP$OFF 0000                            MFRC522_CRC@i 0027  
                          MFRC522_CRC@n 0025                             _SSPSTATbits 0214  
                                    l82 00A8                                      l95 0237  
                                    _SW 006F                                      _cc 006E  
                        ?_nRF_available 0070                             main@TagType 0065  
               __size_of_ReadRegisterRF 0015                                     l204 0365  
                                   l134 0EF8                                     l219 074E  
                                   l316 079C                                     l334 076E  
                                   l328 07BA                                     l273 04D0  
                                   _key 00A9                                     _isr 0004  
                      ?_WriteRegisterRF 0073                   __size_of_WriteAddress 0027  
                          __CFG_BORV$LO 0000                                     wreg 0009  
                        ??_MFRC522_Halt 0036                          ??_MFRC522_Init 0022  
                 __size_of_WriteCommand 0009                            __CFG_LVP$OFF 0000  
                 __size_of_SPI_transfer 0008                                    l3012 0125  
                                  l3102 021C                                    l3110 0231  
                                  l3112 0239                                    l3072 01BF  
                                  l2610 0338                                    l2620 0342  
                                  l2604 0323                                    l2614 0340  
                                  l2606 0333                                    l2622 0360  
                                  l2550 0246                                    l2702 04C4  
                                  l2552 024C                                    l2660 04E7  
                                  l2556 0255                                    l2820 0FA6  
                                  l2724 0782                                    l2662 0500  
                                  l2574 02B4                                    l2566 0280  
                                  l2558 025D                                    l2646 074A  
                                  l2806 07A7                                    l2902 0F31  
                                  l2584 02CE                                    l2576 02B9  
                                  l2568 029F                                    l2674 051C  
                                  l2666 050D                                    l2596 02EB  
                                  l2836 0FE4                                    l2852 055B  
                                  l2844 0544                                    l2916 0758  
                                  l2862 058D                                    l2950 0097  
                                  l2696 04B2                                    l2864 058E  
                                  ?_isr 0070                                    _CREN 0CEC  
                                  u2217 00C1                                    u2307 019D  
                                  u2227 00C9                                    u2317 01AF  
                                  u2237 00EF                                    u2407 07BE  
                                  u2327 01B7                                    u2247 0100  
                                  u1705 034B                                    u2417 0773  
                                  u2337 01C3                                    u2257 010D  
                                  u2427 0596                                    u2347 01F7  
                                  u2267 0119                                    u2437 05A2  
                                  u1805 078B                                    u2357 0203  
                                  u2277 0153                                    u2367 0212  
                                  u2287 015B                                    u1585 0289  
                                  u2377 0227                                    u2297 018C  
                                  u2387 03E7                                    u1940 00D6  
                                  u2397 046A                                    u1970 0168  
                                  u1980 01D3                                    _RCIF 008D  
                                  _OERR 0CE9                                    _TRMT 0CF1  
                 __size_of_WritePayload 0024                            __CFG_WRT$OFF 0000  
                    WriteRegisterRF@reg 0074                      WriteRegisterRF@val 0073  
                                  _main 0078                   MFRC522_AntiColl@unLen 003C  
                                  fsr0h 0005                                    fsr1h 0007  
                                  indf0 0000                                    fsr0l 0004  
                                  indf1 0001                                    fsr1l 0006  
                                  btemp 007E                                    start 003D  
                           main@version 004C                           __CFG_IESO$OFF 0000  
                      _MFRC522_AntiColl 0472                     __CFG_PLLEN$DISABLED 0000  
                         __CFG_MCLRE$ON 0000                         __end_of_InitApp 1000  
                         ??_ReadPayload 0074                         ??_MFRC522_Reset 0078  
                                 ??_isr 0070                            _WriteAddress 0778  
                                 ?_main 0070                           ?_ReadRegister 0070  
               ?_MFRC522_ReadCardSerial 0070                            _WriteCommand 0F0C  
                         __CFG_WDTE$OFF 0000                        SPI_transfer@data 0072  
                                 i1l367 0038                                   _GTSN1 006A  
                                 _GTSN2 0066                                   _GTSN3 00B8  
                                 _GTSN4 00B4                                   _RCREG 0199  
                          _SPI_transfer 0EF4                                   _TMR1H 0017  
                                 _TMR1L 0016                                   _SPBRG 019B  
                                 _TXREG 019A                     _ConfigureOscillator 0F1E  
                __size_of_WriteRegister 000E                            _WritePayload 079F  
                        __CFG_FCMEN$OFF 0000               MFRC522_SelectTag@recvBits 0047  
                MFRC522_AntiColl@serNum 0040                                   main@i 0064  
                        __CFG_BOREN$OFF 0000                        __end_of_SPI_init 07FA  
                     _MFRC522_Clear_Bit 0F86                                   status 0003  
                                 wtemp0 007E                      ?_MFRC522_Clear_Bit 0078  
               MFRC522_SelectTag@buffer 003B                    ?_ConfigureOscillator 0070  
               MFRC522_SelectTag@serNum 0045                       _MFRC522_AntennaOn 0F15  
                       __initialization 003F                __size_of_nRF_Setup_Write 0086  
                          __end_of_main 023D                      ?_MFRC522_AntennaOn 0070  
                   ??_MFRC522_Clear_Bit 0020                         ??_nRF_available 0077  
                      ??_nRF_Setup_Read 0020               MFRC522_ReadCardSerial@str 0043  
                        __CFG_LPBOR$OFF 0000          __end_of_MFRC522_ReadCardSerial 0FE6  
                      ??_MFRC522_ToCard 0026                __size_of_MFRC522_Set_Bit 000F  
                        ??_ReadRegister 0073                __size_of_MFRC522_Request 0036  
                                ??_main 004A                     ??_MFRC522_AntennaOn 0021  
                       MFRC522_ToCard@i 0033                         MFRC522_ToCard@n 0035  
                   __end_of_ReadPayload 0778                        ??_MFRC522_isCard 003F  
                 MFRC522_ToCard@backLen 0025                     __CFG_USBLSCLK$48MHz 0000  
             __end_of_MFRC522_Clear_Bit 0F97                   MFRC522_ToCard@_status 002F  
                 MFRC522_ToCard@command 0032                                  _ANSELA 018C  
                                _ANSELB 018D                                  _ANSELC 018E  
                     _MFRC522_SelectTag 0532                                  i1l2512 0024  
                                u151_20 0015                                  u151_22 0016  
                                u152_20 001C                                  u152_22 001D  
                                u154_20 0028                                  u154_22 0029  
                                u155_20 002F                                  u155_22 0030  
                    __size_of_FlushTXRX 0010                   MFRC522_ToCard@sendLen 0023  
                    ?_MFRC522_SelectTag 0070                   MFRC522_ToCard@waitIRq 002E  
                                _SSPBUF 0211               __end_of_MFRC522_AntennaOn 0F1E  
                             ??_InitApp 0072                   ??_ConfigureOscillator 0072  
                         _WriteRegister 0F59                          __CFG_PWRTE$OFF 0000  
                  __size_of_MFRC522_CRC 0060                     ??_MFRC522_SelectTag 0036  
                  __end_of_MFRC522_Halt 071A                    __end_of_MFRC522_Init 05E1  
               MFRC522_AntiColl@_status 003E                                  _buffer 238C  
                        _ReadRegisterRF 0FBB               __end_of_MFRC522_SelectTag 0590  
                   ReadRegisterRF@temp1 0076                            ReadPayload@i 0077  
              MFRC522_SelectTag@_status 0044                 __end_of__initialization 0074  
                      WritePayload@data 0073                          ?_WriteRegister 0076  
                MFRC522_Request@TagType 0036                   MFRC522_isCard@TagType 0040  
                      WriteRegister@reg 0077                        WriteRegister@val 0076  
                        __pcstackCOMMON 0070                            __pidataBANK0 0F04  
                          __pidataBANK1 07C3                  __end_of_ReadRegisterRF 0FD0  
                           _ReadPayload 0750                        MFRC522_Halt@buff 003A  
                     __end_of_FlushTXRX 0F86                  MFRC522_Request@_status 003C  
                             ?_SPI_init 0070                       ??_nRF_Setup_Write 0020  
                MFRC522_Request@reqMode 003B                __end_of_MFRC522_AntiColl 04D2  
                     ??_MFRC522_Set_Bit 0079                       ??_MFRC522_Request 0037  
            __size_of_MFRC522_Clear_Bit 0011                              __pbssBANK0 006E  
                            __pbssBANK1 00BC                    __end_of_ReadRegister 0FBB  
                MFRC522_ToCard@backData 0024              __size_of_MFRC522_AntennaOn 0009  
                       WriteAddress@reg 0076                         WriteAddress@num 0073  
                     MFRC522_CRC@dataIn 0026                              __pmaintext 0078  
                     MFRC522_CRC@length 0022                         __CFG_PLLMULT$3x 0000  
                            __pintentry 0004                         ?_ReadRegisterRF 0070  
                    MFRC522_SelectTag@i 0049                  MFRC522_ToCard@lastBits 0030  
                            ??_SPI_init 0072                  MFRC522_ToCard@sendData 0022  
            __size_of_MFRC522_SelectTag 005E                                 _TMR_CNT 007A  
              __size_of_WriteRegisterRF 000E                         ??_WriteRegister 0077  
                               _InitApp 0FE6                   __size_of_MFRC522_Halt 0039  
                 __size_of_MFRC522_Init 0051                         __CFG_STVREN$OFF 0000  
                 __end_of_MFRC522_Reset 0F04                                 __ptext1 0F28  
                               __ptext2 0FBB                                 __ptext3 0367  
                               __ptext4 03ED                                 __ptext5 0778  
                               __ptext6 079F                                 __ptext7 07DF  
                               __ptext8 0750                                 __ptext9 0F97  
                             _T1CONbits 0018                            __size_of_isr 0039  
                             _IOCAFbits 0393                 nRF_Setup_Read@RXTX_ADDR 0022  
                             _IOCANbits 0392                               _IOCAPbits 0391  
                               main@UID 005E                                 clrloop0 0F34  
    __end_of_FM17522_firmware_reference 0621              _FM17522_firmware_reference 05E1  
                          _MFRC522_Halt 06E1                            _MFRC522_Init 0590  
                  end_of_initialization 0074                                 init_ram 0F3F  
                               initloop 0F40           MFRC522_ReadCardSerial@_status 0042  
                             _RCSTAbits 019D                   __end_of_nRF_available 0F33  
                             _PORTAbits 000C                               _PORTCbits 000E  
                      __CFG_FOSC$INTOSC 0000                               _TRISAbits 008C  
                             _TRISBbits 008D                               _TRISCbits 008E  
                 __size_of_ReadRegister 0013             __end_of_ConfigureOscillator 0F28  
                         ??_MFRC522_CRC 0024                nRF_Setup_Write@RXTX_ADDR 0022  
                             _TXSTAbits 019E                     WriteCommand@command 0073  
                     ??_WriteRegisterRF 0074                         _nRF_Setup_Write 0367  
                          ?_ReadPayload 0073                         _MFRC522_Set_Bit 0F67  
               MFRC522_Request@backBits 003D                     MFRC522_ToCard@irqEn 0031  
                       _MFRC522_Request 071A                             _BAUDCONbits 019F  
                          _ReadRegister 0FA8                     start_initialization 003F  
                     __size_of_SPI_init 001B                               _FlushTXRX 0F76  
                     MFRC522_Halt@unLen 003E                       ?_MFRC522_AntiColl 0070  
                     MFRC522_AntiColl@i 003F                 __size_of_nRF_Setup_Read 0085  
                           __end_of_isr 003D                 __size_of_MFRC522_ToCard 012A  
                    ??_MFRC522_AntiColl 0036                           WriteAddress@i 0077  
               __size_of_MFRC522_isCard 0011                        ??_ReadRegisterRF 0073  
              ??_MFRC522_ReadCardSerial 0041                     __end_of_MFRC522_CRC 0532  
                         ?_WriteAddress 0073                             __pdataBANK0 0066  
                           __pdataBANK1 00A0                           ?_WriteCommand 0070  
                    ReadRegisterRF@temp 0075                           ?_SPI_transfer 0070  
                           __pbssBIGRAM 238C                           ?_WritePayload 0073  
                           __pbssCOMMON 007A                         WritePayload@num 0075  
                            ?_FlushTXRX 0070                               ___latbits 0002  
                         __pcstackBANK0 0020                 __end_of_nRF_Setup_Write 03ED  
                      WriteAddress@addr 0074                           WritePayload@i 0076  
                              ?_InitApp 0070                 __end_of_MFRC522_Set_Bit 0F76  
                    MFRC522_CRC@dataOut 0023                 __end_of_MFRC522_Request 0750  
                   MFRC522_Set_Bit@addr 0020                     MFRC522_Set_Bit@mask 0078  
                        ??_WriteAddress 0075                          ??_WriteCommand 0073  
                        ??_SPI_transfer 0072                          ??_WritePayload 0074  
                           _MFRC522_CRC 04D2                                _LATAbits 010C  
                              _LATCbits 010E                   __end_of_WriteRegister 0F67  
                             clear_ram0 0F33                                _PIE1bits 0091  
__end_of_MFRC522_firmware_referenceV0_0 06E1          _MFRC522_firmware_referenceV0_0 06A1  
__end_of_MFRC522_firmware_referenceV1_0 06A1          _MFRC522_firmware_referenceV1_0 0661  
__end_of_MFRC522_firmware_referenceV2_0 0661          _MFRC522_firmware_referenceV2_0 0621  
                              _PIR1bits 0011         __size_of_MFRC522_ReadCardSerial 0016  
                             main@F3024 00BC                               main@F3017 00C1  
                             main@F3009 00AF                    __size_of_ReadPayload 0028  
                              _SPI_init 07DF                               main@data0 004F  
                             main@data2 0054                             ??_FlushTXRX 0075  
                        _nRF_Setup_Read 03ED                          _MFRC522_ToCard 023D  
                             _writeData 00A0                         _WriteRegisterRF 0F4B  
                        _MFRC522_isCard 0F97                   MFRC522_SelectTag@size 0046  
                      ?_nRF_Setup_Write 0070                  __size_of_MFRC522_Reset 0008  
                      ?_MFRC522_Set_Bit 0078                        __size_of_InitApp 001A  
                 MFRC522_Clear_Bit@addr 0079                        ?_MFRC522_Request 0036  
                 MFRC522_Clear_Bit@mask 0078                       ReadRegisterRF@reg 0074  
                __end_of_nRF_Setup_Read 0472                  __end_of_MFRC522_ToCard 0367  
                _MFRC522_ReadCardSerial 0FD0                                __ptext10 071A  
                              __ptext11 0532                                __ptext20 0F67  
                              __ptext12 0FD0                                __ptext21 0F86  
                              __ptext13 0472                                __ptext22 0F59  
                              __ptext14 0590                                __ptext23 0FA8  
                              __ptext15 0EFC                                __ptext24 0FE6  
                              __ptext16 0F15                                __ptext25 0F76  
                              __ptext17 06E1                                __ptext26 0F4B  
                              __ptext18 023D                                __ptext27 0F0C  
                              __ptext19 04D2                                __ptext28 0EF4  
                              __ptext29 0F1E                  __end_of_MFRC522_isCard 0FA8  
                  __end_of_WriteAddress 079F             MFRC522_AntiColl@serNumCheck 003B  
                  __end_of_WriteCommand 0F15                  __size_of_nRF_available 000B  
                         __size_of_main 01C5                    __end_of_SPI_transfer 0EFC  
                  __end_of_WritePayload 07C3            __size_of_ConfigureOscillator 000A  
             __size_of_MFRC522_AntiColl 0060                                int$flags 007E  
                              main@data 0059                                main@size 004E  
                         _MFRC522_Reset 0EFC                         ?_nRF_Setup_Read 0070  
               __end_of_WriteRegisterRF 0F59                              _INTCONbits 000B  
                       ?_MFRC522_ToCard 0022                         ?_MFRC522_isCard 0070  
                              intlevel1 0000                             _MUSHROOM_ON 007B  
                     __CFG_CLKOUTEN$OFF 0000                              _OSCCONbits 0099  
                  __CFG_CPUDIV$NOCLKDIV 0000                         ReadPayload@data 0073  
                        ?_MFRC522_Reset 0070                           _nRF_available 0F28  
                         __pstringtext1 05E1                           __pstringtext2 0621  
                         __pstringtext3 0661                           __pstringtext4 06A1  
                       ReadRegister@reg 0074                         ReadRegister@val 0075  
                           _SSPCON1bits 0215                           ?_MFRC522_Halt 0070  
                        ReadPayload@num 0076                           ?_MFRC522_Init 0070  
                          ?_MFRC522_CRC 0022  
