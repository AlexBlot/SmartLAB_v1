

Microchip Technology PIC LITE Macro Assembler V1.45 build -152302408 
                                                                                               Fri Jul 20 14:11:19 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	16LF1459
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	stringtext1,global,class=STRCODE,delta=2
     6                           	psect	stringtext2,global,class=STRCODE,delta=2
     7                           	psect	stringtext3,global,class=STRCODE,delta=2
     8                           	psect	stringtext4,global,class=STRCODE,delta=2
     9                           	psect	cinit,global,class=CODE,merge=1,delta=2
    10                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	inittext,global,class=CODE,delta=2
    15                           	psect	clrtext,global,class=CODE,delta=2
    16                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    17                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    18                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    19                           	psect	text1,local,class=CODE,merge=1,delta=2
    20                           	psect	text2,local,class=CODE,merge=1,delta=2
    21                           	psect	text3,local,class=CODE,merge=1,delta=2
    22                           	psect	text4,local,class=CODE,merge=1,delta=2
    23                           	psect	text5,local,class=CODE,merge=1,delta=2
    24                           	psect	text6,local,class=CODE,merge=1,delta=2
    25                           	psect	text7,local,class=CODE,merge=1,delta=2
    26                           	psect	text8,local,class=CODE,merge=1,delta=2
    27                           	psect	text9,local,class=CODE,merge=1,delta=2
    28                           	psect	text10,local,class=CODE,merge=1,delta=2
    29                           	psect	text11,local,class=CODE,merge=1,delta=2
    30                           	psect	text12,local,class=CODE,merge=1,delta=2
    31                           	psect	text13,local,class=CODE,merge=1,delta=2
    32                           	psect	text14,local,class=CODE,merge=1,delta=2
    33                           	psect	text15,local,class=CODE,merge=1,delta=2
    34                           	psect	text16,local,class=CODE,merge=1,delta=2
    35                           	psect	text17,local,class=CODE,merge=1,delta=2
    36                           	psect	text18,local,class=CODE,merge=1,delta=2
    37                           	psect	text19,local,class=CODE,merge=1,delta=2
    38                           	psect	text20,local,class=CODE,merge=1,delta=2
    39                           	psect	text21,local,class=CODE,merge=1,delta=2
    40                           	psect	text22,local,class=CODE,merge=1,delta=2
    41                           	psect	text23,local,class=CODE,merge=1,delta=2
    42                           	psect	text24,local,class=CODE,merge=1,delta=2
    43                           	psect	text25,local,class=CODE,merge=1,delta=2
    44                           	psect	text26,local,class=CODE,merge=1,delta=2
    45                           	psect	text27,local,class=CODE,merge=1,delta=2
    46                           	psect	text28,local,class=CODE,merge=1,delta=2
    47                           	psect	text29,local,class=CODE,merge=1,delta=2
    48                           	psect	intentry,global,class=CODE,delta=2
    49                           	dabs	1,0x620,48
    50                           	dabs	1,0x5BC,52
    51                           	dabs	1,0x238C,0,_buffer
    52                           	dabs	1,0x7E,2
    53  0000                     
    54                           ; Version 1.45
    55                           ; Generated 16/11/2017 GMT
    56                           ; 
    57                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    58                           ; All rights reserved.
    59                           ; 
    60                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    61                           ; 
    62                           ; Redistribution and use in source and binary forms, with or without modification, are
    63                           ; permitted provided that the following conditions are met:
    64                           ; 
    65                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    66                           ;        conditions and the following disclaimer.
    67                           ; 
    68                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    69                           ;        of conditions and the following disclaimer in the documentation and/or other
    70                           ;        materials provided with the distribution.
    71                           ; 
    72                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    73                           ;        software without specific prior written permission.
    74                           ; 
    75                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    76                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    77                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    78                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    79                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    80                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    81                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    82                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    83                           ; 
    84                           ; 
    85                           ; Code-generator required, PIC16LF1459 Definitions
    86                           ; 
    87                           ; SFR Addresses
    88  0000                     	;# 
    89  0001                     	;# 
    90  0002                     	;# 
    91  0003                     	;# 
    92  0004                     	;# 
    93  0005                     	;# 
    94  0006                     	;# 
    95  0007                     	;# 
    96  0008                     	;# 
    97  0009                     	;# 
    98  000A                     	;# 
    99  000B                     	;# 
   100  000C                     	;# 
   101  000D                     	;# 
   102  000E                     	;# 
   103  0011                     	;# 
   104  0012                     	;# 
   105  0015                     	;# 
   106  0016                     	;# 
   107  0016                     	;# 
   108  0017                     	;# 
   109  0018                     	;# 
   110  0019                     	;# 
   111  001A                     	;# 
   112  001B                     	;# 
   113  001C                     	;# 
   114  008C                     	;# 
   115  008D                     	;# 
   116  008E                     	;# 
   117  0091                     	;# 
   118  0092                     	;# 
   119  0095                     	;# 
   120  0096                     	;# 
   121  0097                     	;# 
   122  0098                     	;# 
   123  0099                     	;# 
   124  009A                     	;# 
   125  009B                     	;# 
   126  009B                     	;# 
   127  009C                     	;# 
   128  009D                     	;# 
   129  009E                     	;# 
   130  009F                     	;# 
   131  010C                     	;# 
   132  010D                     	;# 
   133  010E                     	;# 
   134  0111                     	;# 
   135  0112                     	;# 
   136  0113                     	;# 
   137  0114                     	;# 
   138  0115                     	;# 
   139  0116                     	;# 
   140  0117                     	;# 
   141  0118                     	;# 
   142  0119                     	;# 
   143  011D                     	;# 
   144  018C                     	;# 
   145  018D                     	;# 
   146  018E                     	;# 
   147  0191                     	;# 
   148  0191                     	;# 
   149  0192                     	;# 
   150  0193                     	;# 
   151  0193                     	;# 
   152  0194                     	;# 
   153  0195                     	;# 
   154  0196                     	;# 
   155  0199                     	;# 
   156  019A                     	;# 
   157  019B                     	;# 
   158  019B                     	;# 
   159  019C                     	;# 
   160  019D                     	;# 
   161  019E                     	;# 
   162  019F                     	;# 
   163  020C                     	;# 
   164  020D                     	;# 
   165  0211                     	;# 
   166  0211                     	;# 
   167  0212                     	;# 
   168  0212                     	;# 
   169  0213                     	;# 
   170  0213                     	;# 
   171  0214                     	;# 
   172  0214                     	;# 
   173  0215                     	;# 
   174  0215                     	;# 
   175  0215                     	;# 
   176  0216                     	;# 
   177  0216                     	;# 
   178  0217                     	;# 
   179  0217                     	;# 
   180  0391                     	;# 
   181  0392                     	;# 
   182  0393                     	;# 
   183  0394                     	;# 
   184  0395                     	;# 
   185  0396                     	;# 
   186  039A                     	;# 
   187  039B                     	;# 
   188  0611                     	;# 
   189  0612                     	;# 
   190  0613                     	;# 
   191  0613                     	;# 
   192  0614                     	;# 
   193  0615                     	;# 
   194  0616                     	;# 
   195  0616                     	;# 
   196  0691                     	;# 
   197  0692                     	;# 
   198  0693                     	;# 
   199  0694                     	;# 
   200  0695                     	;# 
   201  0E8E                     	;# 
   202  0E8F                     	;# 
   203  0E90                     	;# 
   204  0E91                     	;# 
   205  0E92                     	;# 
   206  0E93                     	;# 
   207  0E94                     	;# 
   208  0E94                     	;# 
   209  0E95                     	;# 
   210  0E96                     	;# 
   211  0E97                     	;# 
   212  0E98                     	;# 
   213  0E99                     	;# 
   214  0E9A                     	;# 
   215  0E9B                     	;# 
   216  0E9C                     	;# 
   217  0E9D                     	;# 
   218  0E9E                     	;# 
   219  0E9F                     	;# 
   220  0FE4                     	;# 
   221  0FE5                     	;# 
   222  0FE6                     	;# 
   223  0FE7                     	;# 
   224  0FE8                     	;# 
   225  0FE9                     	;# 
   226  0FEA                     	;# 
   227  0FEB                     	;# 
   228  0FED                     	;# 
   229  0FEE                     	;# 
   230  0FEF                     	;# 
   231  0000                     	;# 
   232  0001                     	;# 
   233  0002                     	;# 
   234  0003                     	;# 
   235  0004                     	;# 
   236  0005                     	;# 
   237  0006                     	;# 
   238  0007                     	;# 
   239  0008                     	;# 
   240  0009                     	;# 
   241  000A                     	;# 
   242  000B                     	;# 
   243  000C                     	;# 
   244  000D                     	;# 
   245  000E                     	;# 
   246  0011                     	;# 
   247  0012                     	;# 
   248  0015                     	;# 
   249  0016                     	;# 
   250  0016                     	;# 
   251  0017                     	;# 
   252  0018                     	;# 
   253  0019                     	;# 
   254  001A                     	;# 
   255  001B                     	;# 
   256  001C                     	;# 
   257  008C                     	;# 
   258  008D                     	;# 
   259  008E                     	;# 
   260  0091                     	;# 
   261  0092                     	;# 
   262  0095                     	;# 
   263  0096                     	;# 
   264  0097                     	;# 
   265  0098                     	;# 
   266  0099                     	;# 
   267  009A                     	;# 
   268  009B                     	;# 
   269  009B                     	;# 
   270  009C                     	;# 
   271  009D                     	;# 
   272  009E                     	;# 
   273  009F                     	;# 
   274  010C                     	;# 
   275  010D                     	;# 
   276  010E                     	;# 
   277  0111                     	;# 
   278  0112                     	;# 
   279  0113                     	;# 
   280  0114                     	;# 
   281  0115                     	;# 
   282  0116                     	;# 
   283  0117                     	;# 
   284  0118                     	;# 
   285  0119                     	;# 
   286  011D                     	;# 
   287  018C                     	;# 
   288  018D                     	;# 
   289  018E                     	;# 
   290  0191                     	;# 
   291  0191                     	;# 
   292  0192                     	;# 
   293  0193                     	;# 
   294  0193                     	;# 
   295  0194                     	;# 
   296  0195                     	;# 
   297  0196                     	;# 
   298  0199                     	;# 
   299  019A                     	;# 
   300  019B                     	;# 
   301  019B                     	;# 
   302  019C                     	;# 
   303  019D                     	;# 
   304  019E                     	;# 
   305  019F                     	;# 
   306  020C                     	;# 
   307  020D                     	;# 
   308  0211                     	;# 
   309  0211                     	;# 
   310  0212                     	;# 
   311  0212                     	;# 
   312  0213                     	;# 
   313  0213                     	;# 
   314  0214                     	;# 
   315  0214                     	;# 
   316  0215                     	;# 
   317  0215                     	;# 
   318  0215                     	;# 
   319  0216                     	;# 
   320  0216                     	;# 
   321  0217                     	;# 
   322  0217                     	;# 
   323  0391                     	;# 
   324  0392                     	;# 
   325  0393                     	;# 
   326  0394                     	;# 
   327  0395                     	;# 
   328  0396                     	;# 
   329  039A                     	;# 
   330  039B                     	;# 
   331  0611                     	;# 
   332  0612                     	;# 
   333  0613                     	;# 
   334  0613                     	;# 
   335  0614                     	;# 
   336  0615                     	;# 
   337  0616                     	;# 
   338  0616                     	;# 
   339  0691                     	;# 
   340  0692                     	;# 
   341  0693                     	;# 
   342  0694                     	;# 
   343  0695                     	;# 
   344  0E8E                     	;# 
   345  0E8F                     	;# 
   346  0E90                     	;# 
   347  0E91                     	;# 
   348  0E92                     	;# 
   349  0E93                     	;# 
   350  0E94                     	;# 
   351  0E94                     	;# 
   352  0E95                     	;# 
   353  0E96                     	;# 
   354  0E97                     	;# 
   355  0E98                     	;# 
   356  0E99                     	;# 
   357  0E9A                     	;# 
   358  0E9B                     	;# 
   359  0E9C                     	;# 
   360  0E9D                     	;# 
   361  0E9E                     	;# 
   362  0E9F                     	;# 
   363  0FE4                     	;# 
   364  0FE5                     	;# 
   365  0FE6                     	;# 
   366  0FE7                     	;# 
   367  0FE8                     	;# 
   368  0FE9                     	;# 
   369  0FEA                     	;# 
   370  0FEB                     	;# 
   371  0FED                     	;# 
   372  0FEE                     	;# 
   373  0FEF                     	;# 
   374  0000                     	;# 
   375  0001                     	;# 
   376  0002                     	;# 
   377  0003                     	;# 
   378  0004                     	;# 
   379  0005                     	;# 
   380  0006                     	;# 
   381  0007                     	;# 
   382  0008                     	;# 
   383  0009                     	;# 
   384  000A                     	;# 
   385  000B                     	;# 
   386  000C                     	;# 
   387  000D                     	;# 
   388  000E                     	;# 
   389  0011                     	;# 
   390  0012                     	;# 
   391  0015                     	;# 
   392  0016                     	;# 
   393  0016                     	;# 
   394  0017                     	;# 
   395  0018                     	;# 
   396  0019                     	;# 
   397  001A                     	;# 
   398  001B                     	;# 
   399  001C                     	;# 
   400  008C                     	;# 
   401  008D                     	;# 
   402  008E                     	;# 
   403  0091                     	;# 
   404  0092                     	;# 
   405  0095                     	;# 
   406  0096                     	;# 
   407  0097                     	;# 
   408  0098                     	;# 
   409  0099                     	;# 
   410  009A                     	;# 
   411  009B                     	;# 
   412  009B                     	;# 
   413  009C                     	;# 
   414  009D                     	;# 
   415  009E                     	;# 
   416  009F                     	;# 
   417  010C                     	;# 
   418  010D                     	;# 
   419  010E                     	;# 
   420  0111                     	;# 
   421  0112                     	;# 
   422  0113                     	;# 
   423  0114                     	;# 
   424  0115                     	;# 
   425  0116                     	;# 
   426  0117                     	;# 
   427  0118                     	;# 
   428  0119                     	;# 
   429  011D                     	;# 
   430  018C                     	;# 
   431  018D                     	;# 
   432  018E                     	;# 
   433  0191                     	;# 
   434  0191                     	;# 
   435  0192                     	;# 
   436  0193                     	;# 
   437  0193                     	;# 
   438  0194                     	;# 
   439  0195                     	;# 
   440  0196                     	;# 
   441  0199                     	;# 
   442  019A                     	;# 
   443  019B                     	;# 
   444  019B                     	;# 
   445  019C                     	;# 
   446  019D                     	;# 
   447  019E                     	;# 
   448  019F                     	;# 
   449  020C                     	;# 
   450  020D                     	;# 
   451  0211                     	;# 
   452  0211                     	;# 
   453  0212                     	;# 
   454  0212                     	;# 
   455  0213                     	;# 
   456  0213                     	;# 
   457  0214                     	;# 
   458  0214                     	;# 
   459  0215                     	;# 
   460  0215                     	;# 
   461  0215                     	;# 
   462  0216                     	;# 
   463  0216                     	;# 
   464  0217                     	;# 
   465  0217                     	;# 
   466  0391                     	;# 
   467  0392                     	;# 
   468  0393                     	;# 
   469  0394                     	;# 
   470  0395                     	;# 
   471  0396                     	;# 
   472  039A                     	;# 
   473  039B                     	;# 
   474  0611                     	;# 
   475  0612                     	;# 
   476  0613                     	;# 
   477  0613                     	;# 
   478  0614                     	;# 
   479  0615                     	;# 
   480  0616                     	;# 
   481  0616                     	;# 
   482  0691                     	;# 
   483  0692                     	;# 
   484  0693                     	;# 
   485  0694                     	;# 
   486  0695                     	;# 
   487  0E8E                     	;# 
   488  0E8F                     	;# 
   489  0E90                     	;# 
   490  0E91                     	;# 
   491  0E92                     	;# 
   492  0E93                     	;# 
   493  0E94                     	;# 
   494  0E94                     	;# 
   495  0E95                     	;# 
   496  0E96                     	;# 
   497  0E97                     	;# 
   498  0E98                     	;# 
   499  0E99                     	;# 
   500  0E9A                     	;# 
   501  0E9B                     	;# 
   502  0E9C                     	;# 
   503  0E9D                     	;# 
   504  0E9E                     	;# 
   505  0E9F                     	;# 
   506  0FE4                     	;# 
   507  0FE5                     	;# 
   508  0FE6                     	;# 
   509  0FE7                     	;# 
   510  0FE8                     	;# 
   511  0FE9                     	;# 
   512  0FEA                     	;# 
   513  0FEB                     	;# 
   514  0FED                     	;# 
   515  0FEE                     	;# 
   516  0FEF                     	;# 
   517  0000                     	;# 
   518  0001                     	;# 
   519  0002                     	;# 
   520  0003                     	;# 
   521  0004                     	;# 
   522  0005                     	;# 
   523  0006                     	;# 
   524  0007                     	;# 
   525  0008                     	;# 
   526  0009                     	;# 
   527  000A                     	;# 
   528  000B                     	;# 
   529  000C                     	;# 
   530  000D                     	;# 
   531  000E                     	;# 
   532  0011                     	;# 
   533  0012                     	;# 
   534  0015                     	;# 
   535  0016                     	;# 
   536  0016                     	;# 
   537  0017                     	;# 
   538  0018                     	;# 
   539  0019                     	;# 
   540  001A                     	;# 
   541  001B                     	;# 
   542  001C                     	;# 
   543  008C                     	;# 
   544  008D                     	;# 
   545  008E                     	;# 
   546  0091                     	;# 
   547  0092                     	;# 
   548  0095                     	;# 
   549  0096                     	;# 
   550  0097                     	;# 
   551  0098                     	;# 
   552  0099                     	;# 
   553  009A                     	;# 
   554  009B                     	;# 
   555  009B                     	;# 
   556  009C                     	;# 
   557  009D                     	;# 
   558  009E                     	;# 
   559  009F                     	;# 
   560  010C                     	;# 
   561  010D                     	;# 
   562  010E                     	;# 
   563  0111                     	;# 
   564  0112                     	;# 
   565  0113                     	;# 
   566  0114                     	;# 
   567  0115                     	;# 
   568  0116                     	;# 
   569  0117                     	;# 
   570  0118                     	;# 
   571  0119                     	;# 
   572  011D                     	;# 
   573  018C                     	;# 
   574  018D                     	;# 
   575  018E                     	;# 
   576  0191                     	;# 
   577  0191                     	;# 
   578  0192                     	;# 
   579  0193                     	;# 
   580  0193                     	;# 
   581  0194                     	;# 
   582  0195                     	;# 
   583  0196                     	;# 
   584  0199                     	;# 
   585  019A                     	;# 
   586  019B                     	;# 
   587  019B                     	;# 
   588  019C                     	;# 
   589  019D                     	;# 
   590  019E                     	;# 
   591  019F                     	;# 
   592  020C                     	;# 
   593  020D                     	;# 
   594  0211                     	;# 
   595  0211                     	;# 
   596  0212                     	;# 
   597  0212                     	;# 
   598  0213                     	;# 
   599  0213                     	;# 
   600  0214                     	;# 
   601  0214                     	;# 
   602  0215                     	;# 
   603  0215                     	;# 
   604  0215                     	;# 
   605  0216                     	;# 
   606  0216                     	;# 
   607  0217                     	;# 
   608  0217                     	;# 
   609  0391                     	;# 
   610  0392                     	;# 
   611  0393                     	;# 
   612  0394                     	;# 
   613  0395                     	;# 
   614  0396                     	;# 
   615  039A                     	;# 
   616  039B                     	;# 
   617  0611                     	;# 
   618  0612                     	;# 
   619  0613                     	;# 
   620  0613                     	;# 
   621  0614                     	;# 
   622  0615                     	;# 
   623  0616                     	;# 
   624  0616                     	;# 
   625  0691                     	;# 
   626  0692                     	;# 
   627  0693                     	;# 
   628  0694                     	;# 
   629  0695                     	;# 
   630  0E8E                     	;# 
   631  0E8F                     	;# 
   632  0E90                     	;# 
   633  0E91                     	;# 
   634  0E92                     	;# 
   635  0E93                     	;# 
   636  0E94                     	;# 
   637  0E94                     	;# 
   638  0E95                     	;# 
   639  0E96                     	;# 
   640  0E97                     	;# 
   641  0E98                     	;# 
   642  0E99                     	;# 
   643  0E9A                     	;# 
   644  0E9B                     	;# 
   645  0E9C                     	;# 
   646  0E9D                     	;# 
   647  0E9E                     	;# 
   648  0E9F                     	;# 
   649  0FE4                     	;# 
   650  0FE5                     	;# 
   651  0FE6                     	;# 
   652  0FE7                     	;# 
   653  0FE8                     	;# 
   654  0FE9                     	;# 
   655  0FEA                     	;# 
   656  0FEB                     	;# 
   657  0FED                     	;# 
   658  0FEE                     	;# 
   659  0FEF                     	;# 
   660  0000                     	;# 
   661  0001                     	;# 
   662  0002                     	;# 
   663  0003                     	;# 
   664  0004                     	;# 
   665  0005                     	;# 
   666  0006                     	;# 
   667  0007                     	;# 
   668  0008                     	;# 
   669  0009                     	;# 
   670  000A                     	;# 
   671  000B                     	;# 
   672  000C                     	;# 
   673  000D                     	;# 
   674  000E                     	;# 
   675  0011                     	;# 
   676  0012                     	;# 
   677  0015                     	;# 
   678  0016                     	;# 
   679  0016                     	;# 
   680  0017                     	;# 
   681  0018                     	;# 
   682  0019                     	;# 
   683  001A                     	;# 
   684  001B                     	;# 
   685  001C                     	;# 
   686  008C                     	;# 
   687  008D                     	;# 
   688  008E                     	;# 
   689  0091                     	;# 
   690  0092                     	;# 
   691  0095                     	;# 
   692  0096                     	;# 
   693  0097                     	;# 
   694  0098                     	;# 
   695  0099                     	;# 
   696  009A                     	;# 
   697  009B                     	;# 
   698  009B                     	;# 
   699  009C                     	;# 
   700  009D                     	;# 
   701  009E                     	;# 
   702  009F                     	;# 
   703  010C                     	;# 
   704  010D                     	;# 
   705  010E                     	;# 
   706  0111                     	;# 
   707  0112                     	;# 
   708  0113                     	;# 
   709  0114                     	;# 
   710  0115                     	;# 
   711  0116                     	;# 
   712  0117                     	;# 
   713  0118                     	;# 
   714  0119                     	;# 
   715  011D                     	;# 
   716  018C                     	;# 
   717  018D                     	;# 
   718  018E                     	;# 
   719  0191                     	;# 
   720  0191                     	;# 
   721  0192                     	;# 
   722  0193                     	;# 
   723  0193                     	;# 
   724  0194                     	;# 
   725  0195                     	;# 
   726  0196                     	;# 
   727  0199                     	;# 
   728  019A                     	;# 
   729  019B                     	;# 
   730  019B                     	;# 
   731  019C                     	;# 
   732  019D                     	;# 
   733  019E                     	;# 
   734  019F                     	;# 
   735  020C                     	;# 
   736  020D                     	;# 
   737  0211                     	;# 
   738  0211                     	;# 
   739  0212                     	;# 
   740  0212                     	;# 
   741  0213                     	;# 
   742  0213                     	;# 
   743  0214                     	;# 
   744  0214                     	;# 
   745  0215                     	;# 
   746  0215                     	;# 
   747  0215                     	;# 
   748  0216                     	;# 
   749  0216                     	;# 
   750  0217                     	;# 
   751  0217                     	;# 
   752  0391                     	;# 
   753  0392                     	;# 
   754  0393                     	;# 
   755  0394                     	;# 
   756  0395                     	;# 
   757  0396                     	;# 
   758  039A                     	;# 
   759  039B                     	;# 
   760  0611                     	;# 
   761  0612                     	;# 
   762  0613                     	;# 
   763  0613                     	;# 
   764  0614                     	;# 
   765  0615                     	;# 
   766  0616                     	;# 
   767  0616                     	;# 
   768  0691                     	;# 
   769  0692                     	;# 
   770  0693                     	;# 
   771  0694                     	;# 
   772  0695                     	;# 
   773  0E8E                     	;# 
   774  0E8F                     	;# 
   775  0E90                     	;# 
   776  0E91                     	;# 
   777  0E92                     	;# 
   778  0E93                     	;# 
   779  0E94                     	;# 
   780  0E94                     	;# 
   781  0E95                     	;# 
   782  0E96                     	;# 
   783  0E97                     	;# 
   784  0E98                     	;# 
   785  0E99                     	;# 
   786  0E9A                     	;# 
   787  0E9B                     	;# 
   788  0E9C                     	;# 
   789  0E9D                     	;# 
   790  0E9E                     	;# 
   791  0E9F                     	;# 
   792  0FE4                     	;# 
   793  0FE5                     	;# 
   794  0FE6                     	;# 
   795  0FE7                     	;# 
   796  0FE8                     	;# 
   797  0FE9                     	;# 
   798  0FEA                     	;# 
   799  0FEB                     	;# 
   800  0FED                     	;# 
   801  0FEE                     	;# 
   802  0FEF                     	;# 
   803  0000                     	;# 
   804  0001                     	;# 
   805  0002                     	;# 
   806  0003                     	;# 
   807  0004                     	;# 
   808  0005                     	;# 
   809  0006                     	;# 
   810  0007                     	;# 
   811  0008                     	;# 
   812  0009                     	;# 
   813  000A                     	;# 
   814  000B                     	;# 
   815  000C                     	;# 
   816  000D                     	;# 
   817  000E                     	;# 
   818  0011                     	;# 
   819  0012                     	;# 
   820  0015                     	;# 
   821  0016                     	;# 
   822  0016                     	;# 
   823  0017                     	;# 
   824  0018                     	;# 
   825  0019                     	;# 
   826  001A                     	;# 
   827  001B                     	;# 
   828  001C                     	;# 
   829  008C                     	;# 
   830  008D                     	;# 
   831  008E                     	;# 
   832  0091                     	;# 
   833  0092                     	;# 
   834  0095                     	;# 
   835  0096                     	;# 
   836  0097                     	;# 
   837  0098                     	;# 
   838  0099                     	;# 
   839  009A                     	;# 
   840  009B                     	;# 
   841  009B                     	;# 
   842  009C                     	;# 
   843  009D                     	;# 
   844  009E                     	;# 
   845  009F                     	;# 
   846  010C                     	;# 
   847  010D                     	;# 
   848  010E                     	;# 
   849  0111                     	;# 
   850  0112                     	;# 
   851  0113                     	;# 
   852  0114                     	;# 
   853  0115                     	;# 
   854  0116                     	;# 
   855  0117                     	;# 
   856  0118                     	;# 
   857  0119                     	;# 
   858  011D                     	;# 
   859  018C                     	;# 
   860  018D                     	;# 
   861  018E                     	;# 
   862  0191                     	;# 
   863  0191                     	;# 
   864  0192                     	;# 
   865  0193                     	;# 
   866  0193                     	;# 
   867  0194                     	;# 
   868  0195                     	;# 
   869  0196                     	;# 
   870  0199                     	;# 
   871  019A                     	;# 
   872  019B                     	;# 
   873  019B                     	;# 
   874  019C                     	;# 
   875  019D                     	;# 
   876  019E                     	;# 
   877  019F                     	;# 
   878  020C                     	;# 
   879  020D                     	;# 
   880  0211                     	;# 
   881  0211                     	;# 
   882  0212                     	;# 
   883  0212                     	;# 
   884  0213                     	;# 
   885  0213                     	;# 
   886  0214                     	;# 
   887  0214                     	;# 
   888  0215                     	;# 
   889  0215                     	;# 
   890  0215                     	;# 
   891  0216                     	;# 
   892  0216                     	;# 
   893  0217                     	;# 
   894  0217                     	;# 
   895  0391                     	;# 
   896  0392                     	;# 
   897  0393                     	;# 
   898  0394                     	;# 
   899  0395                     	;# 
   900  0396                     	;# 
   901  039A                     	;# 
   902  039B                     	;# 
   903  0611                     	;# 
   904  0612                     	;# 
   905  0613                     	;# 
   906  0613                     	;# 
   907  0614                     	;# 
   908  0615                     	;# 
   909  0616                     	;# 
   910  0616                     	;# 
   911  0691                     	;# 
   912  0692                     	;# 
   913  0693                     	;# 
   914  0694                     	;# 
   915  0695                     	;# 
   916  0E8E                     	;# 
   917  0E8F                     	;# 
   918  0E90                     	;# 
   919  0E91                     	;# 
   920  0E92                     	;# 
   921  0E93                     	;# 
   922  0E94                     	;# 
   923  0E94                     	;# 
   924  0E95                     	;# 
   925  0E96                     	;# 
   926  0E97                     	;# 
   927  0E98                     	;# 
   928  0E99                     	;# 
   929  0E9A                     	;# 
   930  0E9B                     	;# 
   931  0E9C                     	;# 
   932  0E9D                     	;# 
   933  0E9E                     	;# 
   934  0E9F                     	;# 
   935  0FE4                     	;# 
   936  0FE5                     	;# 
   937  0FE6                     	;# 
   938  0FE7                     	;# 
   939  0FE8                     	;# 
   940  0FE9                     	;# 
   941  0FEA                     	;# 
   942  0FEB                     	;# 
   943  0FED                     	;# 
   944  0FEE                     	;# 
   945  0FEF                     	;# 
   946  0000                     	;# 
   947  0001                     	;# 
   948  0002                     	;# 
   949  0003                     	;# 
   950  0004                     	;# 
   951  0005                     	;# 
   952  0006                     	;# 
   953  0007                     	;# 
   954  0008                     	;# 
   955  0009                     	;# 
   956  000A                     	;# 
   957  000B                     	;# 
   958  000C                     	;# 
   959  000D                     	;# 
   960  000E                     	;# 
   961  0011                     	;# 
   962  0012                     	;# 
   963  0015                     	;# 
   964  0016                     	;# 
   965  0016                     	;# 
   966  0017                     	;# 
   967  0018                     	;# 
   968  0019                     	;# 
   969  001A                     	;# 
   970  001B                     	;# 
   971  001C                     	;# 
   972  008C                     	;# 
   973  008D                     	;# 
   974  008E                     	;# 
   975  0091                     	;# 
   976  0092                     	;# 
   977  0095                     	;# 
   978  0096                     	;# 
   979  0097                     	;# 
   980  0098                     	;# 
   981  0099                     	;# 
   982  009A                     	;# 
   983  009B                     	;# 
   984  009B                     	;# 
   985  009C                     	;# 
   986  009D                     	;# 
   987  009E                     	;# 
   988  009F                     	;# 
   989  010C                     	;# 
   990  010D                     	;# 
   991  010E                     	;# 
   992  0111                     	;# 
   993  0112                     	;# 
   994  0113                     	;# 
   995  0114                     	;# 
   996  0115                     	;# 
   997  0116                     	;# 
   998  0117                     	;# 
   999  0118                     	;# 
  1000  0119                     	;# 
  1001  011D                     	;# 
  1002  018C                     	;# 
  1003  018D                     	;# 
  1004  018E                     	;# 
  1005  0191                     	;# 
  1006  0191                     	;# 
  1007  0192                     	;# 
  1008  0193                     	;# 
  1009  0193                     	;# 
  1010  0194                     	;# 
  1011  0195                     	;# 
  1012  0196                     	;# 
  1013  0199                     	;# 
  1014  019A                     	;# 
  1015  019B                     	;# 
  1016  019B                     	;# 
  1017  019C                     	;# 
  1018  019D                     	;# 
  1019  019E                     	;# 
  1020  019F                     	;# 
  1021  020C                     	;# 
  1022  020D                     	;# 
  1023  0211                     	;# 
  1024  0211                     	;# 
  1025  0212                     	;# 
  1026  0212                     	;# 
  1027  0213                     	;# 
  1028  0213                     	;# 
  1029  0214                     	;# 
  1030  0214                     	;# 
  1031  0215                     	;# 
  1032  0215                     	;# 
  1033  0215                     	;# 
  1034  0216                     	;# 
  1035  0216                     	;# 
  1036  0217                     	;# 
  1037  0217                     	;# 
  1038  0391                     	;# 
  1039  0392                     	;# 
  1040  0393                     	;# 
  1041  0394                     	;# 
  1042  0395                     	;# 
  1043  0396                     	;# 
  1044  039A                     	;# 
  1045  039B                     	;# 
  1046  0611                     	;# 
  1047  0612                     	;# 
  1048  0613                     	;# 
  1049  0613                     	;# 
  1050  0614                     	;# 
  1051  0615                     	;# 
  1052  0616                     	;# 
  1053  0616                     	;# 
  1054  0691                     	;# 
  1055  0692                     	;# 
  1056  0693                     	;# 
  1057  0694                     	;# 
  1058  0695                     	;# 
  1059  0E8E                     	;# 
  1060  0E8F                     	;# 
  1061  0E90                     	;# 
  1062  0E91                     	;# 
  1063  0E92                     	;# 
  1064  0E93                     	;# 
  1065  0E94                     	;# 
  1066  0E94                     	;# 
  1067  0E95                     	;# 
  1068  0E96                     	;# 
  1069  0E97                     	;# 
  1070  0E98                     	;# 
  1071  0E99                     	;# 
  1072  0E9A                     	;# 
  1073  0E9B                     	;# 
  1074  0E9C                     	;# 
  1075  0E9D                     	;# 
  1076  0E9E                     	;# 
  1077  0E9F                     	;# 
  1078  0FE4                     	;# 
  1079  0FE5                     	;# 
  1080  0FE6                     	;# 
  1081  0FE7                     	;# 
  1082  0FE8                     	;# 
  1083  0FE9                     	;# 
  1084  0FEA                     	;# 
  1085  0FEB                     	;# 
  1086  0FED                     	;# 
  1087  0FEE                     	;# 
  1088  0FEF                     	;# 
  1089  0000                     	;# 
  1090  0001                     	;# 
  1091  0002                     	;# 
  1092  0003                     	;# 
  1093  0004                     	;# 
  1094  0005                     	;# 
  1095  0006                     	;# 
  1096  0007                     	;# 
  1097  0008                     	;# 
  1098  0009                     	;# 
  1099  000A                     	;# 
  1100  000B                     	;# 
  1101  000C                     	;# 
  1102  000D                     	;# 
  1103  000E                     	;# 
  1104  0011                     	;# 
  1105  0012                     	;# 
  1106  0015                     	;# 
  1107  0016                     	;# 
  1108  0016                     	;# 
  1109  0017                     	;# 
  1110  0018                     	;# 
  1111  0019                     	;# 
  1112  001A                     	;# 
  1113  001B                     	;# 
  1114  001C                     	;# 
  1115  008C                     	;# 
  1116  008D                     	;# 
  1117  008E                     	;# 
  1118  0091                     	;# 
  1119  0092                     	;# 
  1120  0095                     	;# 
  1121  0096                     	;# 
  1122  0097                     	;# 
  1123  0098                     	;# 
  1124  0099                     	;# 
  1125  009A                     	;# 
  1126  009B                     	;# 
  1127  009B                     	;# 
  1128  009C                     	;# 
  1129  009D                     	;# 
  1130  009E                     	;# 
  1131  009F                     	;# 
  1132  010C                     	;# 
  1133  010D                     	;# 
  1134  010E                     	;# 
  1135  0111                     	;# 
  1136  0112                     	;# 
  1137  0113                     	;# 
  1138  0114                     	;# 
  1139  0115                     	;# 
  1140  0116                     	;# 
  1141  0117                     	;# 
  1142  0118                     	;# 
  1143  0119                     	;# 
  1144  011D                     	;# 
  1145  018C                     	;# 
  1146  018D                     	;# 
  1147  018E                     	;# 
  1148  0191                     	;# 
  1149  0191                     	;# 
  1150  0192                     	;# 
  1151  0193                     	;# 
  1152  0193                     	;# 
  1153  0194                     	;# 
  1154  0195                     	;# 
  1155  0196                     	;# 
  1156  0199                     	;# 
  1157  019A                     	;# 
  1158  019B                     	;# 
  1159  019B                     	;# 
  1160  019C                     	;# 
  1161  019D                     	;# 
  1162  019E                     	;# 
  1163  019F                     	;# 
  1164  020C                     	;# 
  1165  020D                     	;# 
  1166  0211                     	;# 
  1167  0211                     	;# 
  1168  0212                     	;# 
  1169  0212                     	;# 
  1170  0213                     	;# 
  1171  0213                     	;# 
  1172  0214                     	;# 
  1173  0214                     	;# 
  1174  0215                     	;# 
  1175  0215                     	;# 
  1176  0215                     	;# 
  1177  0216                     	;# 
  1178  0216                     	;# 
  1179  0217                     	;# 
  1180  0217                     	;# 
  1181  0391                     	;# 
  1182  0392                     	;# 
  1183  0393                     	;# 
  1184  0394                     	;# 
  1185  0395                     	;# 
  1186  0396                     	;# 
  1187  039A                     	;# 
  1188  039B                     	;# 
  1189  0611                     	;# 
  1190  0612                     	;# 
  1191  0613                     	;# 
  1192  0613                     	;# 
  1193  0614                     	;# 
  1194  0615                     	;# 
  1195  0616                     	;# 
  1196  0616                     	;# 
  1197  0691                     	;# 
  1198  0692                     	;# 
  1199  0693                     	;# 
  1200  0694                     	;# 
  1201  0695                     	;# 
  1202  0E8E                     	;# 
  1203  0E8F                     	;# 
  1204  0E90                     	;# 
  1205  0E91                     	;# 
  1206  0E92                     	;# 
  1207  0E93                     	;# 
  1208  0E94                     	;# 
  1209  0E94                     	;# 
  1210  0E95                     	;# 
  1211  0E96                     	;# 
  1212  0E97                     	;# 
  1213  0E98                     	;# 
  1214  0E99                     	;# 
  1215  0E9A                     	;# 
  1216  0E9B                     	;# 
  1217  0E9C                     	;# 
  1218  0E9D                     	;# 
  1219  0E9E                     	;# 
  1220  0E9F                     	;# 
  1221  0FE4                     	;# 
  1222  0FE5                     	;# 
  1223  0FE6                     	;# 
  1224  0FE7                     	;# 
  1225  0FE8                     	;# 
  1226  0FE9                     	;# 
  1227  0FEA                     	;# 
  1228  0FEB                     	;# 
  1229  0FED                     	;# 
  1230  0FEE                     	;# 
  1231  0FEF                     	;_buffer
  1232                           
  1233                           	psect	idataBANK1
  1234  0FDC                     __pidataBANK1:	
  1235                           
  1236                           ;initializer for _writeData
  1237  0FDC  3473               	retlw	115
  1238  0FDD  346D               	retlw	109
  1239  0FDE  3461               	retlw	97
  1240  0FDF  3472               	retlw	114
  1241  0FE0  3474               	retlw	116
  1242  0FE1  344C               	retlw	76
  1243  0FE2  3441               	retlw	65
  1244  0FE3  3442               	retlw	66
  1245  0FE4  3400               	retlw	0
  1246                           
  1247                           ;initializer for _key
  1248  0FE5  34FF               	retlw	255
  1249  0FE6  34FF               	retlw	255
  1250  0FE7  34FF               	retlw	255
  1251  0FE8  34FF               	retlw	255
  1252  0FE9  34FF               	retlw	255
  1253  0FEA  34FF               	retlw	255
  1254                           
  1255                           ;initializer for main@F3013
  1256  0FEB  3400               	retlw	0
  1257  0FEC  3401               	retlw	1
  1258  0FED  3400               	retlw	0
  1259  0FEE  3403               	retlw	3
  1260  0FEF  340D               	retlw	13
  1261                           
  1262                           ;initializer for _GTSN4
  1263  0FF0  3470               	retlw	112
  1264  0FF1  3415               	retlw	21
  1265  0FF2  34A3               	retlw	163
  1266  0FF3  342B               	retlw	43
  1267                           
  1268                           ;initializer for _GTSN3
  1269  0FF4  3470               	retlw	112
  1270  0FF5  34EB               	retlw	235
  1271  0FF6  34B7               	retlw	183
  1272  0FF7  342B               	retlw	43
  1273                           
  1274                           ;initializer for _GTSN2
  1275  0FF8  340C               	retlw	12
  1276  0FF9  3409               	retlw	9
  1277  0FFA  3452               	retlw	82
  1278  0FFB  34A3               	retlw	163
  1279                           
  1280                           ;initializer for _GTSN1
  1281  0FFC  347B               	retlw	123
  1282  0FFD  34B3               	retlw	179
  1283  0FFE  3452               	retlw	82
  1284  0FFF  34C3               	retlw	195
  1285                           
  1286                           	psect	stringtext1
  1287  0624                     __pstringtext1:	
  1288  0624                     _FM17522_firmware_reference:	
  1289  0624  3400               	retlw	0
  1290  0625  34D6               	retlw	214
  1291  0626  3478               	retlw	120
  1292  0627  348C               	retlw	140
  1293  0628  34E2               	retlw	226
  1294  0629  34AA               	retlw	170
  1295  062A  340C               	retlw	12
  1296  062B  3418               	retlw	24
  1297  062C  342A               	retlw	42
  1298  062D  34B8               	retlw	184
  1299  062E  347A               	retlw	122
  1300  062F  347F               	retlw	127
  1301  0630  34D3               	retlw	211
  1302  0631  346A               	retlw	106
  1303  0632  34CF               	retlw	207
  1304  0633  340B               	retlw	11
  1305  0634  34B1               	retlw	177
  1306  0635  3437               	retlw	55
  1307  0636  3463               	retlw	99
  1308  0637  344B               	retlw	75
  1309  0638  3469               	retlw	105
  1310  0639  34AE               	retlw	174
  1311  063A  3491               	retlw	145
  1312  063B  34C7               	retlw	199
  1313  063C  34C3               	retlw	195
  1314  063D  3497               	retlw	151
  1315  063E  34AE               	retlw	174
  1316  063F  3477               	retlw	119
  1317  0640  34F4               	retlw	244
  1318  0641  3437               	retlw	55
  1319  0642  34D7               	retlw	215
  1320  0643  349B               	retlw	155
  1321  0644  347C               	retlw	124
  1322  0645  34F5               	retlw	245
  1323  0646  343C               	retlw	60
  1324  0647  3411               	retlw	17
  1325  0648  348F               	retlw	143
  1326  0649  3415               	retlw	21
  1327  064A  34C3               	retlw	195
  1328  064B  34D7               	retlw	215
  1329  064C  34C1               	retlw	193
  1330  064D  345B               	retlw	91
  1331  064E  3400               	retlw	0
  1332  064F  342A               	retlw	42
  1333  0650  34D0               	retlw	208
  1334  0651  3475               	retlw	117
  1335  0652  34DE               	retlw	222
  1336  0653  349E               	retlw	158
  1337  0654  3451               	retlw	81
  1338  0655  3464               	retlw	100
  1339  0656  34AB               	retlw	171
  1340  0657  343E               	retlw	62
  1341  0658  34E9               	retlw	233
  1342  0659  3415               	retlw	21
  1343  065A  34B5               	retlw	181
  1344  065B  34AB               	retlw	171
  1345  065C  3456               	retlw	86
  1346  065D  349A               	retlw	154
  1347  065E  3498               	retlw	152
  1348  065F  3482               	retlw	130
  1349  0660  3426               	retlw	38
  1350  0661  34EA               	retlw	234
  1351  0662  342A               	retlw	42
  1352  0663  3462               	retlw	98
  1353  0664                     __end_of_FM17522_firmware_reference:	
  1354                           
  1355                           	psect	stringtext2
  1356  0664                     __pstringtext2:	
  1357  0664                     _MFRC522_firmware_referenceV2_0:	
  1358  0664  3400               	retlw	0
  1359  0665  34EB               	retlw	235
  1360  0666  3466               	retlw	102
  1361  0667  34BA               	retlw	186
  1362  0668  3457               	retlw	87
  1363  0669  34BF               	retlw	191
  1364  066A  3423               	retlw	35
  1365  066B  3495               	retlw	149
  1366  066C  34D0               	retlw	208
  1367  066D  34E3               	retlw	227
  1368  066E  340D               	retlw	13
  1369  066F  343D               	retlw	61
  1370  0670  3427               	retlw	39
  1371  0671  3489               	retlw	137
  1372  0672  345C               	retlw	92
  1373  0673  34DE               	retlw	222
  1374  0674  349D               	retlw	157
  1375  0675  343B               	retlw	59
  1376  0676  34A7               	retlw	167
  1377  0677  3400               	retlw	0
  1378  0678  3421               	retlw	33
  1379  0679  345B               	retlw	91
  1380  067A  3489               	retlw	137
  1381  067B  3482               	retlw	130
  1382  067C  3451               	retlw	81
  1383  067D  343A               	retlw	58
  1384  067E  34EB               	retlw	235
  1385  067F  3402               	retlw	2
  1386  0680  340C               	retlw	12
  1387  0681  34A5               	retlw	165
  1388  0682  3400               	retlw	0
  1389  0683  3449               	retlw	73
  1390  0684  347C               	retlw	124
  1391  0685  3484               	retlw	132
  1392  0686  344D               	retlw	77
  1393  0687  34B3               	retlw	179
  1394  0688  34CC               	retlw	204
  1395  0689  34D2               	retlw	210
  1396  068A  341B               	retlw	27
  1397  068B  3481               	retlw	129
  1398  068C  345D               	retlw	93
  1399  068D  3448               	retlw	72
  1400  068E  3476               	retlw	118
  1401  068F  34D5               	retlw	213
  1402  0690  3471               	retlw	113
  1403  0691  3461               	retlw	97
  1404  0692  3421               	retlw	33
  1405  0693  34A9               	retlw	169
  1406  0694  3486               	retlw	134
  1407  0695  3496               	retlw	150
  1408  0696  3483               	retlw	131
  1409  0697  3438               	retlw	56
  1410  0698  34CF               	retlw	207
  1411  0699  349D               	retlw	157
  1412  069A  345B               	retlw	91
  1413  069B  346D               	retlw	109
  1414  069C  34DC               	retlw	220
  1415  069D  3415               	retlw	21
  1416  069E  34BA               	retlw	186
  1417  069F  343E               	retlw	62
  1418  06A0  347D               	retlw	125
  1419  06A1  3495               	retlw	149
  1420  06A2  343B               	retlw	59
  1421  06A3  342F               	retlw	47
  1422  06A4                     __end_of_MFRC522_firmware_referenceV2_0:	
  1423                           
  1424                           	psect	stringtext3
  1425  06A4                     __pstringtext3:	
  1426  06A4                     _MFRC522_firmware_referenceV1_0:	
  1427  06A4  3400               	retlw	0
  1428  06A5  34C6               	retlw	198
  1429  06A6  3437               	retlw	55
  1430  06A7  34D5               	retlw	213
  1431  06A8  3432               	retlw	50
  1432  06A9  34B7               	retlw	183
  1433  06AA  3457               	retlw	87
  1434  06AB  345C               	retlw	92
  1435  06AC  34C2               	retlw	194
  1436  06AD  34D8               	retlw	216
  1437  06AE  347C               	retlw	124
  1438  06AF  344D               	retlw	77
  1439  06B0  34D9               	retlw	217
  1440  06B1  3470               	retlw	112
  1441  06B2  34C7               	retlw	199
  1442  06B3  3473               	retlw	115
  1443  06B4  3410               	retlw	16
  1444  06B5  34E6               	retlw	230
  1445  06B6  34D2               	retlw	210
  1446  06B7  34AA               	retlw	170
  1447  06B8  345E               	retlw	94
  1448  06B9  34A1               	retlw	161
  1449  06BA  343E               	retlw	62
  1450  06BB  345A               	retlw	90
  1451  06BC  3414               	retlw	20
  1452  06BD  34AF               	retlw	175
  1453  06BE  3430               	retlw	48
  1454  06BF  3461               	retlw	97
  1455  06C0  34C9               	retlw	201
  1456  06C1  3470               	retlw	112
  1457  06C2  34DB               	retlw	219
  1458  06C3  342E               	retlw	46
  1459  06C4  3464               	retlw	100
  1460  06C5  3422               	retlw	34
  1461  06C6  3472               	retlw	114
  1462  06C7  34B5               	retlw	181
  1463  06C8  34BD               	retlw	189
  1464  06C9  3465               	retlw	101
  1465  06CA  34F4               	retlw	244
  1466  06CB  34EC               	retlw	236
  1467  06CC  3422               	retlw	34
  1468  06CD  34BC               	retlw	188
  1469  06CE  34D3               	retlw	211
  1470  06CF  3472               	retlw	114
  1471  06D0  3435               	retlw	53
  1472  06D1  34CD               	retlw	205
  1473  06D2  34AA               	retlw	170
  1474  06D3  3441               	retlw	65
  1475  06D4  341F               	retlw	31
  1476  06D5  34A7               	retlw	167
  1477  06D6  34F3               	retlw	243
  1478  06D7  3453               	retlw	83
  1479  06D8  3414               	retlw	20
  1480  06D9  34DE               	retlw	222
  1481  06DA  347E               	retlw	126
  1482  06DB  3402               	retlw	2
  1483  06DC  34D9               	retlw	217
  1484  06DD  340F               	retlw	15
  1485  06DE  34B5               	retlw	181
  1486  06DF  345E               	retlw	94
  1487  06E0  3425               	retlw	37
  1488  06E1  341D               	retlw	29
  1489  06E2  3429               	retlw	41
  1490  06E3  3479               	retlw	121
  1491  06E4                     __end_of_MFRC522_firmware_referenceV1_0:	
  1492                           
  1493                           	psect	stringtext4
  1494  06E4                     __pstringtext4:	
  1495  06E4                     _MFRC522_firmware_referenceV0_0:	
  1496  06E4  3400               	retlw	0
  1497  06E5  3487               	retlw	135
  1498  06E6  3498               	retlw	152
  1499  06E7  340F               	retlw	15
  1500  06E8  3449               	retlw	73
  1501  06E9  34FF               	retlw	255
  1502  06EA  3407               	retlw	7
  1503  06EB  3419               	retlw	25
  1504  06EC  34BF               	retlw	191
  1505  06ED  3422               	retlw	34
  1506  06EE  3430               	retlw	48
  1507  06EF  3449               	retlw	73
  1508  06F0  3459               	retlw	89
  1509  06F1  3463               	retlw	99
  1510  06F2  34AD               	retlw	173
  1511  06F3  34CA               	retlw	202
  1512  06F4  347F               	retlw	127
  1513  06F5  34E3               	retlw	227
  1514  06F6  344E               	retlw	78
  1515  06F7  3403               	retlw	3
  1516  06F8  345C               	retlw	92
  1517  06F9  344E               	retlw	78
  1518  06FA  3449               	retlw	73
  1519  06FB  3450               	retlw	80
  1520  06FC  3447               	retlw	71
  1521  06FD  349A               	retlw	154
  1522  06FE  3437               	retlw	55
  1523  06FF  3461               	retlw	97
  1524  0700  34E7               	retlw	231
  1525  0701  34E2               	retlw	226
  1526  0702  34C6               	retlw	198
  1527  0703  342E               	retlw	46
  1528  0704  3475               	retlw	117
  1529  0705  345A               	retlw	90
  1530  0706  34ED               	retlw	237
  1531  0707  3404               	retlw	4
  1532  0708  343D               	retlw	61
  1533  0709  3402               	retlw	2
  1534  070A  344B               	retlw	75
  1535  070B  3478               	retlw	120
  1536  070C  3432               	retlw	50
  1537  070D  34FF               	retlw	255
  1538  070E  3458               	retlw	88
  1539  070F  343B               	retlw	59
  1540  0710  347C               	retlw	124
  1541  0711  34E9               	retlw	233
  1542  0712  3400               	retlw	0
  1543  0713  3494               	retlw	148
  1544  0714  34B4               	retlw	180
  1545  0715  344A               	retlw	74
  1546  0716  3459               	retlw	89
  1547  0717  345B               	retlw	91
  1548  0718  34FD               	retlw	253
  1549  0719  34C9               	retlw	201
  1550  071A  3429               	retlw	41
  1551  071B  34DF               	retlw	223
  1552  071C  3435               	retlw	53
  1553  071D  3496               	retlw	150
  1554  071E  3498               	retlw	152
  1555  071F  349E               	retlw	158
  1556  0720  344F               	retlw	79
  1557  0721  3430               	retlw	48
  1558  0722  3432               	retlw	50
  1559  0723  348D               	retlw	141
  1560  0724                     __end_of_MFRC522_firmware_referenceV0_0:	
  1561  0011                     _PIR1bits	set	17
  1562  0016                     _TMR1L	set	22
  1563  0017                     _TMR1H	set	23
  1564  0018                     _T1CONbits	set	24
  1565  000C                     _PORTAbits	set	12
  1566  000B                     _INTCONbits	set	11
  1567  008D                     _RCIF	set	141
  1568  0091                     _PIE1bits	set	145
  1569  0099                     _OSCCONbits	set	153
  1570  008C                     _TRISAbits	set	140
  1571  008E                     _TRISCbits	set	142
  1572  008D                     _TRISBbits	set	141
  1573  010E                     _LATCbits	set	270
  1574  010C                     _LATAbits	set	268
  1575  019B                     _SPBRG	set	411
  1576  0199                     _RCREG	set	409
  1577  019A                     _TXREG	set	410
  1578  019D                     _RCSTAbits	set	413
  1579  019F                     _BAUDCONbits	set	415
  1580  019E                     _TXSTAbits	set	414
  1581  018E                     _ANSELC	set	398
  1582  018D                     _ANSELB	set	397
  1583  018C                     _ANSELA	set	396
  1584  0CEC                     _CREN	set	3308
  1585  0CE9                     _OERR	set	3305
  1586  0CF1                     _TRMT	set	3313
  1587  0214                     _SSPSTATbits	set	532
  1588  0211                     _SSPBUF	set	529
  1589  0215                     _SSPCON1bits	set	533
  1590  0392                     _IOCANbits	set	914
  1591  0391                     _IOCAPbits	set	913
  1592  0393                     _IOCAFbits	set	915
  1593                           
  1594                           ; #config settings
  1595  0000                     
  1596                           	psect	cinit
  1597  003F                     start_initialization:	
  1598  003F                     __initialization:		;BIGRAM
  1599                           
  1600                           ; Initialize objects allocated to BANK1
  1601  003F  30DC               	movlw	low __pidataBANK1
  1602  0040  0084               	movwf	4
  1603  0041  308F               	movlw	(high __pidataBANK1)| (0+128)
  1604  0042  0085               	movwf	5
  1605  0043  30A0               	movlw	low __pdataBANK1
  1606  0044  0086               	movwf	6
  1607  0045  3000               	movlw	high __pdataBANK1
  1608  0046  0087               	movwf	7
  1609  0047  3000               	movlw	0
  1610  0048  00FF               	movwf	btemp+1
  1611  0049  3024               	movlw	36
  1612  004A  318E  26F7  3180   	fcall	init_ram
  1613                           
  1614                           ; Clear objects allocated to BIGRAM
  1615  004D  308C               	movlw	low (0+9100)
  1616  004E  0084               	movwf	4
  1617  004F  3023               	movlw	high (0+9100)
  1618  0050  0085               	movwf	5
  1619  0051  3064               	movlw	100
  1620  0052  00FE               	movwf	btemp
  1621  0053  3000               	movlw	0
  1622  0054  00FF               	movwf	btemp+1
  1623  0055  318E  26EB  3180   	fcall	clear_ram0
  1624                           
  1625                           ; Clear objects allocated to COMMON
  1626  0058  01FA               	clrf	__pbssCOMMON& (0+127)
  1627  0059  01FB               	clrf	(__pbssCOMMON+1)& (0+127)
  1628                           
  1629                           ; Clear objects allocated to BANK0
  1630  005A  01EE               	clrf	__pbssBANK0& (0+127)
  1631  005B  01EF               	clrf	(__pbssBANK0+1)& (0+127)
  1632                           
  1633                           ; Clear objects allocated to BANK1
  1634  005C  30C4               	movlw	low __pbssBANK1
  1635  005D  0084               	movwf	4
  1636  005E  3000               	movlw	high __pbssBANK1
  1637  005F  0085               	movwf	5
  1638  0060  300A               	movlw	10
  1639  0061  00FE               	movwf	btemp
  1640  0062  3000               	movlw	0
  1641  0063  00FF               	movwf	btemp+1
  1642  0064  318E  26EB         	fcall	clear_ram0
  1643  0066                     end_of_initialization:	
  1644                           ;End of C runtime variable initialization code
  1645                           
  1646  0066                     __end_of__initialization:	
  1647  0066  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  1648  0067  0020               	movlb	0
  1649  0068  3180  286A         	ljmp	_main	;jump to C main() function
  1650                           
  1651                           	psect	bssCOMMON
  1652  007A                     __pbssCOMMON:	
  1653  007A                     _TMR_CNT:	
  1654  007A                     	ds	1
  1655  007B                     _MUSHROOM_ON:	
  1656  007B                     	ds	1
  1657                           
  1658                           	psect	bssBANK0
  1659  006E                     __pbssBANK0:	
  1660  006E                     _cc:	
  1661  006E                     	ds	1
  1662  006F                     _SW:	
  1663  006F                     	ds	1
  1664                           
  1665                           	psect	bssBANK1
  1666  00C4                     __pbssBANK1:	
  1667  00C4                     main@F3027:	
  1668  00C4                     	ds	5
  1669  00C9                     main@F3021:	
  1670  00C9                     	ds	5
  1671                           
  1672                           	psect	dataBANK1
  1673  00A0                     __pdataBANK1:	
  1674  00A0                     _writeData:	
  1675  00A0                     	ds	9
  1676  00A9                     _key:	
  1677  00A9                     	ds	6
  1678  00AF                     main@F3013:	
  1679  00AF                     	ds	5
  1680  00B4                     _GTSN4:	
  1681  00B4                     	ds	4
  1682  00B8                     _GTSN3:	
  1683  00B8                     	ds	4
  1684  00BC                     _GTSN2:	
  1685  00BC                     	ds	4
  1686  00C0                     _GTSN1:	
  1687  00C0                     	ds	4
  1688                           
  1689                           	psect	inittext
  1690  0EF7                     init_ram:	
  1691  0EF7  00FE               	movwf	126
  1692  0EF8                     initloop:	
  1693  0EF8  0012               	moviw fsr0++
  1694  0EF9  001E               	movwi fsr1++
  1695  0EFA  3001               	movlw	1
  1696  0EFB  02FE               	subwf	126,f
  1697  0EFC  3000               	movlw	0
  1698  0EFD  3BFF               	subwfb	127,f
  1699  0EFE  087F               	movf	127,w
  1700  0EFF  047E               	iorwf	126,w
  1701  0F00  1903               	btfsc	3,2
  1702  0F01  3400               	retlw	0
  1703  0F02  2EF8               	goto	initloop
  1704                           
  1705                           	psect	clrtext
  1706  0EEB                     clear_ram0:	
  1707                           ;	Called with FSR0 containing the base address, and
  1708                           ;	btemp/btemp+1 has the size to clear
  1709                           
  1710  0EEB  0064               	clrwdt	;clear the watchdog before getting into this loop
  1711  0EEC                     clrloop0:	
  1712  0EEC  0180               	clrf	0	;clear RAM location pointed to by FSR
  1713  0EED  3101               	addfsr 0,1
  1714  0EEE  3001               	movlw	1
  1715  0EEF  02FE               	subwf	126,f
  1716  0EF0  3000               	movlw	0
  1717  0EF1  3BFF               	subwfb	127,f
  1718  0EF2  087F               	movf	127,w
  1719  0EF3  047E               	iorwf	126,w
  1720  0EF4  1903               	btfsc	3,2
  1721  0EF5  3400               	retlw	0	;all done for this memory range, return
  1722  0EF6  2EEC               	goto	clrloop0	;have we reached the end yet?
  1723                           
  1724                           	psect	cstackCOMMON
  1725  0070                     __pcstackCOMMON:	
  1726  0070                     ?_ConfigureOscillator:	
  1727  0070                     ?_InitApp:	
  1728                           ; 1 bytes @ 0x0
  1729                           
  1730  0070                     ?_SPI_init:	
  1731                           ; 1 bytes @ 0x0
  1732                           
  1733  0070                     ?_MFRC522_Init:	
  1734                           ; 1 bytes @ 0x0
  1735                           
  1736  0070                     ?_ReadRegister:	
  1737                           ; 1 bytes @ 0x0
  1738                           
  1739  0070                     ?_nRF_Setup_Write:	
  1740                           ; 1 bytes @ 0x0
  1741                           
  1742  0070                     ?_FlushTXRX:	
  1743                           ; 1 bytes @ 0x0
  1744                           
  1745  0070                     ?_MFRC522_isCard:	
  1746                           ; 1 bytes @ 0x0
  1747                           
  1748  0070                     ?_MFRC522_ReadCardSerial:	
  1749                           ; 1 bytes @ 0x0
  1750                           
  1751  0070                     ?_MFRC522_SelectTag:	
  1752                           ; 1 bytes @ 0x0
  1753                           
  1754  0070                     ?_nRF_Setup_Read:	
  1755                           ; 1 bytes @ 0x0
  1756                           
  1757  0070                     ?_nRF_available:	
  1758                           ; 1 bytes @ 0x0
  1759                           
  1760  0070                     ?_MFRC522_Halt:	
  1761                           ; 1 bytes @ 0x0
  1762                           
  1763  0070                     ?_WriteCommand:	
  1764                           ; 1 bytes @ 0x0
  1765                           
  1766  0070                     ?_main:	
  1767                           ; 1 bytes @ 0x0
  1768                           
  1769  0070                     ?_SPI_transfer:	
  1770                           ; 1 bytes @ 0x0
  1771                           
  1772  0070                     ?_MFRC522_Reset:	
  1773                           ; 1 bytes @ 0x0
  1774                           
  1775  0070                     ?_MFRC522_AntennaOn:	
  1776                           ; 1 bytes @ 0x0
  1777                           
  1778  0070                     ?_MFRC522_AntiColl:	
  1779                           ; 1 bytes @ 0x0
  1780                           
  1781  0070                     ?_ReadRegisterRF:	
  1782                           ; 1 bytes @ 0x0
  1783                           
  1784  0070                     ?_isr:	
  1785                           ; 1 bytes @ 0x0
  1786                           
  1787  0070                     ??_isr:	
  1788                           ; 1 bytes @ 0x0
  1789                           
  1790                           
  1791                           ; 1 bytes @ 0x0
  1792  0070                     	ds	2
  1793  0072                     ??_ConfigureOscillator:	
  1794  0072                     ??_InitApp:	
  1795                           ; 1 bytes @ 0x2
  1796                           
  1797  0072                     ??_SPI_init:	
  1798                           ; 1 bytes @ 0x2
  1799                           
  1800  0072                     ??_SPI_transfer:	
  1801                           ; 1 bytes @ 0x2
  1802                           
  1803  0072                     SPI_transfer@data:	
  1804                           ; 1 bytes @ 0x2
  1805                           
  1806                           
  1807                           ; 1 bytes @ 0x2
  1808  0072                     	ds	1
  1809  0073                     ??_ReadRegister:	
  1810  0073                     ?_WriteRegisterRF:	
  1811                           ; 1 bytes @ 0x3
  1812                           
  1813  0073                     ?_WritePayload:	
  1814                           ; 1 bytes @ 0x3
  1815                           
  1816  0073                     ?_ReadPayload:	
  1817                           ; 1 bytes @ 0x3
  1818                           
  1819  0073                     ??_WriteCommand:	
  1820                           ; 1 bytes @ 0x3
  1821                           
  1822  0073                     ?_WriteAddress:	
  1823                           ; 1 bytes @ 0x3
  1824                           
  1825  0073                     ??_ReadRegisterRF:	
  1826                           ; 1 bytes @ 0x3
  1827                           
  1828  0073                     WriteRegisterRF@val:	
  1829                           ; 1 bytes @ 0x3
  1830                           
  1831  0073                     WriteAddress@num:	
  1832                           ; 1 bytes @ 0x3
  1833                           
  1834  0073                     WriteCommand@command:	
  1835                           ; 1 bytes @ 0x3
  1836                           
  1837  0073                     WritePayload@data:	
  1838                           ; 1 bytes @ 0x3
  1839                           
  1840  0073                     ReadPayload@data:	
  1841                           ; 1 bytes @ 0x3
  1842                           
  1843                           
  1844                           ; 1 bytes @ 0x3
  1845  0073                     	ds	1
  1846  0074                     ??_WriteRegisterRF:	
  1847  0074                     ??_WritePayload:	
  1848                           ; 1 bytes @ 0x4
  1849                           
  1850  0074                     ??_ReadPayload:	
  1851                           ; 1 bytes @ 0x4
  1852                           
  1853  0074                     ReadRegister@reg:	
  1854                           ; 1 bytes @ 0x4
  1855                           
  1856  0074                     WriteRegisterRF@reg:	
  1857                           ; 1 bytes @ 0x4
  1858                           
  1859  0074                     WriteAddress@addr:	
  1860                           ; 1 bytes @ 0x4
  1861                           
  1862  0074                     ReadRegisterRF@reg:	
  1863                           ; 1 bytes @ 0x4
  1864                           
  1865                           
  1866                           ; 1 bytes @ 0x4
  1867  0074                     	ds	1
  1868  0075                     ??_FlushTXRX:	
  1869  0075                     ??_WriteAddress:	
  1870                           ; 1 bytes @ 0x5
  1871                           
  1872  0075                     ReadRegister@val:	
  1873                           ; 1 bytes @ 0x5
  1874                           
  1875  0075                     ReadRegisterRF@temp:	
  1876                           ; 1 bytes @ 0x5
  1877                           
  1878  0075                     WritePayload@num:	
  1879                           ; 1 bytes @ 0x5
  1880                           
  1881                           
  1882                           ; 1 bytes @ 0x5
  1883  0075                     	ds	1
  1884  0076                     ?_WriteRegister:	
  1885  0076                     WriteRegister@val:	
  1886                           ; 1 bytes @ 0x6
  1887                           
  1888  0076                     WriteAddress@reg:	
  1889                           ; 1 bytes @ 0x6
  1890                           
  1891  0076                     ReadRegisterRF@temp1:	
  1892                           ; 1 bytes @ 0x6
  1893                           
  1894  0076                     WritePayload@i:	
  1895                           ; 1 bytes @ 0x6
  1896                           
  1897  0076                     ReadPayload@num:	
  1898                           ; 1 bytes @ 0x6
  1899                           
  1900                           
  1901                           ; 1 bytes @ 0x6
  1902  0076                     	ds	1
  1903  0077                     ??_WriteRegister:	
  1904  0077                     ??_nRF_available:	
  1905                           ; 1 bytes @ 0x7
  1906                           
  1907  0077                     WriteRegister@reg:	
  1908                           ; 1 bytes @ 0x7
  1909                           
  1910  0077                     ReadPayload@i:	
  1911                           ; 1 bytes @ 0x7
  1912                           
  1913  0077                     WriteAddress@i:	
  1914                           ; 1 bytes @ 0x7
  1915                           
  1916                           
  1917                           ; 2 bytes @ 0x7
  1918  0077                     	ds	1
  1919  0078                     ?_MFRC522_Clear_Bit:	
  1920  0078                     ?_MFRC522_Set_Bit:	
  1921                           ; 1 bytes @ 0x8
  1922                           
  1923  0078                     ??_MFRC522_Reset:	
  1924                           ; 1 bytes @ 0x8
  1925                           
  1926  0078                     MFRC522_Clear_Bit@mask:	
  1927                           ; 1 bytes @ 0x8
  1928                           
  1929  0078                     MFRC522_Set_Bit@mask:	
  1930                           ; 1 bytes @ 0x8
  1931                           
  1932                           
  1933                           ; 1 bytes @ 0x8
  1934  0078                     	ds	1
  1935  0079                     ??_MFRC522_Set_Bit:	
  1936  0079                     MFRC522_Clear_Bit@addr:	
  1937                           ; 1 bytes @ 0x9
  1938                           
  1939                           
  1940                           ; 1 bytes @ 0x9
  1941  0079                     	ds	1
  1942                           
  1943                           	psect	cstackBANK0
  1944  0020                     __pcstackBANK0:	
  1945  0020                     ??_nRF_Setup_Write:	
  1946  0020                     ??_nRF_Setup_Read:	
  1947                           ; 1 bytes @ 0x0
  1948                           
  1949  0020                     ??_MFRC522_Clear_Bit:	
  1950                           ; 1 bytes @ 0x0
  1951                           
  1952  0020                     MFRC522_Set_Bit@addr:	
  1953                           ; 1 bytes @ 0x0
  1954                           
  1955                           
  1956                           ; 1 bytes @ 0x0
  1957  0020                     	ds	1
  1958  0021                     ??_MFRC522_AntennaOn:	
  1959                           
  1960                           ; 1 bytes @ 0x1
  1961  0021                     	ds	1
  1962  0022                     ??_MFRC522_Init:	
  1963  0022                     ?_MFRC522_ToCard:	
  1964                           ; 1 bytes @ 0x2
  1965                           
  1966  0022                     ?_MFRC522_CRC:	
  1967                           ; 1 bytes @ 0x2
  1968                           
  1969  0022                     MFRC522_ToCard@sendData:	
  1970                           ; 1 bytes @ 0x2
  1971                           
  1972  0022                     MFRC522_CRC@length:	
  1973                           ; 1 bytes @ 0x2
  1974                           
  1975  0022                     nRF_Setup_Write@RXTX_ADDR:	
  1976                           ; 1 bytes @ 0x2
  1977                           
  1978  0022                     nRF_Setup_Read@RXTX_ADDR:	
  1979                           ; 5 bytes @ 0x2
  1980                           
  1981                           
  1982                           ; 5 bytes @ 0x2
  1983  0022                     	ds	1
  1984  0023                     MFRC522_ToCard@sendLen:	
  1985  0023                     MFRC522_CRC@dataOut:	
  1986                           ; 1 bytes @ 0x3
  1987                           
  1988                           
  1989                           ; 1 bytes @ 0x3
  1990  0023                     	ds	1
  1991  0024                     ??_MFRC522_CRC:	
  1992  0024                     MFRC522_ToCard@backData:	
  1993                           ; 1 bytes @ 0x4
  1994                           
  1995                           
  1996                           ; 1 bytes @ 0x4
  1997  0024                     	ds	1
  1998  0025                     MFRC522_ToCard@backLen:	
  1999  0025                     MFRC522_CRC@n:	
  2000                           ; 1 bytes @ 0x5
  2001                           
  2002                           
  2003                           ; 1 bytes @ 0x5
  2004  0025                     	ds	1
  2005  0026                     ??_MFRC522_ToCard:	
  2006  0026                     MFRC522_CRC@dataIn:	
  2007                           ; 1 bytes @ 0x6
  2008                           
  2009                           
  2010                           ; 1 bytes @ 0x6
  2011  0026                     	ds	1
  2012  0027                     MFRC522_CRC@i:	
  2013                           
  2014                           ; 1 bytes @ 0x7
  2015  0027                     	ds	7
  2016  002E                     MFRC522_ToCard@waitIRq:	
  2017                           
  2018                           ; 1 bytes @ 0xE
  2019  002E                     	ds	1
  2020  002F                     MFRC522_ToCard@_status:	
  2021                           
  2022                           ; 1 bytes @ 0xF
  2023  002F                     	ds	1
  2024  0030                     MFRC522_ToCard@lastBits:	
  2025                           
  2026                           ; 1 bytes @ 0x10
  2027  0030                     	ds	1
  2028  0031                     MFRC522_ToCard@irqEn:	
  2029                           
  2030                           ; 1 bytes @ 0x11
  2031  0031                     	ds	1
  2032  0032                     MFRC522_ToCard@command:	
  2033                           
  2034                           ; 1 bytes @ 0x12
  2035  0032                     	ds	1
  2036  0033                     MFRC522_ToCard@i:	
  2037                           
  2038                           ; 2 bytes @ 0x13
  2039  0033                     	ds	2
  2040  0035                     MFRC522_ToCard@n:	
  2041                           
  2042                           ; 1 bytes @ 0x15
  2043  0035                     	ds	1
  2044  0036                     ??_MFRC522_SelectTag:	
  2045  0036                     ??_MFRC522_Halt:	
  2046                           ; 1 bytes @ 0x16
  2047                           
  2048  0036                     ?_MFRC522_Request:	
  2049                           ; 1 bytes @ 0x16
  2050                           
  2051  0036                     ??_MFRC522_AntiColl:	
  2052                           ; 1 bytes @ 0x16
  2053                           
  2054  0036                     MFRC522_Request@TagType:	
  2055                           ; 1 bytes @ 0x16
  2056                           
  2057                           
  2058                           ; 1 bytes @ 0x16
  2059  0036                     	ds	1
  2060  0037                     ??_MFRC522_Request:	
  2061                           
  2062                           ; 1 bytes @ 0x17
  2063  0037                     	ds	3
  2064  003A                     MFRC522_Halt@buff:	
  2065                           
  2066                           ; 4 bytes @ 0x1A
  2067  003A                     	ds	1
  2068  003B                     MFRC522_Request@reqMode:	
  2069  003B                     MFRC522_AntiColl@serNumCheck:	
  2070                           ; 1 bytes @ 0x1B
  2071                           
  2072  003B                     MFRC522_SelectTag@buffer:	
  2073                           ; 1 bytes @ 0x1B
  2074                           
  2075                           
  2076                           ; 9 bytes @ 0x1B
  2077  003B                     	ds	1
  2078  003C                     MFRC522_Request@_status:	
  2079  003C                     MFRC522_AntiColl@unLen:	
  2080                           ; 1 bytes @ 0x1C
  2081                           
  2082                           
  2083                           ; 2 bytes @ 0x1C
  2084  003C                     	ds	1
  2085  003D                     MFRC522_Request@backBits:	
  2086                           
  2087                           ; 2 bytes @ 0x1D
  2088  003D                     	ds	1
  2089  003E                     MFRC522_AntiColl@_status:	
  2090  003E                     MFRC522_Halt@unLen:	
  2091                           ; 1 bytes @ 0x1E
  2092                           
  2093                           
  2094                           ; 2 bytes @ 0x1E
  2095  003E                     	ds	1
  2096  003F                     ??_MFRC522_isCard:	
  2097  003F                     MFRC522_AntiColl@i:	
  2098                           ; 1 bytes @ 0x1F
  2099                           
  2100                           
  2101                           ; 1 bytes @ 0x1F
  2102  003F                     	ds	1
  2103  0040                     MFRC522_AntiColl@serNum:	
  2104  0040                     MFRC522_isCard@TagType:	
  2105                           ; 1 bytes @ 0x20
  2106                           
  2107                           
  2108                           ; 1 bytes @ 0x20
  2109  0040                     	ds	1
  2110  0041                     ??_MFRC522_ReadCardSerial:	
  2111                           
  2112                           ; 1 bytes @ 0x21
  2113  0041                     	ds	1
  2114  0042                     MFRC522_ReadCardSerial@_status:	
  2115                           
  2116                           ; 1 bytes @ 0x22
  2117  0042                     	ds	1
  2118  0043                     MFRC522_ReadCardSerial@str:	
  2119                           
  2120                           ; 1 bytes @ 0x23
  2121  0043                     	ds	1
  2122  0044                     MFRC522_SelectTag@_status:	
  2123                           
  2124                           ; 1 bytes @ 0x24
  2125  0044                     	ds	1
  2126  0045                     MFRC522_SelectTag@serNum:	
  2127                           
  2128                           ; 1 bytes @ 0x25
  2129  0045                     	ds	1
  2130  0046                     MFRC522_SelectTag@size:	
  2131                           
  2132                           ; 1 bytes @ 0x26
  2133  0046                     	ds	1
  2134  0047                     MFRC522_SelectTag@recvBits:	
  2135                           
  2136                           ; 2 bytes @ 0x27
  2137  0047                     	ds	2
  2138  0049                     MFRC522_SelectTag@i:	
  2139                           
  2140                           ; 1 bytes @ 0x29
  2141  0049                     	ds	1
  2142  004A                     ??_main:	
  2143                           
  2144                           ; 1 bytes @ 0x2A
  2145  004A                     	ds	2
  2146  004C                     main@version:	
  2147                           
  2148                           ; 2 bytes @ 0x2C
  2149  004C                     	ds	2
  2150  004E                     main@size:	
  2151                           
  2152                           ; 1 bytes @ 0x2E
  2153  004E                     	ds	1
  2154  004F                     main@data0:	
  2155                           
  2156                           ; 5 bytes @ 0x2F
  2157  004F                     	ds	5
  2158  0054                     main@data2:	
  2159                           
  2160                           ; 5 bytes @ 0x34
  2161  0054                     	ds	5
  2162  0059                     main@data:	
  2163                           
  2164                           ; 5 bytes @ 0x39
  2165  0059                     	ds	5
  2166  005E                     main@goodtag1:	
  2167                           
  2168                           ; 2 bytes @ 0x3E
  2169  005E                     	ds	2
  2170  0060                     main@goodtag2:	
  2171                           
  2172                           ; 2 bytes @ 0x40
  2173  0060                     	ds	2
  2174  0062                     main@goodtag3:	
  2175                           
  2176                           ; 2 bytes @ 0x42
  2177  0062                     	ds	2
  2178  0064                     main@goodtag4:	
  2179                           
  2180                           ; 2 bytes @ 0x44
  2181  0064                     	ds	2
  2182  0066                     main@UID:	
  2183                           
  2184                           ; 6 bytes @ 0x46
  2185  0066                     	ds	6
  2186  006C                     main@TagType:	
  2187                           
  2188                           ; 1 bytes @ 0x4C
  2189  006C                     	ds	1
  2190  006D                     main@i:	
  2191                           
  2192                           ; 1 bytes @ 0x4D
  2193  006D                     	ds	1
  2194                           
  2195                           	psect	maintext
  2196  006A                     __pmaintext:	
  2197 ;;
  2198 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  2199 ;;
  2200 ;; *************** function _main *****************
  2201 ;; Defined at:
  2202 ;;		line 64 in file "try_rfid.c"
  2203 ;; Parameters:    Size  Location     Type
  2204 ;;		None
  2205 ;; Auto vars:     Size  Location     Type
  2206 ;;  data2           5   52[BANK0 ] unsigned char [5]
  2207 ;;  data            5   57[BANK0 ] unsigned char [5]
  2208 ;;  data0           5   47[BANK0 ] unsigned char [5]
  2209 ;;  msg            12    0        unsigned char [12]
  2210 ;;  UID             6   70[BANK0 ] unsigned char [6]
  2211 ;;  goodtag4        2   68[BANK0 ] int 
  2212 ;;  goodtag3        2   66[BANK0 ] int 
  2213 ;;  goodtag2        2   64[BANK0 ] int 
  2214 ;;  goodtag1        2   62[BANK0 ] int 
  2215 ;;  version         2   44[BANK0 ] unsigned int 
  2216 ;;  i               1   77[BANK0 ] unsigned char 
  2217 ;;  TagType         1   76[BANK0 ] unsigned char 
  2218 ;;  size            1   46[BANK0 ] unsigned char 
  2219 ;; Return value:  Size  Location     Type
  2220 ;;                  1    wreg      void 
  2221 ;; Registers used:
  2222 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2223 ;; Tracked objects:
  2224 ;;		On entry : B1F/0
  2225 ;;		On exit  : 0/0
  2226 ;;		Unchanged: 0/0
  2227 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2228 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2229 ;;      Locals:         0      34       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2230 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2231 ;;      Totals:         0      36       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2232 ;;Total ram usage:       36 bytes
  2233 ;; Hardware stack levels required when called:    7
  2234 ;; This function calls:
  2235 ;;		_ConfigureOscillator
  2236 ;;		_FlushTXRX
  2237 ;;		_InitApp
  2238 ;;		_MFRC522_Halt
  2239 ;;		_MFRC522_Init
  2240 ;;		_MFRC522_ReadCardSerial
  2241 ;;		_MFRC522_SelectTag
  2242 ;;		_MFRC522_isCard
  2243 ;;		_ReadPayload
  2244 ;;		_ReadRegister
  2245 ;;		_SPI_init
  2246 ;;		_WritePayload
  2247 ;;		_WriteRegister
  2248 ;;		_WriteRegisterRF
  2249 ;;		_nRF_Setup_Read
  2250 ;;		_nRF_Setup_Write
  2251 ;;		_nRF_available
  2252 ;; This function is called by:
  2253 ;;		Startup code after reset
  2254 ;; This function uses a non-reentrant model
  2255 ;;
  2256                           
  2257                           
  2258                           ;psect for function _main
  2259  006A                     _main:	
  2260                           
  2261                           ;try_rfid.c: 67: ConfigureOscillator();
  2262                           
  2263                           ;incstack = 0
  2264                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2265  006A  318E  26D6  3180   	fcall	_ConfigureOscillator
  2266                           
  2267                           ;try_rfid.c: 71: InitApp();
  2268  006D  318F  279E  3180   	fcall	_InitApp
  2269                           
  2270                           ;try_rfid.c: 73: SPI_init();
  2271  0070  3187  27E2  3180   	fcall	_SPI_init
  2272                           
  2273                           ;try_rfid.c: 78: MFRC522_Init();
  2274  0073  3185  25D3  3180   	fcall	_MFRC522_Init
  2275                           
  2276                           ;try_rfid.c: 85: unsigned version = ReadRegister(0x37);
  2277  0076  3037               	movlw	55
  2278  0077  318F  2760  3180   	fcall	_ReadRegister
  2279  007A  0020               	movlb	0	; select bank0
  2280  007B  00CA               	movwf	??_main
  2281  007C  01CB               	clrf	??_main+1
  2282  007D  084A               	movf	??_main,w
  2283  007E  00CC               	movwf	main@version
  2284  007F  084B               	movf	??_main+1,w
  2285  0080  00CD               	movwf	main@version+1
  2286                           
  2287                           ;try_rfid.c: 87: unsigned char TagType;
  2288                           ;try_rfid.c: 96: int goodtag1;
  2289                           ;try_rfid.c: 97: int goodtag2;
  2290                           ;try_rfid.c: 98: int goodtag3;
  2291                           ;try_rfid.c: 99: int goodtag4;
  2292                           ;try_rfid.c: 101: char size;
  2293                           ;try_rfid.c: 102: char i;
  2294                           ;try_rfid.c: 103: char msg[12];
  2295                           ;try_rfid.c: 104: char UID[6];
  2296                           ;try_rfid.c: 105: SW = 3;
  2297  0081  3003               	movlw	3
  2298  0082  00CA               	movwf	??_main
  2299  0083  084A               	movf	??_main,w
  2300  0084  00EF               	movwf	_SW
  2301                           
  2302                           ;try_rfid.c: 107: INTCONbits.IOCIE = 1;
  2303  0085  158B               	bsf	11,3	;volatile
  2304                           
  2305                           ;try_rfid.c: 108: INTCONbits.IOCIF = 0;
  2306  0086  100B               	bcf	11,0	;volatile
  2307  0087                     l3025:	
  2308                           ;try_rfid.c: 113: while(1)
  2309                           
  2310                           
  2311                           ;try_rfid.c: 115: {
  2312                           ;try_rfid.c: 117: goodtag1=0;
  2313  0087  0020               	movlb	0	; select bank0
  2314  0088  01DE               	clrf	main@goodtag1
  2315  0089  01DF               	clrf	main@goodtag1+1
  2316                           
  2317                           ;try_rfid.c: 118: goodtag2=0;
  2318  008A  01E0               	clrf	main@goodtag2
  2319  008B  01E1               	clrf	main@goodtag2+1
  2320                           
  2321                           ;try_rfid.c: 119: goodtag3=0;
  2322  008C  01E2               	clrf	main@goodtag3
  2323  008D  01E3               	clrf	main@goodtag3+1
  2324                           
  2325                           ;try_rfid.c: 120: goodtag4=0;
  2326  008E  01E4               	clrf	main@goodtag4
  2327  008F  01E5               	clrf	main@goodtag4+1
  2328                           
  2329                           ;try_rfid.c: 143: if ((SW == 1) || (SW == 2) || (SW == 3) || (SW == 4))
  2330  0090  036F               	decf	_SW,w
  2331  0091  1903               	btfsc	3,2
  2332  0092  289F               	goto	l78
  2333  0093  3002               	movlw	2
  2334  0094  066F               	xorwf	_SW,w
  2335  0095  1903               	btfsc	3,2
  2336  0096  289F               	goto	l78
  2337  0097  3003               	movlw	3
  2338  0098  066F               	xorwf	_SW,w
  2339  0099  1903               	btfsc	3,2
  2340  009A  289F               	goto	l78
  2341  009B  3004               	movlw	4
  2342  009C  066F               	xorwf	_SW,w
  2343  009D  1D03               	btfss	3,2
  2344  009E  291C               	goto	l3093
  2345  009F                     l78:	
  2346                           
  2347                           ;try_rfid.c: 144: {
  2348                           ;try_rfid.c: 145: INTCONbits.IOCIE = 0;
  2349  009F  118B               	bcf	11,3	;volatile
  2350                           
  2351                           ;try_rfid.c: 147: LATAbits.LATA4 = 0;
  2352  00A0  0022               	movlb	2	; select bank2
  2353  00A1  120C               	bcf	12,4	;volatile
  2354                           
  2355                           ;try_rfid.c: 148: SPI_init();
  2356  00A2  3187  27E2  3180   	fcall	_SPI_init
  2357                           
  2358                           ;try_rfid.c: 149: nRF_Setup_Write();
  2359  00A5  3183  23AA  3180   	fcall	_nRF_Setup_Write
  2360                           
  2361                           ;try_rfid.c: 150: FlushTXRX();
  2362  00A8  318F  272E  3180   	fcall	_FlushTXRX
  2363                           
  2364                           ;try_rfid.c: 151: WriteRegisterRF(0x07,0x70);
  2365  00AB  3070               	movlw	112
  2366  00AC  0020               	movlb	0	; select bank0
  2367  00AD  00CA               	movwf	??_main
  2368  00AE  084A               	movf	??_main,w
  2369  00AF  00F3               	movwf	WriteRegisterRF@val
  2370  00B0  3007               	movlw	7
  2371  00B1  318F  2703  3180   	fcall	_WriteRegisterRF
  2372                           
  2373                           ;try_rfid.c: 152: _delay((unsigned long)((2)*(8000000L/4000.0)));
  2374  00B4  3006               	movlw	6
  2375  00B5  0020               	movlb	0	; select bank0
  2376  00B6  00CA               	movwf	??_main
  2377  00B7  3030               	movlw	48
  2378  00B8                     u2517:	
  2379  00B8  0B89               	decfsz	9,f
  2380  00B9  28B8               	goto	u2517
  2381  00BA  0BCA               	decfsz	??_main,f
  2382  00BB  28B8               	goto	u2517
  2383  00BC  0000               	nop
  2384                           
  2385                           ;try_rfid.c: 153: LATAbits.LATA4 = 1;
  2386  00BD  0022               	movlb	2	; select bank2
  2387  00BE  160C               	bsf	12,4	;volatile
  2388                           
  2389                           ;try_rfid.c: 154: _delay((unsigned long)((150)*(8000000L/4000000.0)));
  2390  00BF  3064               	movlw	100
  2391  00C0                     u2527:	
  2392  00C0  0B89               	decfsz	9,f
  2393  00C1  28C0               	goto	u2527
  2394                           
  2395                           ;try_rfid.c: 156: uint8_t data0[5] = {0,1,0,3,13};
  2396  00C2  30AF               	movlw	low main@F3013
  2397  00C3  0086               	movwf	6
  2398  00C4  3000               	movlw	high main@F3013
  2399  00C5  0087               	movwf	7
  2400  00C6  304F               	movlw	low main@data0
  2401  00C7  0084               	movwf	4
  2402  00C8  3000               	movlw	high main@data0
  2403  00C9  0085               	movwf	5
  2404  00CA  3005               	movlw	5
  2405  00CB  0020               	movlb	0	; select bank0
  2406  00CC  00CA               	movwf	??_main
  2407  00CD                     u2140:	
  2408  00CD  0016               	moviw fsr1++
  2409  00CE  001A               	movwi fsr0++
  2410  00CF  0BCA               	decfsz	??_main,f
  2411  00D0  28CD               	goto	u2140
  2412                           
  2413                           ;try_rfid.c: 157: data0[0] = 3;
  2414  00D1  3003               	movlw	3
  2415  00D2  00CA               	movwf	??_main
  2416  00D3  084A               	movf	??_main,w
  2417  00D4  00CF               	movwf	main@data0
  2418                           
  2419                           ;try_rfid.c: 158: data0[2] = SW-1;
  2420  00D5  086F               	movf	_SW,w
  2421  00D6  3EFF               	addlw	255
  2422  00D7  00CA               	movwf	??_main
  2423  00D8  084A               	movf	??_main,w
  2424  00D9  00D1               	movwf	main@data0+2
  2425                           
  2426                           ;try_rfid.c: 159: WritePayload(5, data0);
  2427  00DA  304F               	movlw	(low (main@data0| 0))& (0+255)
  2428  00DB  00CA               	movwf	??_main
  2429  00DC  084A               	movf	??_main,w
  2430  00DD  00F3               	movwf	WritePayload@data
  2431  00DE  3005               	movlw	5
  2432  00DF  318F  27B8  3180   	fcall	_WritePayload
  2433                           
  2434                           ;try_rfid.c: 160: _delay((unsigned long)((5)*(8000000L/4000.0)));
  2435  00E2  300D               	movlw	13
  2436  00E3  0020               	movlb	0	; select bank0
  2437  00E4  00CA               	movwf	??_main
  2438  00E5  30FB               	movlw	251
  2439  00E6                     u2537:	
  2440  00E6  0B89               	decfsz	9,f
  2441  00E7  28E6               	goto	u2537
  2442  00E8  0BCA               	decfsz	??_main,f
  2443  00E9  28E6               	goto	u2537
  2444  00EA  3200               	nop2
  2445                           
  2446                           ;try_rfid.c: 161: FlushTXRX();
  2447  00EB  318F  272E  3180   	fcall	_FlushTXRX
  2448                           
  2449                           ;try_rfid.c: 162: WriteRegister(0x00, 0x00);
  2450  00EE  01F6               	clrf	WriteRegister@val
  2451  00EF  3000               	movlw	0
  2452  00F0  318F  2711  3180   	fcall	_WriteRegister
  2453                           
  2454                           ;try_rfid.c: 163: _delay((unsigned long)((5)*(8000000L/4000.0)));
  2455  00F3  300D               	movlw	13
  2456  00F4  0020               	movlb	0	; select bank0
  2457  00F5  00CA               	movwf	??_main
  2458  00F6  30FB               	movlw	251
  2459  00F7                     u2547:	
  2460  00F7  0B89               	decfsz	9,f
  2461  00F8  28F7               	goto	u2547
  2462  00F9  0BCA               	decfsz	??_main,f
  2463  00FA  28F7               	goto	u2547
  2464  00FB  3200               	nop2
  2465                           
  2466                           ;try_rfid.c: 165: SW = 0;
  2467  00FC  0020               	movlb	0	; select bank0
  2468  00FD  01EF               	clrf	_SW
  2469                           
  2470                           ;try_rfid.c: 167: LATCbits.LATC4 = 1;
  2471  00FE  0022               	movlb	2	; select bank2
  2472  00FF  160E               	bsf	14,4	;volatile
  2473                           
  2474                           ;try_rfid.c: 168: _delay((unsigned long)((50)*(8000000L/4000.0)));
  2475  0100  3082               	movlw	130
  2476  0101  0020               	movlb	0	; select bank0
  2477  0102  00CA               	movwf	??_main
  2478  0103  30DD               	movlw	221
  2479  0104                     u2557:	
  2480  0104  0B89               	decfsz	9,f
  2481  0105  2904               	goto	u2557
  2482  0106  0BCA               	decfsz	??_main,f
  2483  0107  2904               	goto	u2557
  2484  0108  3200               	nop2
  2485                           
  2486                           ;try_rfid.c: 169: LATCbits.LATC4 = 0;
  2487  0109  0022               	movlb	2	; select bank2
  2488  010A  120E               	bcf	14,4	;volatile
  2489                           
  2490                           ;try_rfid.c: 170: LATCbits.LATC5 = 1;
  2491  010B  168E               	bsf	14,5	;volatile
  2492                           
  2493                           ;try_rfid.c: 171: _delay((unsigned long)((50)*(8000000L/4000.0)));
  2494  010C  3082               	movlw	130
  2495  010D  0020               	movlb	0	; select bank0
  2496  010E  00CA               	movwf	??_main
  2497  010F  30DD               	movlw	221
  2498  0110                     u2567:	
  2499  0110  0B89               	decfsz	9,f
  2500  0111  2910               	goto	u2567
  2501  0112  0BCA               	decfsz	??_main,f
  2502  0113  2910               	goto	u2567
  2503  0114  3200               	nop2
  2504                           
  2505                           ;try_rfid.c: 172: LATCbits.LATC5 = 0;
  2506  0115  0022               	movlb	2	; select bank2
  2507  0116  128E               	bcf	14,5	;volatile
  2508                           
  2509                           ;try_rfid.c: 174: INTCONbits.IOCIF = 0;
  2510  0117  100B               	bcf	11,0	;volatile
  2511                           
  2512                           ;try_rfid.c: 175: IOCAFbits.IOCAF0 = 0;
  2513  0118  0027               	movlb	7	; select bank7
  2514  0119  1013               	bcf	19,0	;volatile
  2515                           
  2516                           ;try_rfid.c: 176: INTCONbits.IOCIF = 0;
  2517  011A  100B               	bcf	11,0	;volatile
  2518                           
  2519                           ;try_rfid.c: 177: INTCONbits.IOCIE = 1;
  2520  011B  158B               	bsf	11,3	;volatile
  2521  011C                     l3093:	
  2522                           
  2523                           ;try_rfid.c: 179: }
  2524                           ;try_rfid.c: 184: if (MFRC522_isCard(&TagType))
  2525  011C  306C               	movlw	(low (main@TagType| 0))& (0+255)
  2526  011D  318F  274F  3180   	fcall	_MFRC522_isCard
  2527  0120  3A00               	xorlw	0
  2528  0121  1903               	skipnz
  2529  0122  2887               	goto	l3025
  2530                           
  2531                           ;try_rfid.c: 185: {
  2532                           ;try_rfid.c: 187: if (MFRC522_ReadCardSerial (&UID))
  2533  0123  3066               	movlw	(low (main@UID| 0))& (0+255)
  2534  0124  318F  2788  3180   	fcall	_MFRC522_ReadCardSerial
  2535  0127  3A00               	xorlw	0
  2536  0128  1903               	skipnz
  2537  0129  2A7C               	goto	l3225
  2538                           
  2539                           ;try_rfid.c: 188: {
  2540                           ;try_rfid.c: 189: size = MFRC522_SelectTag( &UID );
  2541  012A  3066               	movlw	(low (main@UID| 0))& (0+255)
  2542  012B  3185  2575  3180   	fcall	_MFRC522_SelectTag
  2543  012E  0020               	movlb	0	; select bank0
  2544  012F  00CA               	movwf	??_main
  2545  0130  084A               	movf	??_main,w
  2546  0131  00CE               	movwf	main@size
  2547                           
  2548                           ;try_rfid.c: 192: for (i=0; i<4; i++)
  2549  0132  01ED               	clrf	main@i
  2550  0133  3004               	movlw	4
  2551  0134  026D               	subwf	main@i,w
  2552  0135  1803               	btfsc	3,0
  2553  0136  297F               	goto	l3125
  2554  0137                     l3105:	
  2555                           
  2556                           ;try_rfid.c: 193: {
  2557                           ;try_rfid.c: 194: if (UID[i] == GTSN1[i])
  2558  0137  086D               	movf	main@i,w
  2559  0138  3EC0               	addlw	(low (_GTSN1| 0))& (0+255)
  2560  0139  0086               	movwf	6
  2561  013A  0187               	clrf	7
  2562  013B  086D               	movf	main@i,w
  2563  013C  3E66               	addlw	(low (main@UID| 0))& (0+255)
  2564  013D  0084               	movwf	4
  2565  013E  0185               	clrf	5
  2566  013F  0800               	movf	0,w
  2567  0140  0601               	xorwf	1,w
  2568  0141  1D03               	skipz
  2569  0142  2947               	goto	l3109
  2570                           
  2571                           ;try_rfid.c: 195: {
  2572                           ;try_rfid.c: 196: goodtag1++;
  2573  0143  3001               	movlw	1
  2574  0144  07DE               	addwf	main@goodtag1,f
  2575  0145  3000               	movlw	0
  2576  0146  3DDF               	addwfc	main@goodtag1+1,f
  2577  0147                     l3109:	
  2578                           
  2579                           ;try_rfid.c: 197: }
  2580                           ;try_rfid.c: 198: if (UID[i] == GTSN2[i])
  2581  0147  086D               	movf	main@i,w
  2582  0148  3EBC               	addlw	(low (_GTSN2| 0))& (0+255)
  2583  0149  0086               	movwf	6
  2584  014A  0187               	clrf	7
  2585  014B  086D               	movf	main@i,w
  2586  014C  3E66               	addlw	(low (main@UID| 0))& (0+255)
  2587  014D  0084               	movwf	4
  2588  014E  0185               	clrf	5
  2589  014F  0800               	movf	0,w
  2590  0150  0601               	xorwf	1,w
  2591  0151  1D03               	skipz
  2592  0152  2957               	goto	l3113
  2593                           
  2594                           ;try_rfid.c: 199: {
  2595                           ;try_rfid.c: 200: goodtag2++;
  2596  0153  3001               	movlw	1
  2597  0154  07E0               	addwf	main@goodtag2,f
  2598  0155  3000               	movlw	0
  2599  0156  3DE1               	addwfc	main@goodtag2+1,f
  2600  0157                     l3113:	
  2601                           
  2602                           ;try_rfid.c: 201: }
  2603                           ;try_rfid.c: 202: if (UID[i] == GTSN3[i])
  2604  0157  086D               	movf	main@i,w
  2605  0158  3EB8               	addlw	(low (_GTSN3| 0))& (0+255)
  2606  0159  0086               	movwf	6
  2607  015A  0187               	clrf	7
  2608  015B  086D               	movf	main@i,w
  2609  015C  3E66               	addlw	(low (main@UID| 0))& (0+255)
  2610  015D  0084               	movwf	4
  2611  015E  0185               	clrf	5
  2612  015F  0800               	movf	0,w
  2613  0160  0601               	xorwf	1,w
  2614  0161  1D03               	skipz
  2615  0162  2967               	goto	l3117
  2616                           
  2617                           ;try_rfid.c: 203: {
  2618                           ;try_rfid.c: 204: goodtag3++;
  2619  0163  3001               	movlw	1
  2620  0164  07E2               	addwf	main@goodtag3,f
  2621  0165  3000               	movlw	0
  2622  0166  3DE3               	addwfc	main@goodtag3+1,f
  2623  0167                     l3117:	
  2624                           
  2625                           ;try_rfid.c: 205: }
  2626                           ;try_rfid.c: 206: if (UID[i] == GTSN4[i])
  2627  0167  086D               	movf	main@i,w
  2628  0168  3EB4               	addlw	(low (_GTSN4| 0))& (0+255)
  2629  0169  0086               	movwf	6
  2630  016A  0187               	clrf	7
  2631  016B  086D               	movf	main@i,w
  2632  016C  3E66               	addlw	(low (main@UID| 0))& (0+255)
  2633  016D  0084               	movwf	4
  2634  016E  0185               	clrf	5
  2635  016F  0800               	movf	0,w
  2636  0170  0601               	xorwf	1,w
  2637  0171  1D03               	skipz
  2638  0172  2977               	goto	l3121
  2639                           
  2640                           ;try_rfid.c: 207: {
  2641                           ;try_rfid.c: 208: goodtag4++;
  2642  0173  3001               	movlw	1
  2643  0174  07E4               	addwf	main@goodtag4,f
  2644  0175  3000               	movlw	0
  2645  0176  3DE5               	addwfc	main@goodtag4+1,f
  2646  0177                     l3121:	
  2647  0177  3001               	movlw	1
  2648  0178  00CA               	movwf	??_main
  2649  0179  084A               	movf	??_main,w
  2650  017A  07ED               	addwf	main@i,f
  2651  017B  3004               	movlw	4
  2652  017C  026D               	subwf	main@i,w
  2653  017D  1C03               	skipc
  2654  017E  2937               	goto	l3105
  2655  017F                     l3125:	
  2656                           
  2657                           ;try_rfid.c: 209: }
  2658                           ;try_rfid.c: 210: }
  2659                           ;try_rfid.c: 212: if ((goodtag1 == 4) || (goodtag2 == 4) || (goodtag3 == 4) || (goodtag4
      +                           == 4))
  2660  017F  3004               	movlw	4
  2661  0180  065E               	xorwf	main@goodtag1,w
  2662  0181  045F               	iorwf	main@goodtag1+1,w
  2663  0182  1903               	btfsc	3,2
  2664  0183  2993               	goto	l3133
  2665  0184  3004               	movlw	4
  2666  0185  0660               	xorwf	main@goodtag2,w
  2667  0186  0461               	iorwf	main@goodtag2+1,w
  2668  0187  1903               	btfsc	3,2
  2669  0188  2993               	goto	l3133
  2670  0189  3004               	movlw	4
  2671  018A  0662               	xorwf	main@goodtag3,w
  2672  018B  0463               	iorwf	main@goodtag3+1,w
  2673  018C  1903               	btfsc	3,2
  2674  018D  2993               	goto	l3133
  2675  018E  3004               	movlw	4
  2676  018F  0664               	xorwf	main@goodtag4,w
  2677  0190  0465               	iorwf	main@goodtag4+1,w
  2678  0191  1D03               	btfss	3,2
  2679  0192  2A7C               	goto	l3225
  2680  0193                     l3133:	
  2681                           
  2682                           ;try_rfid.c: 213: {
  2683                           ;try_rfid.c: 219: SPI_init();
  2684  0193  3187  27E2  3180   	fcall	_SPI_init
  2685                           
  2686                           ;try_rfid.c: 220: WriteRegister(0x00, 0x00);
  2687  0196  01F6               	clrf	WriteRegister@val
  2688  0197  3000               	movlw	0
  2689  0198  318F  2711  3180   	fcall	_WriteRegister
  2690                           
  2691                           ;try_rfid.c: 221: InitApp();
  2692  019B  318F  279E  3180   	fcall	_InitApp
  2693                           
  2694                           ;try_rfid.c: 225: LATAbits.LATA4 = 0;
  2695  019E  0022               	movlb	2	; select bank2
  2696  019F  120C               	bcf	12,4	;volatile
  2697                           
  2698                           ;try_rfid.c: 226: SPI_init();
  2699  01A0  3187  27E2  3180   	fcall	_SPI_init
  2700                           
  2701                           ;try_rfid.c: 227: nRF_Setup_Write();
  2702  01A3  3183  23AA  3180   	fcall	_nRF_Setup_Write
  2703                           
  2704                           ;try_rfid.c: 228: FlushTXRX();
  2705  01A6  318F  272E  3180   	fcall	_FlushTXRX
  2706                           
  2707                           ;try_rfid.c: 229: WriteRegisterRF(0x07,0x70);
  2708  01A9  3070               	movlw	112
  2709  01AA  0020               	movlb	0	; select bank0
  2710  01AB  00CA               	movwf	??_main
  2711  01AC  084A               	movf	??_main,w
  2712  01AD  00F3               	movwf	WriteRegisterRF@val
  2713  01AE  3007               	movlw	7
  2714  01AF  318F  2703  3180   	fcall	_WriteRegisterRF
  2715                           
  2716                           ;try_rfid.c: 230: _delay((unsigned long)((2)*(8000000L/4000.0)));
  2717  01B2  3006               	movlw	6
  2718  01B3  0020               	movlb	0	; select bank0
  2719  01B4  00CA               	movwf	??_main
  2720  01B5  3030               	movlw	48
  2721  01B6                     u2577:	
  2722  01B6  0B89               	decfsz	9,f
  2723  01B7  29B6               	goto	u2577
  2724  01B8  0BCA               	decfsz	??_main,f
  2725  01B9  29B6               	goto	u2577
  2726  01BA  0000               	nop
  2727                           
  2728                           ;try_rfid.c: 231: LATAbits.LATA4 = 1;
  2729  01BB  0022               	movlb	2	; select bank2
  2730  01BC  160C               	bsf	12,4	;volatile
  2731                           
  2732                           ;try_rfid.c: 232: _delay((unsigned long)((150)*(8000000L/4000000.0)));
  2733  01BD  3064               	movlw	100
  2734  01BE                     u2587:	
  2735  01BE  0B89               	decfsz	9,f
  2736  01BF  29BE               	goto	u2587
  2737                           
  2738                           ;try_rfid.c: 234: uint8_t data[5] = {0,0,0,0,0};
  2739  01C0  30C9               	movlw	low main@F3021
  2740  01C1  0086               	movwf	6
  2741  01C2  3000               	movlw	high main@F3021
  2742  01C3  0087               	movwf	7
  2743  01C4  3059               	movlw	low main@data
  2744  01C5  0084               	movwf	4
  2745  01C6  3000               	movlw	high main@data
  2746  01C7  0085               	movwf	5
  2747  01C8  3005               	movlw	5
  2748  01C9  0020               	movlb	0	; select bank0
  2749  01CA  00CA               	movwf	??_main
  2750  01CB                     u2270:	
  2751  01CB  0016               	moviw fsr1++
  2752  01CC  001A               	movwi fsr0++
  2753  01CD  0BCA               	decfsz	??_main,f
  2754  01CE  29CB               	goto	u2270
  2755                           
  2756                           ;try_rfid.c: 235: data[0] = 30;
  2757  01CF  301E               	movlw	30
  2758  01D0  00CA               	movwf	??_main
  2759  01D1  084A               	movf	??_main,w
  2760  01D2  00D9               	movwf	main@data
  2761                           
  2762                           ;try_rfid.c: 236: data[1] = UID[0];
  2763  01D3  0866               	movf	main@UID,w
  2764  01D4  00CA               	movwf	??_main
  2765  01D5  084A               	movf	??_main,w
  2766  01D6  00DA               	movwf	main@data+1
  2767                           
  2768                           ;try_rfid.c: 237: data[2] = UID[1];
  2769  01D7  0867               	movf	main@UID+1,w
  2770  01D8  00CA               	movwf	??_main
  2771  01D9  084A               	movf	??_main,w
  2772  01DA  00DB               	movwf	main@data+2
  2773                           
  2774                           ;try_rfid.c: 238: data[3] = UID[2];
  2775  01DB  0868               	movf	main@UID+2,w
  2776  01DC  00CA               	movwf	??_main
  2777  01DD  084A               	movf	??_main,w
  2778  01DE  00DC               	movwf	main@data+3
  2779                           
  2780                           ;try_rfid.c: 239: data[4] = UID[3];
  2781  01DF  0869               	movf	main@UID+3,w
  2782  01E0  00CA               	movwf	??_main
  2783  01E1  084A               	movf	??_main,w
  2784  01E2  00DD               	movwf	main@data+4
  2785                           
  2786                           ;try_rfid.c: 242: WritePayload(5, data);
  2787  01E3  3059               	movlw	(low (main@data| 0))& (0+255)
  2788  01E4  00CA               	movwf	??_main
  2789  01E5  084A               	movf	??_main,w
  2790  01E6  00F3               	movwf	WritePayload@data
  2791  01E7  3005               	movlw	5
  2792  01E8  318F  27B8  3180   	fcall	_WritePayload
  2793                           
  2794                           ;try_rfid.c: 243: _delay((unsigned long)((200)*(8000000L/4000000.0)));
  2795  01EB  3085               	movlw	133
  2796  01EC                     u2597:	
  2797  01EC  0B89               	decfsz	9,f
  2798  01ED  29EC               	goto	u2597
  2799  01EE  0000               	nop
  2800                           
  2801                           ;try_rfid.c: 244: FlushTXRX();
  2802  01EF  318F  272E  3180   	fcall	_FlushTXRX
  2803                           
  2804                           ;try_rfid.c: 245: WriteRegisterRF(0x00, 0x00);
  2805  01F2  01F3               	clrf	WriteRegisterRF@val
  2806  01F3  3000               	movlw	0
  2807  01F4  318F  2703  3180   	fcall	_WriteRegisterRF
  2808                           
  2809                           ;try_rfid.c: 248: LATCbits.LATC4 = 1;
  2810  01F7  0022               	movlb	2	; select bank2
  2811  01F8  160E               	bsf	14,4	;volatile
  2812                           
  2813                           ;try_rfid.c: 249: LATAbits.LATA4 = 0;
  2814  01F9  120C               	bcf	12,4	;volatile
  2815                           
  2816                           ;try_rfid.c: 250: SPI_init();
  2817  01FA  3187  27E2  3180   	fcall	_SPI_init
  2818                           
  2819                           ;try_rfid.c: 251: nRF_Setup_Read();
  2820  01FD  3184  2430  3180   	fcall	_nRF_Setup_Read
  2821                           
  2822                           ;try_rfid.c: 252: _delay((unsigned long)((2)*(8000000L/4000.0)));
  2823  0200  3006               	movlw	6
  2824  0201  0020               	movlb	0	; select bank0
  2825  0202  00CA               	movwf	??_main
  2826  0203  3030               	movlw	48
  2827  0204                     u2607:	
  2828  0204  0B89               	decfsz	9,f
  2829  0205  2A04               	goto	u2607
  2830  0206  0BCA               	decfsz	??_main,f
  2831  0207  2A04               	goto	u2607
  2832  0208  0000               	nop
  2833                           
  2834                           ;try_rfid.c: 253: LATAbits.LATA4 = 1;
  2835  0209  0022               	movlb	2	; select bank2
  2836  020A  160C               	bsf	12,4	;volatile
  2837                           
  2838                           ;try_rfid.c: 254: _delay((unsigned long)((170)*(8000000L/4000000.0)));
  2839  020B  3071               	movlw	113
  2840  020C                     u2617:	
  2841  020C  0B89               	decfsz	9,f
  2842  020D  2A0C               	goto	u2617
  2843  020E  0000               	nop
  2844                           
  2845                           ;try_rfid.c: 257: i = 2000;
  2846  020F  30D0               	movlw	208
  2847  0210  0020               	movlb	0	; select bank0
  2848  0211  00CA               	movwf	??_main
  2849  0212  084A               	movf	??_main,w
  2850  0213  00ED               	movwf	main@i
  2851  0214                     l3189:	
  2852                           ;try_rfid.c: 258: do
  2853                           
  2854                           
  2855                           ;try_rfid.c: 259: {
  2856                           ;try_rfid.c: 262: _delay((unsigned long)((50)*(8000000L/4000.0)));
  2857  0214  3082               	movlw	130
  2858  0215  0020               	movlb	0	; select bank0
  2859  0216  00CA               	movwf	??_main
  2860  0217  30DD               	movlw	221
  2861  0218                     u2627:	
  2862  0218  0B89               	decfsz	9,f
  2863  0219  2A18               	goto	u2627
  2864  021A  0BCA               	decfsz	??_main,f
  2865  021B  2A18               	goto	u2627
  2866  021C  3200               	nop2
  2867                           
  2868                           ;try_rfid.c: 263: uint8_t data2[5] = {0,0,0,0,0};
  2869  021D  30C4               	movlw	low main@F3027
  2870  021E  0086               	movwf	6
  2871  021F  3000               	movlw	high main@F3027
  2872  0220  0087               	movwf	7
  2873  0221  3054               	movlw	low main@data2
  2874  0222  0084               	movwf	4
  2875  0223  3000               	movlw	high main@data2
  2876  0224  0085               	movwf	5
  2877  0225  3005               	movlw	5
  2878  0226  0020               	movlb	0	; select bank0
  2879  0227  00CA               	movwf	??_main
  2880  0228                     u2280:	
  2881  0228  0016               	moviw fsr1++
  2882  0229  001A               	movwi fsr0++
  2883  022A  0BCA               	decfsz	??_main,f
  2884  022B  2A28               	goto	u2280
  2885                           
  2886                           ;try_rfid.c: 265: if (nRF_available())
  2887  022C  318E  26E0  3180   	fcall	_nRF_available
  2888  022F  3A00               	xorlw	0
  2889  0230  1903               	skipnz
  2890  0231  2A74               	goto	l3223
  2891                           
  2892                           ;try_rfid.c: 266: {
  2893                           ;try_rfid.c: 267: ReadPayload(5, data2);
  2894  0232  3054               	movlw	(low (main@data2| 0))& (0+255)
  2895  0233  0020               	movlb	0	; select bank0
  2896  0234  00CA               	movwf	??_main
  2897  0235  084A               	movf	??_main,w
  2898  0236  00F3               	movwf	ReadPayload@data
  2899  0237  3005               	movlw	5
  2900  0238  3187  2793  3180   	fcall	_ReadPayload
  2901                           
  2902                           ;try_rfid.c: 268: FlushTXRX();
  2903  023B  318F  272E  3180   	fcall	_FlushTXRX
  2904                           
  2905                           ;try_rfid.c: 270: if (data2[0]==70)
  2906  023E  3046               	movlw	70
  2907  023F  0020               	movlb	0	; select bank0
  2908  0240  0654               	xorwf	main@data2,w
  2909  0241  1D03               	btfss	3,2
  2910  0242  2A74               	goto	l3223
  2911                           
  2912                           ;try_rfid.c: 271: {
  2913                           ;try_rfid.c: 272: if (data2[1]==0x1)
  2914  0243  0355               	decf	main@data2+1,w
  2915  0244  1D03               	btfss	3,2
  2916  0245  2A5E               	goto	l3215
  2917                           
  2918                           ;try_rfid.c: 273: {
  2919                           ;try_rfid.c: 275: LATCbits.LATC4 = 1;
  2920  0246  0022               	movlb	2	; select bank2
  2921  0247  160E               	bsf	14,4	;volatile
  2922                           
  2923                           ;try_rfid.c: 276: _delay((unsigned long)((50)*(8000000L/4000.0)));
  2924  0248  3082               	movlw	130
  2925  0249  0020               	movlb	0	; select bank0
  2926  024A  00CA               	movwf	??_main
  2927  024B  30DD               	movlw	221
  2928  024C                     u2637:	
  2929  024C  0B89               	decfsz	9,f
  2930  024D  2A4C               	goto	u2637
  2931  024E  0BCA               	decfsz	??_main,f
  2932  024F  2A4C               	goto	u2637
  2933  0250  3200               	nop2
  2934                           
  2935                           ;try_rfid.c: 277: LATCbits.LATC4 = 0;
  2936  0251  0022               	movlb	2	; select bank2
  2937  0252  120E               	bcf	14,4	;volatile
  2938                           
  2939                           ;try_rfid.c: 278: LATCbits.LATC5 = 1;
  2940  0253  168E               	bsf	14,5	;volatile
  2941                           
  2942                           ;try_rfid.c: 279: _delay((unsigned long)((50)*(8000000L/4000.0)));
  2943  0254  3082               	movlw	130
  2944  0255  0020               	movlb	0	; select bank0
  2945  0256  00CA               	movwf	??_main
  2946  0257  30DD               	movlw	221
  2947  0258                     u2647:	
  2948  0258  0B89               	decfsz	9,f
  2949  0259  2A58               	goto	u2647
  2950  025A  0BCA               	decfsz	??_main,f
  2951  025B  2A58               	goto	u2647
  2952  025C  3200               	nop2
  2953  025D  2A71               	goto	l3221
  2954  025E                     l3215:	
  2955                           ;try_rfid.c: 288: }
  2956                           
  2957                           ;try_rfid.c: 287: break;
  2958                           
  2959                           ;try_rfid.c: 280: LATCbits.LATC5 = 0;
  2960                           
  2961                           
  2962                           ;try_rfid.c: 289: else if (data2[1]==0x0)
  2963  025E  0020               	movlb	0	; select bank0
  2964  025F  0855               	movf	main@data2+1,w
  2965  0260  1D03               	btfss	3,2
  2966  0261  2A74               	goto	l3223
  2967                           
  2968                           ;try_rfid.c: 290: {
  2969                           ;try_rfid.c: 292: LATCbits.LATC5 = 1;
  2970  0262  0022               	movlb	2	; select bank2
  2971  0263  168E               	bsf	14,5	;volatile
  2972                           
  2973                           ;try_rfid.c: 293: _delay((unsigned long)((100)*(8000000L/4000.0)));
  2974  0264  3002               	movlw	2
  2975  0265  0020               	movlb	0	; select bank0
  2976  0266  00CB               	movwf	??_main+1
  2977  0267  3004               	movlw	4
  2978  0268  00CA               	movwf	??_main
  2979  0269  30BA               	movlw	186
  2980  026A                     u2657:	
  2981  026A  0B89               	decfsz	9,f
  2982  026B  2A6A               	goto	u2657
  2983  026C  0BCA               	decfsz	??_main,f
  2984  026D  2A6A               	goto	u2657
  2985  026E  0BCB               	decfsz	??_main+1,f
  2986  026F  2A6A               	goto	u2657
  2987  0270  0000               	nop
  2988  0271                     l3221:	
  2989                           
  2990                           ;try_rfid.c: 294: LATCbits.LATC5 = 0;
  2991  0271  0022               	movlb	2	; select bank2
  2992  0272  128E               	bcf	14,5	;volatile
  2993                           
  2994                           ;try_rfid.c: 295: break;
  2995  0273  2A7A               	goto	l100
  2996  0274                     l3223:	
  2997                           
  2998                           ;try_rfid.c: 296: }
  2999                           ;try_rfid.c: 297: }
  3000                           ;try_rfid.c: 299: }
  3001                           ;try_rfid.c: 300: i--;
  3002  0274  3001               	movlw	1
  3003  0275  0020               	movlb	0	; select bank0
  3004  0276  02ED               	subwf	main@i,f
  3005                           
  3006                           ;try_rfid.c: 301: }
  3007                           ;try_rfid.c: 302: while(i!=0);
  3008  0277  086D               	movf	main@i,w
  3009  0278  1D03               	btfss	3,2
  3010  0279  2A14               	goto	l3189
  3011  027A                     l100:	
  3012                           
  3013                           ;try_rfid.c: 306: LATCbits.LATC4 = 0;
  3014  027A  0022               	movlb	2	; select bank2
  3015  027B  120E               	bcf	14,4	;volatile
  3016  027C                     l3225:	
  3017                           
  3018                           ;try_rfid.c: 308: }
  3019                           ;try_rfid.c: 316: }
  3020                           ;try_rfid.c: 320: MFRC522_Halt () ;
  3021  027C  3187  2724  3180   	fcall	_MFRC522_Halt
  3022  027F  2887               	goto	l3025
  3023  0280                     __end_of_main:	
  3024                           
  3025                           	psect	text1
  3026  0EE0                     __ptext1:	
  3027 ;; *************** function _nRF_available *****************
  3028 ;; Defined at:
  3029 ;;		line 157 in file "nRF24L01P.c"
  3030 ;; Parameters:    Size  Location     Type
  3031 ;;		None
  3032 ;; Auto vars:     Size  Location     Type
  3033 ;;		None
  3034 ;; Return value:  Size  Location     Type
  3035 ;;                  1    wreg      unsigned char 
  3036 ;; Registers used:
  3037 ;;		wreg, status,2, status,0, pclath, cstack
  3038 ;; Tracked objects:
  3039 ;;		On entry : 0/0
  3040 ;;		On exit  : 0/0
  3041 ;;		Unchanged: 0/0
  3042 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3043 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3044 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3045 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3046 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3047 ;;Total ram usage:        0 bytes
  3048 ;; Hardware stack levels used:    1
  3049 ;; Hardware stack levels required when called:    3
  3050 ;; This function calls:
  3051 ;;		_ReadRegisterRF
  3052 ;; This function is called by:
  3053 ;;		_main
  3054 ;; This function uses a non-reentrant model
  3055 ;;
  3056                           
  3057                           
  3058                           ;psect for function _nRF_available
  3059  0EE0                     _nRF_available:	
  3060                           
  3061                           ;nRF24L01P.c: 159: if (( ReadRegisterRF(0x07) == 0x40 ))
  3062                           
  3063                           ;incstack = 0
  3064                           ; Regs used in _nRF_available: [wreg+status,2+status,0+pclath+cstack]
  3065  0EE0  3007               	movlw	7
  3066  0EE1  318F  2773  318E   	fcall	_ReadRegisterRF
  3067  0EE4  3A40               	xorlw	64
  3068  0EE5  1D03               	skipz
  3069  0EE6  2EE9               	goto	l2979
  3070                           
  3071                           ;nRF24L01P.c: 160: {
  3072                           ;nRF24L01P.c: 161: return 1;
  3073  0EE7  3001               	movlw	1
  3074  0EE8  0008               	return
  3075  0EE9                     l2979:	
  3076                           
  3077                           ;nRF24L01P.c: 162: }
  3078                           ;nRF24L01P.c: 163: return 0;
  3079  0EE9  3000               	movlw	0
  3080  0EEA  0008               	return
  3081  0EEB                     __end_of_nRF_available:	
  3082                           
  3083                           	psect	text2
  3084  0F73                     __ptext2:	
  3085 ;; *************** function _ReadRegisterRF *****************
  3086 ;; Defined at:
  3087 ;;		line 47 in file "nRF24L01P.c"
  3088 ;; Parameters:    Size  Location     Type
  3089 ;;  reg             1    wreg     unsigned char 
  3090 ;; Auto vars:     Size  Location     Type
  3091 ;;  reg             1    4[COMMON] unsigned char 
  3092 ;;  temp1           1    6[COMMON] unsigned char 
  3093 ;;  temp            1    5[COMMON] unsigned char 
  3094 ;; Return value:  Size  Location     Type
  3095 ;;                  1    wreg      unsigned char 
  3096 ;; Registers used:
  3097 ;;		wreg, status,2, status,0, pclath, cstack
  3098 ;; Tracked objects:
  3099 ;;		On entry : 0/0
  3100 ;;		On exit  : 0/0
  3101 ;;		Unchanged: 0/0
  3102 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3103 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3104 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3105 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3106 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3107 ;;Total ram usage:        4 bytes
  3108 ;; Hardware stack levels used:    1
  3109 ;; Hardware stack levels required when called:    2
  3110 ;; This function calls:
  3111 ;;		_SPI_transfer
  3112 ;; This function is called by:
  3113 ;;		_nRF_available
  3114 ;; This function uses a non-reentrant model
  3115 ;;
  3116                           
  3117                           
  3118                           ;psect for function _ReadRegisterRF
  3119  0F73                     _ReadRegisterRF:	
  3120                           
  3121                           ;incstack = 0
  3122                           ; Regs used in _ReadRegisterRF: [wreg+status,2+status,0+pclath+cstack]
  3123                           ;ReadRegisterRF@reg stored from wreg
  3124  0F73  00F4               	movwf	ReadRegisterRF@reg
  3125                           
  3126                           ;nRF24L01P.c: 49: uint8_t temp;
  3127                           ;nRF24L01P.c: 50: uint8_t temp1;
  3128                           ;nRF24L01P.c: 52: LATCbits.LATC6 = 0;
  3129  0F74  0022               	movlb	2	; select bank2
  3130  0F75  130E               	bcf	14,6	;volatile
  3131                           
  3132                           ;nRF24L01P.c: 53: temp = 0x00 | reg;
  3133  0F76  0874               	movf	ReadRegisterRF@reg,w
  3134  0F77  00F3               	movwf	??_ReadRegisterRF
  3135  0F78  0873               	movf	??_ReadRegisterRF,w
  3136  0F79  00F5               	movwf	ReadRegisterRF@temp
  3137                           
  3138                           ;nRF24L01P.c: 54: SPI_transfer(temp);
  3139  0F7A  0875               	movf	ReadRegisterRF@temp,w
  3140  0F7B  318E  26B4  318F   	fcall	_SPI_transfer
  3141                           
  3142                           ;nRF24L01P.c: 56: temp1= SPI_transfer(0xFF);
  3143  0F7E  30FF               	movlw	255
  3144  0F7F  318E  26B4         	fcall	_SPI_transfer
  3145  0F81  00F3               	movwf	??_ReadRegisterRF
  3146  0F82  0873               	movf	??_ReadRegisterRF,w
  3147  0F83  00F6               	movwf	ReadRegisterRF@temp1
  3148                           
  3149                           ;nRF24L01P.c: 57: LATCbits.LATC6 = 1;
  3150  0F84  0022               	movlb	2	; select bank2
  3151  0F85  170E               	bsf	14,6	;volatile
  3152                           
  3153                           ;nRF24L01P.c: 59: return temp1;
  3154  0F86  0876               	movf	ReadRegisterRF@temp1,w
  3155  0F87  0008               	return
  3156  0F88                     __end_of_ReadRegisterRF:	
  3157                           
  3158                           	psect	text3
  3159  03AA                     __ptext3:	
  3160 ;; *************** function _nRF_Setup_Write *****************
  3161 ;; Defined at:
  3162 ;;		line 95 in file "nRF24L01P.c"
  3163 ;; Parameters:    Size  Location     Type
  3164 ;;		None
  3165 ;; Auto vars:     Size  Location     Type
  3166 ;;  RXTX_ADDR       5    2[BANK0 ] unsigned char [5]
  3167 ;; Return value:  Size  Location     Type
  3168 ;;                  1    wreg      void 
  3169 ;; Registers used:
  3170 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3171 ;; Tracked objects:
  3172 ;;		On entry : 0/0
  3173 ;;		On exit  : 0/0
  3174 ;;		Unchanged: 0/0
  3175 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3176 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3177 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3178 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3179 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3180 ;;Total ram usage:        7 bytes
  3181 ;; Hardware stack levels used:    1
  3182 ;; Hardware stack levels required when called:    3
  3183 ;; This function calls:
  3184 ;;		_WriteAddress
  3185 ;;		_WriteRegisterRF
  3186 ;; This function is called by:
  3187 ;;		_main
  3188 ;; This function uses a non-reentrant model
  3189 ;;
  3190                           
  3191                           
  3192                           ;psect for function _nRF_Setup_Write
  3193  03AA                     _nRF_Setup_Write:	
  3194                           
  3195                           ;nRF24L01P.c: 98: uint8_t RXTX_ADDR[5];
  3196                           ;nRF24L01P.c: 99: RXTX_ADDR[4] = 0xAB;
  3197                           
  3198                           ;incstack = 0
  3199                           ; Regs used in _nRF_Setup_Write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3200  03AA  30AB               	movlw	171
  3201  03AB  0020               	movlb	0	; select bank0
  3202  03AC  00A0               	movwf	??_nRF_Setup_Write
  3203  03AD  0820               	movf	??_nRF_Setup_Write,w
  3204  03AE  00A6               	movwf	nRF_Setup_Write@RXTX_ADDR+4
  3205                           
  3206                           ;nRF24L01P.c: 100: RXTX_ADDR[3] = 0xAC;
  3207  03AF  30AC               	movlw	172
  3208  03B0  00A0               	movwf	??_nRF_Setup_Write
  3209  03B1  0820               	movf	??_nRF_Setup_Write,w
  3210  03B2  00A5               	movwf	nRF_Setup_Write@RXTX_ADDR+3
  3211                           
  3212                           ;nRF24L01P.c: 101: RXTX_ADDR[2] = 0xAD;
  3213  03B3  30AD               	movlw	173
  3214  03B4  00A0               	movwf	??_nRF_Setup_Write
  3215  03B5  0820               	movf	??_nRF_Setup_Write,w
  3216  03B6  00A4               	movwf	nRF_Setup_Write@RXTX_ADDR+2
  3217                           
  3218                           ;nRF24L01P.c: 102: RXTX_ADDR[1] = 0xAE;
  3219  03B7  30AE               	movlw	174
  3220  03B8  00A0               	movwf	??_nRF_Setup_Write
  3221  03B9  0820               	movf	??_nRF_Setup_Write,w
  3222  03BA  00A3               	movwf	nRF_Setup_Write@RXTX_ADDR+1
  3223                           
  3224                           ;nRF24L01P.c: 103: RXTX_ADDR[0] = 0xAF;
  3225  03BB  30AF               	movlw	175
  3226  03BC  00A0               	movwf	??_nRF_Setup_Write
  3227  03BD  0820               	movf	??_nRF_Setup_Write,w
  3228  03BE  00A2               	movwf	nRF_Setup_Write@RXTX_ADDR
  3229                           
  3230                           ;nRF24L01P.c: 105: LATAbits.LATA4 = 0;
  3231  03BF  0022               	movlb	2	; select bank2
  3232  03C0  120C               	bcf	12,4	;volatile
  3233                           
  3234                           ;nRF24L01P.c: 106: WriteAddress(0x10, 5, RXTX_ADDR);
  3235  03C1  3005               	movlw	5
  3236  03C2  0020               	movlb	0	; select bank0
  3237  03C3  00A0               	movwf	??_nRF_Setup_Write
  3238  03C4  0820               	movf	??_nRF_Setup_Write,w
  3239  03C5  00F3               	movwf	WriteAddress@num
  3240  03C6  3022               	movlw	(low (nRF_Setup_Write@RXTX_ADDR| 0))& (0+255)
  3241  03C7  00A1               	movwf	??_nRF_Setup_Write+1
  3242  03C8  0821               	movf	??_nRF_Setup_Write+1,w
  3243  03C9  00F4               	movwf	WriteAddress@addr
  3244  03CA  3010               	movlw	16
  3245  03CB  3187  27BB  3183   	fcall	_WriteAddress
  3246                           
  3247                           ;nRF24L01P.c: 107: WriteAddress(0x0A, 5, RXTX_ADDR);
  3248  03CE  3005               	movlw	5
  3249  03CF  0020               	movlb	0	; select bank0
  3250  03D0  00A0               	movwf	??_nRF_Setup_Write
  3251  03D1  0820               	movf	??_nRF_Setup_Write,w
  3252  03D2  00F3               	movwf	WriteAddress@num
  3253  03D3  3022               	movlw	(low (nRF_Setup_Write@RXTX_ADDR| 0))& (0+255)
  3254  03D4  00A1               	movwf	??_nRF_Setup_Write+1
  3255  03D5  0821               	movf	??_nRF_Setup_Write+1,w
  3256  03D6  00F4               	movwf	WriteAddress@addr
  3257  03D7  300A               	movlw	10
  3258  03D8  3187  27BB  3183   	fcall	_WriteAddress
  3259                           
  3260                           ;nRF24L01P.c: 108: WriteRegisterRF(0x01, 0x01);
  3261  03DB  01F3               	clrf	WriteRegisterRF@val
  3262  03DC  0AF3               	incf	WriteRegisterRF@val,f
  3263  03DD  3001               	movlw	1
  3264  03DE  318F  2703  3183   	fcall	_WriteRegisterRF
  3265                           
  3266                           ;nRF24L01P.c: 109: WriteRegisterRF(0x02, 0x01);
  3267  03E1  01F3               	clrf	WriteRegisterRF@val
  3268  03E2  0AF3               	incf	WriteRegisterRF@val,f
  3269  03E3  3002               	movlw	2
  3270  03E4  318F  2703  3183   	fcall	_WriteRegisterRF
  3271                           
  3272                           ;nRF24L01P.c: 110: WriteRegisterRF(0x03, 0x03);
  3273  03E7  3003               	movlw	3
  3274  03E8  0020               	movlb	0	; select bank0
  3275  03E9  00A0               	movwf	??_nRF_Setup_Write
  3276  03EA  0820               	movf	??_nRF_Setup_Write,w
  3277  03EB  00F3               	movwf	WriteRegisterRF@val
  3278  03EC  3003               	movlw	3
  3279  03ED  318F  2703  3183   	fcall	_WriteRegisterRF
  3280                           
  3281                           ;nRF24L01P.c: 111: WriteRegisterRF(0x04, 0x2F);
  3282  03F0  302F               	movlw	47
  3283  03F1  0020               	movlb	0	; select bank0
  3284  03F2  00A0               	movwf	??_nRF_Setup_Write
  3285  03F3  0820               	movf	??_nRF_Setup_Write,w
  3286  03F4  00F3               	movwf	WriteRegisterRF@val
  3287  03F5  3004               	movlw	4
  3288  03F6  318F  2703  3183   	fcall	_WriteRegisterRF
  3289                           
  3290                           ;nRF24L01P.c: 113: WriteRegisterRF(0x05, 0x2C);
  3291  03F9  302C               	movlw	44
  3292  03FA  0020               	movlb	0	; select bank0
  3293  03FB  00A0               	movwf	??_nRF_Setup_Write
  3294  03FC  0820               	movf	??_nRF_Setup_Write,w
  3295  03FD  00F3               	movwf	WriteRegisterRF@val
  3296  03FE  3005               	movlw	5
  3297  03FF  318F  2703  3183   	fcall	_WriteRegisterRF
  3298                           
  3299                           ;nRF24L01P.c: 114: WriteRegisterRF(0x06, 0x06);
  3300  0402  3006               	movlw	6
  3301  0403  0020               	movlb	0	; select bank0
  3302  0404  00A0               	movwf	??_nRF_Setup_Write
  3303  0405  0820               	movf	??_nRF_Setup_Write,w
  3304  0406  00F3               	movwf	WriteRegisterRF@val
  3305  0407  3006               	movlw	6
  3306  0408  318F  2703  3183   	fcall	_WriteRegisterRF
  3307                           
  3308                           ;nRF24L01P.c: 115: WriteRegisterRF(0x07,0x70);
  3309  040B  3070               	movlw	112
  3310  040C  0020               	movlb	0	; select bank0
  3311  040D  00A0               	movwf	??_nRF_Setup_Write
  3312  040E  0820               	movf	??_nRF_Setup_Write,w
  3313  040F  00F3               	movwf	WriteRegisterRF@val
  3314  0410  3007               	movlw	7
  3315  0411  318F  2703  3183   	fcall	_WriteRegisterRF
  3316                           
  3317                           ;nRF24L01P.c: 116: WriteRegisterRF(0x11, 0x05);
  3318  0414  3005               	movlw	5
  3319  0415  0020               	movlb	0	; select bank0
  3320  0416  00A0               	movwf	??_nRF_Setup_Write
  3321  0417  0820               	movf	??_nRF_Setup_Write,w
  3322  0418  00F3               	movwf	WriteRegisterRF@val
  3323  0419  3011               	movlw	17
  3324  041A  318F  2703  3183   	fcall	_WriteRegisterRF
  3325                           
  3326                           ;nRF24L01P.c: 117: WriteRegisterRF(0x00,0x7A);
  3327  041D  307A               	movlw	122
  3328  041E  0020               	movlb	0	; select bank0
  3329  041F  00A0               	movwf	??_nRF_Setup_Write
  3330  0420  0820               	movf	??_nRF_Setup_Write,w
  3331  0421  00F3               	movwf	WriteRegisterRF@val
  3332  0422  3000               	movlw	0
  3333  0423  318F  2703  3183   	fcall	_WriteRegisterRF
  3334                           
  3335                           ;nRF24L01P.c: 118: _delay((unsigned long)((2)*(8000000L/4000.0)));
  3336  0426  3006               	movlw	6
  3337  0427  0020               	movlb	0	; select bank0
  3338  0428  00A0               	movwf	??_nRF_Setup_Write
  3339  0429  3030               	movlw	48
  3340  042A                     u2667:	
  3341  042A  0B89               	decfsz	9,f
  3342  042B  2C2A               	goto	u2667
  3343  042C  0BA0               	decfsz	??_nRF_Setup_Write,f
  3344  042D  2C2A               	goto	u2667
  3345  042E  0000               	nop
  3346  042F  0008               	return
  3347  0430                     __end_of_nRF_Setup_Write:	
  3348                           
  3349                           	psect	text4
  3350  0430                     __ptext4:	
  3351 ;; *************** function _nRF_Setup_Read *****************
  3352 ;; Defined at:
  3353 ;;		line 125 in file "nRF24L01P.c"
  3354 ;; Parameters:    Size  Location     Type
  3355 ;;		None
  3356 ;; Auto vars:     Size  Location     Type
  3357 ;;  RXTX_ADDR       5    2[BANK0 ] unsigned char [5]
  3358 ;; Return value:  Size  Location     Type
  3359 ;;                  1    wreg      void 
  3360 ;; Registers used:
  3361 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3362 ;; Tracked objects:
  3363 ;;		On entry : 0/0
  3364 ;;		On exit  : 0/0
  3365 ;;		Unchanged: 0/0
  3366 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3367 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3368 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3369 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3370 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3371 ;;Total ram usage:        7 bytes
  3372 ;; Hardware stack levels used:    1
  3373 ;; Hardware stack levels required when called:    3
  3374 ;; This function calls:
  3375 ;;		_WriteAddress
  3376 ;;		_WriteRegisterRF
  3377 ;; This function is called by:
  3378 ;;		_main
  3379 ;; This function uses a non-reentrant model
  3380 ;;
  3381                           
  3382                           
  3383                           ;psect for function _nRF_Setup_Read
  3384  0430                     _nRF_Setup_Read:	
  3385                           
  3386                           ;nRF24L01P.c: 128: uint8_t RXTX_ADDR[5];
  3387                           ;nRF24L01P.c: 129: RXTX_ADDR[4] = 0xAB;
  3388                           
  3389                           ;incstack = 0
  3390                           ; Regs used in _nRF_Setup_Read: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3391  0430  30AB               	movlw	171
  3392  0431  0020               	movlb	0	; select bank0
  3393  0432  00A0               	movwf	??_nRF_Setup_Read
  3394  0433  0820               	movf	??_nRF_Setup_Read,w
  3395  0434  00A6               	movwf	nRF_Setup_Read@RXTX_ADDR+4
  3396                           
  3397                           ;nRF24L01P.c: 130: RXTX_ADDR[3] = 0xAC;
  3398  0435  30AC               	movlw	172
  3399  0436  00A0               	movwf	??_nRF_Setup_Read
  3400  0437  0820               	movf	??_nRF_Setup_Read,w
  3401  0438  00A5               	movwf	nRF_Setup_Read@RXTX_ADDR+3
  3402                           
  3403                           ;nRF24L01P.c: 131: RXTX_ADDR[2] = 0xAD;
  3404  0439  30AD               	movlw	173
  3405  043A  00A0               	movwf	??_nRF_Setup_Read
  3406  043B  0820               	movf	??_nRF_Setup_Read,w
  3407  043C  00A4               	movwf	nRF_Setup_Read@RXTX_ADDR+2
  3408                           
  3409                           ;nRF24L01P.c: 132: RXTX_ADDR[1] = 0xAE;
  3410  043D  30AE               	movlw	174
  3411  043E  00A0               	movwf	??_nRF_Setup_Read
  3412  043F  0820               	movf	??_nRF_Setup_Read,w
  3413  0440  00A3               	movwf	nRF_Setup_Read@RXTX_ADDR+1
  3414                           
  3415                           ;nRF24L01P.c: 133: RXTX_ADDR[0] = 0xAF;
  3416  0441  30AF               	movlw	175
  3417  0442  00A0               	movwf	??_nRF_Setup_Read
  3418  0443  0820               	movf	??_nRF_Setup_Read,w
  3419  0444  00A2               	movwf	nRF_Setup_Read@RXTX_ADDR
  3420                           
  3421                           ;nRF24L01P.c: 136: WriteAddress(0x10, 5, RXTX_ADDR);
  3422  0445  3005               	movlw	5
  3423  0446  00A0               	movwf	??_nRF_Setup_Read
  3424  0447  0820               	movf	??_nRF_Setup_Read,w
  3425  0448  00F3               	movwf	WriteAddress@num
  3426  0449  3022               	movlw	(low (nRF_Setup_Read@RXTX_ADDR| 0))& (0+255)
  3427  044A  00A1               	movwf	??_nRF_Setup_Read+1
  3428  044B  0821               	movf	??_nRF_Setup_Read+1,w
  3429  044C  00F4               	movwf	WriteAddress@addr
  3430  044D  3010               	movlw	16
  3431  044E  3187  27BB  3184   	fcall	_WriteAddress
  3432                           
  3433                           ;nRF24L01P.c: 137: WriteAddress(0x0A, 5, RXTX_ADDR);
  3434  0451  3005               	movlw	5
  3435  0452  0020               	movlb	0	; select bank0
  3436  0453  00A0               	movwf	??_nRF_Setup_Read
  3437  0454  0820               	movf	??_nRF_Setup_Read,w
  3438  0455  00F3               	movwf	WriteAddress@num
  3439  0456  3022               	movlw	(low (nRF_Setup_Read@RXTX_ADDR| 0))& (0+255)
  3440  0457  00A1               	movwf	??_nRF_Setup_Read+1
  3441  0458  0821               	movf	??_nRF_Setup_Read+1,w
  3442  0459  00F4               	movwf	WriteAddress@addr
  3443  045A  300A               	movlw	10
  3444  045B  3187  27BB  3184   	fcall	_WriteAddress
  3445                           
  3446                           ;nRF24L01P.c: 138: WriteRegisterRF(0x01, 0x01);
  3447  045E  01F3               	clrf	WriteRegisterRF@val
  3448  045F  0AF3               	incf	WriteRegisterRF@val,f
  3449  0460  3001               	movlw	1
  3450  0461  318F  2703  3184   	fcall	_WriteRegisterRF
  3451                           
  3452                           ;nRF24L01P.c: 139: WriteRegisterRF(0x02, 0x01);
  3453  0464  01F3               	clrf	WriteRegisterRF@val
  3454  0465  0AF3               	incf	WriteRegisterRF@val,f
  3455  0466  3002               	movlw	2
  3456  0467  318F  2703  3184   	fcall	_WriteRegisterRF
  3457                           
  3458                           ;nRF24L01P.c: 140: WriteRegisterRF(0x03, 0x03);
  3459  046A  3003               	movlw	3
  3460  046B  0020               	movlb	0	; select bank0
  3461  046C  00A0               	movwf	??_nRF_Setup_Read
  3462  046D  0820               	movf	??_nRF_Setup_Read,w
  3463  046E  00F3               	movwf	WriteRegisterRF@val
  3464  046F  3003               	movlw	3
  3465  0470  318F  2703  3184   	fcall	_WriteRegisterRF
  3466                           
  3467                           ;nRF24L01P.c: 141: WriteRegisterRF(0x04, 0x2F);
  3468  0473  302F               	movlw	47
  3469  0474  0020               	movlb	0	; select bank0
  3470  0475  00A0               	movwf	??_nRF_Setup_Read
  3471  0476  0820               	movf	??_nRF_Setup_Read,w
  3472  0477  00F3               	movwf	WriteRegisterRF@val
  3473  0478  3004               	movlw	4
  3474  0479  318F  2703  3184   	fcall	_WriteRegisterRF
  3475                           
  3476                           ;nRF24L01P.c: 143: WriteRegisterRF(0x05, 0x28);
  3477  047C  3028               	movlw	40
  3478  047D  0020               	movlb	0	; select bank0
  3479  047E  00A0               	movwf	??_nRF_Setup_Read
  3480  047F  0820               	movf	??_nRF_Setup_Read,w
  3481  0480  00F3               	movwf	WriteRegisterRF@val
  3482  0481  3005               	movlw	5
  3483  0482  318F  2703  3184   	fcall	_WriteRegisterRF
  3484                           
  3485                           ;nRF24L01P.c: 144: WriteRegisterRF(0x06, 0x06);
  3486  0485  3006               	movlw	6
  3487  0486  0020               	movlb	0	; select bank0
  3488  0487  00A0               	movwf	??_nRF_Setup_Read
  3489  0488  0820               	movf	??_nRF_Setup_Read,w
  3490  0489  00F3               	movwf	WriteRegisterRF@val
  3491  048A  3006               	movlw	6
  3492  048B  318F  2703  3184   	fcall	_WriteRegisterRF
  3493                           
  3494                           ;nRF24L01P.c: 145: WriteRegisterRF(0x07,0x70);
  3495  048E  3070               	movlw	112
  3496  048F  0020               	movlb	0	; select bank0
  3497  0490  00A0               	movwf	??_nRF_Setup_Read
  3498  0491  0820               	movf	??_nRF_Setup_Read,w
  3499  0492  00F3               	movwf	WriteRegisterRF@val
  3500  0493  3007               	movlw	7
  3501  0494  318F  2703  3184   	fcall	_WriteRegisterRF
  3502                           
  3503                           ;nRF24L01P.c: 146: WriteRegisterRF(0x11, 0x05);
  3504  0497  3005               	movlw	5
  3505  0498  0020               	movlb	0	; select bank0
  3506  0499  00A0               	movwf	??_nRF_Setup_Read
  3507  049A  0820               	movf	??_nRF_Setup_Read,w
  3508  049B  00F3               	movwf	WriteRegisterRF@val
  3509  049C  3011               	movlw	17
  3510  049D  318F  2703  3184   	fcall	_WriteRegisterRF
  3511                           
  3512                           ;nRF24L01P.c: 147: WriteRegisterRF(0x00,0x7B);
  3513  04A0  307B               	movlw	123
  3514  04A1  0020               	movlb	0	; select bank0
  3515  04A2  00A0               	movwf	??_nRF_Setup_Read
  3516  04A3  0820               	movf	??_nRF_Setup_Read,w
  3517  04A4  00F3               	movwf	WriteRegisterRF@val
  3518  04A5  3000               	movlw	0
  3519  04A6  318F  2703  3184   	fcall	_WriteRegisterRF
  3520                           
  3521                           ;nRF24L01P.c: 150: _delay((unsigned long)((2)*(8000000L/4000.0)));
  3522  04A9  3006               	movlw	6
  3523  04AA  0020               	movlb	0	; select bank0
  3524  04AB  00A0               	movwf	??_nRF_Setup_Read
  3525  04AC  3030               	movlw	48
  3526  04AD                     u2677:	
  3527  04AD  0B89               	decfsz	9,f
  3528  04AE  2CAD               	goto	u2677
  3529  04AF  0BA0               	decfsz	??_nRF_Setup_Read,f
  3530  04B0  2CAD               	goto	u2677
  3531  04B1  0000               	nop
  3532                           
  3533                           ;nRF24L01P.c: 152: LATAbits.LATA4 = 1;
  3534  04B2  0022               	movlb	2	; select bank2
  3535  04B3  160C               	bsf	12,4	;volatile
  3536  04B4  0008               	return
  3537  04B5                     __end_of_nRF_Setup_Read:	
  3538                           
  3539                           	psect	text5
  3540  07BB                     __ptext5:	
  3541 ;; *************** function _WriteAddress *****************
  3542 ;; Defined at:
  3543 ;;		line 38 in file "nRF24L01P.c"
  3544 ;; Parameters:    Size  Location     Type
  3545 ;;  reg             1    wreg     unsigned char 
  3546 ;;  num             1    3[COMMON] unsigned char 
  3547 ;;  addr            1    4[COMMON] PTR unsigned char 
  3548 ;;		 -> nRF_Setup_Read@RXTX_ADDR(5), nRF_Setup_Write@RXTX_ADDR(5), 
  3549 ;; Auto vars:     Size  Location     Type
  3550 ;;  reg             1    6[COMMON] unsigned char 
  3551 ;;  i               2    7[COMMON] int 
  3552 ;; Return value:  Size  Location     Type
  3553 ;;                  1    wreg      void 
  3554 ;; Registers used:
  3555 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3556 ;; Tracked objects:
  3557 ;;		On entry : 0/0
  3558 ;;		On exit  : 0/0
  3559 ;;		Unchanged: 0/0
  3560 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3561 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3562 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3563 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3564 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3565 ;;Total ram usage:        6 bytes
  3566 ;; Hardware stack levels used:    1
  3567 ;; Hardware stack levels required when called:    2
  3568 ;; This function calls:
  3569 ;;		_SPI_transfer
  3570 ;; This function is called by:
  3571 ;;		_nRF_Setup_Write
  3572 ;;		_nRF_Setup_Read
  3573 ;; This function uses a non-reentrant model
  3574 ;;
  3575                           
  3576                           
  3577                           ;psect for function _WriteAddress
  3578  07BB                     _WriteAddress:	
  3579                           
  3580                           ;incstack = 0
  3581                           ; Regs used in _WriteAddress: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3582                           ;WriteAddress@reg stored from wreg
  3583  07BB  00F6               	movwf	WriteAddress@reg
  3584                           
  3585                           ;nRF24L01P.c: 40: LATCbits.LATC6 = 0;
  3586  07BC  0022               	movlb	2	; select bank2
  3587  07BD  130E               	bcf	14,6	;volatile
  3588                           
  3589                           ;nRF24L01P.c: 41: SPI_transfer(0x20 | reg);
  3590  07BE  0876               	movf	WriteAddress@reg,w
  3591  07BF  3820               	iorlw	32
  3592  07C0  318E  26B4  3187   	fcall	_SPI_transfer
  3593                           
  3594                           ;nRF24L01P.c: 42: for (int i=0; i<num; i++)
  3595  07C3  01F7               	clrf	WriteAddress@i
  3596  07C4  01F8               	clrf	WriteAddress@i+1
  3597  07C5                     l2801:	
  3598  07C5  0878               	movf	WriteAddress@i+1,w
  3599  07C6  3A80               	xorlw	128
  3600  07C7  00F5               	movwf	??_WriteAddress
  3601  07C8  3080               	movlw	128
  3602  07C9  0275               	subwf	??_WriteAddress,w
  3603  07CA  1D03               	skipz
  3604  07CB  2FCE               	goto	u2005
  3605  07CC  0873               	movf	WriteAddress@num,w
  3606  07CD  0277               	subwf	WriteAddress@i,w
  3607  07CE                     u2005:	
  3608  07CE  1803               	btfsc	3,0
  3609  07CF  2FDF               	goto	l321
  3610                           
  3611                           ;nRF24L01P.c: 43: SPI_transfer(addr[i]);
  3612  07D0  0877               	movf	WriteAddress@i,w
  3613  07D1  0774               	addwf	WriteAddress@addr,w
  3614  07D2  00F5               	movwf	??_WriteAddress
  3615  07D3  0875               	movf	??_WriteAddress,w
  3616  07D4  0086               	movwf	6
  3617  07D5  0187               	clrf	7
  3618  07D6  0801               	movf	1,w
  3619  07D7  318E  26B4  3187   	fcall	_SPI_transfer
  3620  07DA  3001               	movlw	1
  3621  07DB  07F7               	addwf	WriteAddress@i,f
  3622  07DC  3000               	movlw	0
  3623  07DD  3DF8               	addwfc	WriteAddress@i+1,f
  3624  07DE  2FC5               	goto	l2801
  3625  07DF                     l321:	
  3626                           
  3627                           ;nRF24L01P.c: 44: LATCbits.LATC6 = 1;
  3628  07DF  0022               	movlb	2	; select bank2
  3629  07E0  170E               	bsf	14,6	;volatile
  3630  07E1  0008               	return
  3631  07E2                     __end_of_WriteAddress:	
  3632                           
  3633                           	psect	text6
  3634  0FB8                     __ptext6:	
  3635 ;; *************** function _WritePayload *****************
  3636 ;; Defined at:
  3637 ;;		line 69 in file "nRF24L01P.c"
  3638 ;; Parameters:    Size  Location     Type
  3639 ;;  num             1    wreg     unsigned char 
  3640 ;;  data            1    3[COMMON] PTR unsigned char 
  3641 ;;		 -> main@data(5), main@data0(5), 
  3642 ;; Auto vars:     Size  Location     Type
  3643 ;;  num             1    5[COMMON] unsigned char 
  3644 ;;  i               1    6[COMMON] unsigned char 
  3645 ;; Return value:  Size  Location     Type
  3646 ;;                  1    wreg      void 
  3647 ;; Registers used:
  3648 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3649 ;; Tracked objects:
  3650 ;;		On entry : 0/0
  3651 ;;		On exit  : 0/0
  3652 ;;		Unchanged: 0/0
  3653 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3654 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3655 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3656 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3657 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3658 ;;Total ram usage:        4 bytes
  3659 ;; Hardware stack levels used:    1
  3660 ;; Hardware stack levels required when called:    2
  3661 ;; This function calls:
  3662 ;;		_SPI_transfer
  3663 ;; This function is called by:
  3664 ;;		_main
  3665 ;; This function uses a non-reentrant model
  3666 ;;
  3667                           
  3668                           
  3669                           ;psect for function _WritePayload
  3670  0FB8                     _WritePayload:	
  3671                           
  3672                           ;incstack = 0
  3673                           ; Regs used in _WritePayload: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3674                           ;WritePayload@num stored from wreg
  3675  0FB8  00F5               	movwf	WritePayload@num
  3676                           
  3677                           ;nRF24L01P.c: 71: LATCbits.LATC6 = 0;
  3678  0FB9  0022               	movlb	2	; select bank2
  3679  0FBA  130E               	bcf	14,6	;volatile
  3680                           
  3681                           ;nRF24L01P.c: 72: SPI_transfer(0xA0);
  3682  0FBB  30A0               	movlw	160
  3683  0FBC  318E  26B4  318F   	fcall	_SPI_transfer
  3684                           
  3685                           ;nRF24L01P.c: 73: for ( uint8_t i=0; i<num; i++)
  3686  0FBF  01F6               	clrf	WritePayload@i
  3687  0FC0                     l2883:	
  3688  0FC0  0875               	movf	WritePayload@num,w
  3689  0FC1  0276               	subwf	WritePayload@i,w
  3690  0FC2  1803               	btfsc	3,0
  3691  0FC3  2FD3               	goto	l333
  3692                           
  3693                           ;nRF24L01P.c: 74: SPI_transfer(data[i]);
  3694  0FC4  0876               	movf	WritePayload@i,w
  3695  0FC5  0773               	addwf	WritePayload@data,w
  3696  0FC6  00F4               	movwf	??_WritePayload
  3697  0FC7  0874               	movf	??_WritePayload,w
  3698  0FC8  0086               	movwf	6
  3699  0FC9  0187               	clrf	7
  3700  0FCA  0801               	movf	1,w
  3701  0FCB  318E  26B4  318F   	fcall	_SPI_transfer
  3702  0FCE  3001               	movlw	1
  3703  0FCF  00F4               	movwf	??_WritePayload
  3704  0FD0  0874               	movf	??_WritePayload,w
  3705  0FD1  07F6               	addwf	WritePayload@i,f
  3706  0FD2  2FC0               	goto	l2883
  3707  0FD3                     l333:	
  3708                           
  3709                           ;nRF24L01P.c: 75: LATCbits.LATC6 = 1;
  3710  0FD3  0022               	movlb	2	; select bank2
  3711  0FD4  170E               	bsf	14,6	;volatile
  3712                           
  3713                           ;nRF24L01P.c: 77: LATAbits.LATA4 = 1;
  3714  0FD5  160C               	bsf	12,4	;volatile
  3715                           
  3716                           ;nRF24L01P.c: 78: _delay((unsigned long)((12)*(8000000L/4000000.0)));
  3717  0FD6  3008               	movlw	8
  3718  0FD7                     u2687:	
  3719  0FD7  0B89               	decfsz	9,f
  3720  0FD8  2FD7               	goto	u2687
  3721                           
  3722                           ;nRF24L01P.c: 79: LATAbits.LATA4 = 0;
  3723  0FD9  0022               	movlb	2	; select bank2
  3724  0FDA  120C               	bcf	12,4	;volatile
  3725  0FDB  0008               	return
  3726  0FDC                     __end_of_WritePayload:	
  3727                           
  3728                           	psect	text7
  3729  07E2                     __ptext7:	
  3730 ;; *************** function _SPI_init *****************
  3731 ;; Defined at:
  3732 ;;		line 14 in file "spi.c"
  3733 ;; Parameters:    Size  Location     Type
  3734 ;;		None
  3735 ;; Auto vars:     Size  Location     Type
  3736 ;;		None
  3737 ;; Return value:  Size  Location     Type
  3738 ;;                  1    wreg      void 
  3739 ;; Registers used:
  3740 ;;		wreg, status,2, status,0
  3741 ;; Tracked objects:
  3742 ;;		On entry : 0/0
  3743 ;;		On exit  : 0/0
  3744 ;;		Unchanged: 0/0
  3745 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3746 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3747 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3748 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3749 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3750 ;;Total ram usage:        0 bytes
  3751 ;; Hardware stack levels used:    1
  3752 ;; Hardware stack levels required when called:    1
  3753 ;; This function calls:
  3754 ;;		Nothing
  3755 ;; This function is called by:
  3756 ;;		_main
  3757 ;; This function uses a non-reentrant model
  3758 ;;
  3759                           
  3760                           
  3761                           ;psect for function _SPI_init
  3762  07E2                     _SPI_init:	
  3763                           
  3764                           ;spi.c: 17: SSPCON1bits.SSPEN = 1;
  3765                           
  3766                           ;incstack = 0
  3767                           ; Regs used in _SPI_init: [wreg+status,2+status,0]
  3768  07E2  0024               	movlb	4	; select bank4
  3769  07E3  1695               	bsf	21,5	;volatile
  3770                           
  3771                           ;spi.c: 18: SSPBUF = 0;
  3772  07E4  0191               	clrf	17	;volatile
  3773                           
  3774                           ;spi.c: 20: ANSELA = 0x00;
  3775  07E5  0023               	movlb	3	; select bank3
  3776  07E6  018C               	clrf	12	;volatile
  3777                           
  3778                           ;spi.c: 21: ANSELB = 0x00;
  3779  07E7  018D               	clrf	13	;volatile
  3780                           
  3781                           ;spi.c: 22: ANSELC = 0x00;
  3782  07E8  018E               	clrf	14	;volatile
  3783                           
  3784                           ;spi.c: 24: TRISBbits.TRISB6 = 0;
  3785  07E9  0021               	movlb	1	; select bank1
  3786  07EA  130D               	bcf	13,6	;volatile
  3787                           
  3788                           ;spi.c: 25: TRISBbits.TRISB4 = 1;
  3789  07EB  160D               	bsf	13,4	;volatile
  3790                           
  3791                           ;spi.c: 26: TRISCbits.TRISC7 = 0;
  3792  07EC  138E               	bcf	14,7	;volatile
  3793                           
  3794                           ;spi.c: 27: TRISCbits.TRISC6 = 0;
  3795  07ED  130E               	bcf	14,6	;volatile
  3796                           
  3797                           ;spi.c: 28: TRISAbits.TRISA4 = 0;
  3798  07EE  120C               	bcf	12,4	;volatile
  3799                           
  3800                           ;spi.c: 29: TRISCbits.TRISC5 = 0;
  3801  07EF  128E               	bcf	14,5	;volatile
  3802                           
  3803                           ;spi.c: 30: TRISCbits.TRISC4 = 0;
  3804  07F0  120E               	bcf	14,4	;volatile
  3805                           
  3806                           ;spi.c: 31: TRISAbits.TRISA5 = 0;
  3807  07F1  128C               	bcf	12,5	;volatile
  3808                           
  3809                           ;spi.c: 35: LATAbits.LATA5 = 1;
  3810  07F2  0022               	movlb	2	; select bank2
  3811  07F3  168C               	bsf	12,5	;volatile
  3812                           
  3813                           ;spi.c: 36: LATCbits.LATC6 = 1;
  3814  07F4  170E               	bsf	14,6	;volatile
  3815                           
  3816                           ;spi.c: 37: LATAbits.LATA4 = 0;
  3817  07F5  120C               	bcf	12,4	;volatile
  3818                           
  3819                           ;spi.c: 40: SSPSTATbits.CKE = 1;
  3820  07F6  0024               	movlb	4	; select bank4
  3821  07F7  1714               	bsf	20,6	;volatile
  3822                           
  3823                           ;spi.c: 42: SSPCON1bits.CKP = 0;
  3824  07F8  1215               	bcf	21,4	;volatile
  3825                           
  3826                           ;spi.c: 44: SSPSTATbits.SMP = 0;
  3827  07F9  1394               	bcf	20,7	;volatile
  3828                           
  3829                           ;spi.c: 50: SSPCON1bits.SSPM = 0b0000;
  3830  07FA  30F0               	movlw	-16
  3831  07FB  0595               	andwf	21,f	;volatile
  3832  07FC  0008               	return
  3833  07FD                     __end_of_SPI_init:	
  3834                           
  3835                           	psect	text8
  3836  0793                     __ptext8:	
  3837 ;; *************** function _ReadPayload *****************
  3838 ;; Defined at:
  3839 ;;		line 82 in file "nRF24L01P.c"
  3840 ;; Parameters:    Size  Location     Type
  3841 ;;  num             1    wreg     unsigned char 
  3842 ;;  data            1    3[COMMON] PTR unsigned char 
  3843 ;;		 -> main@data2(5), 
  3844 ;; Auto vars:     Size  Location     Type
  3845 ;;  num             1    6[COMMON] unsigned char 
  3846 ;;  i               1    7[COMMON] unsigned char 
  3847 ;; Return value:  Size  Location     Type
  3848 ;;                  1    wreg      void 
  3849 ;; Registers used:
  3850 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3851 ;; Tracked objects:
  3852 ;;		On entry : 0/0
  3853 ;;		On exit  : 0/0
  3854 ;;		Unchanged: 0/0
  3855 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3856 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3857 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3858 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3859 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3860 ;;Total ram usage:        5 bytes
  3861 ;; Hardware stack levels used:    1
  3862 ;; Hardware stack levels required when called:    2
  3863 ;; This function calls:
  3864 ;;		_SPI_transfer
  3865 ;; This function is called by:
  3866 ;;		_main
  3867 ;; This function uses a non-reentrant model
  3868 ;;
  3869                           
  3870                           
  3871                           ;psect for function _ReadPayload
  3872  0793                     _ReadPayload:	
  3873                           
  3874                           ;incstack = 0
  3875                           ; Regs used in _ReadPayload: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3876                           ;ReadPayload@num stored from wreg
  3877  0793  00F6               	movwf	ReadPayload@num
  3878                           
  3879                           ;nRF24L01P.c: 84: LATCbits.LATC6 = 0;
  3880  0794  0022               	movlb	2	; select bank2
  3881  0795  130E               	bcf	14,6	;volatile
  3882                           
  3883                           ;nRF24L01P.c: 85: SPI_transfer(0x61);
  3884  0796  3061               	movlw	97
  3885  0797  318E  26B4  3187   	fcall	_SPI_transfer
  3886                           
  3887                           ;nRF24L01P.c: 86: for ( uint8_t i=0; i<num; i++)
  3888  079A  01F7               	clrf	ReadPayload@i
  3889  079B                     l2993:	
  3890  079B  0876               	movf	ReadPayload@num,w
  3891  079C  0277               	subwf	ReadPayload@i,w
  3892  079D  1803               	btfsc	3,0
  3893  079E  2FB1               	goto	l339
  3894                           
  3895                           ;nRF24L01P.c: 87: data[i] = SPI_transfer(0xFF);
  3896  079F  30FF               	movlw	255
  3897  07A0  318E  26B4  3187   	fcall	_SPI_transfer
  3898  07A3  00F4               	movwf	??_ReadPayload
  3899  07A4  0877               	movf	ReadPayload@i,w
  3900  07A5  0773               	addwf	ReadPayload@data,w
  3901  07A6  00F5               	movwf	??_ReadPayload+1
  3902  07A7  0875               	movf	??_ReadPayload+1,w
  3903  07A8  0086               	movwf	6
  3904  07A9  0187               	clrf	7
  3905  07AA  0874               	movf	??_ReadPayload,w
  3906  07AB  0081               	movwf	1
  3907  07AC  3001               	movlw	1
  3908  07AD  00F4               	movwf	??_ReadPayload
  3909  07AE  0874               	movf	??_ReadPayload,w
  3910  07AF  07F7               	addwf	ReadPayload@i,f
  3911  07B0  2F9B               	goto	l2993
  3912  07B1                     l339:	
  3913                           
  3914                           ;nRF24L01P.c: 88: LATCbits.LATC6 = 1;
  3915  07B1  0022               	movlb	2	; select bank2
  3916  07B2  170E               	bsf	14,6	;volatile
  3917                           
  3918                           ;nRF24L01P.c: 89: _delay((unsigned long)((1)*(8000000L/4000.0)));
  3919  07B3  3003               	movlw	3
  3920  07B4  00F4               	movwf	??_ReadPayload
  3921  07B5  3098               	movlw	152
  3922  07B6                     u2697:	
  3923  07B6  0B89               	decfsz	9,f
  3924  07B7  2FB6               	goto	u2697
  3925  07B8  0BF4               	decfsz	??_ReadPayload,f
  3926  07B9  2FB6               	goto	u2697
  3927  07BA  0008               	return
  3928  07BB                     __end_of_ReadPayload:	
  3929                           
  3930                           	psect	text9
  3931  0F4F                     __ptext9:	
  3932 ;; *************** function _MFRC522_isCard *****************
  3933 ;; Defined at:
  3934 ;;		line 636 in file "rc522.c"
  3935 ;; Parameters:    Size  Location     Type
  3936 ;;  TagType         1    wreg     PTR unsigned char 
  3937 ;;		 -> main@TagType(1), 
  3938 ;; Auto vars:     Size  Location     Type
  3939 ;;  TagType         1   32[BANK0 ] PTR unsigned char 
  3940 ;;		 -> main@TagType(1), 
  3941 ;; Return value:  Size  Location     Type
  3942 ;;                  1    wreg      unsigned char 
  3943 ;; Registers used:
  3944 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3945 ;; Tracked objects:
  3946 ;;		On entry : 0/0
  3947 ;;		On exit  : 0/0
  3948 ;;		Unchanged: 0/0
  3949 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3950 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3951 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3952 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3953 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3954 ;;Total ram usage:        2 bytes
  3955 ;; Hardware stack levels used:    1
  3956 ;; Hardware stack levels required when called:    6
  3957 ;; This function calls:
  3958 ;;		_MFRC522_Request
  3959 ;; This function is called by:
  3960 ;;		_main
  3961 ;; This function uses a non-reentrant model
  3962 ;;
  3963                           
  3964                           
  3965                           ;psect for function _MFRC522_isCard
  3966  0F4F                     _MFRC522_isCard:	
  3967                           
  3968                           ;incstack = 0
  3969                           ; Regs used in _MFRC522_isCard: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3970                           ;MFRC522_isCard@TagType stored from wreg
  3971  0F4F  0020               	movlb	0	; select bank0
  3972  0F50  00C0               	movwf	MFRC522_isCard@TagType
  3973                           
  3974                           ;rc522.c: 638: if (MFRC522_Request( 0x26, TagType ) == 0)
  3975  0F51  0840               	movf	MFRC522_isCard@TagType,w
  3976  0F52  00BF               	movwf	??_MFRC522_isCard
  3977  0F53  083F               	movf	??_MFRC522_isCard,w
  3978  0F54  00B6               	movwf	MFRC522_Request@TagType
  3979  0F55  3026               	movlw	38
  3980  0F56  3187  275D  318F   	fcall	_MFRC522_Request
  3981  0F59  3A00               	xorlw	0
  3982  0F5A  1D03               	skipz
  3983  0F5B  2F5E               	goto	l2897
  3984                           
  3985                           ;rc522.c: 639: return 1;
  3986  0F5C  3001               	movlw	1
  3987  0F5D  0008               	return
  3988  0F5E                     l2897:	
  3989                           
  3990                           ;rc522.c: 640: else
  3991                           ;rc522.c: 641: return 0;
  3992  0F5E  3000               	movlw	0
  3993  0F5F  0008               	return
  3994  0F60                     __end_of_MFRC522_isCard:	
  3995                           
  3996                           	psect	text10
  3997  075D                     __ptext10:	
  3998 ;; *************** function _MFRC522_Request *****************
  3999 ;; Defined at:
  4000 ;;		line 357 in file "rc522.c"
  4001 ;; Parameters:    Size  Location     Type
  4002 ;;  reqMode         1    wreg     unsigned char 
  4003 ;;  TagType         1   22[BANK0 ] PTR unsigned char 
  4004 ;;		 -> main@TagType(1), 
  4005 ;; Auto vars:     Size  Location     Type
  4006 ;;  reqMode         1   27[BANK0 ] unsigned char 
  4007 ;;  backBits        2   29[BANK0 ] unsigned int 
  4008 ;;  _status         1   28[BANK0 ] unsigned char 
  4009 ;; Return value:  Size  Location     Type
  4010 ;;                  1    wreg      unsigned char 
  4011 ;; Registers used:
  4012 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4013 ;; Tracked objects:
  4014 ;;		On entry : 0/0
  4015 ;;		On exit  : 0/0
  4016 ;;		Unchanged: 0/0
  4017 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4018 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4019 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4020 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4021 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4022 ;;Total ram usage:        9 bytes
  4023 ;; Hardware stack levels used:    1
  4024 ;; Hardware stack levels required when called:    5
  4025 ;; This function calls:
  4026 ;;		_MFRC522_ToCard
  4027 ;;		_WriteRegister
  4028 ;; This function is called by:
  4029 ;;		_MFRC522_isCard
  4030 ;; This function uses a non-reentrant model
  4031 ;;
  4032                           
  4033                           
  4034                           ;psect for function _MFRC522_Request
  4035  075D                     _MFRC522_Request:	
  4036                           
  4037                           ;incstack = 0
  4038                           ; Regs used in _MFRC522_Request: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4039                           ;MFRC522_Request@reqMode stored from wreg
  4040  075D  0020               	movlb	0	; select bank0
  4041  075E  00BB               	movwf	MFRC522_Request@reqMode
  4042                           
  4043                           ;rc522.c: 359: char _status;
  4044                           ;rc522.c: 360: unsigned backBits;
  4045                           ;rc522.c: 361: WriteRegister( 0x0D, 0x07 );
  4046  075F  3007               	movlw	7
  4047  0760  00B7               	movwf	??_MFRC522_Request
  4048  0761  0837               	movf	??_MFRC522_Request,w
  4049  0762  00F6               	movwf	WriteRegister@val
  4050  0763  300D               	movlw	13
  4051  0764  318F  2711  3187   	fcall	_WriteRegister
  4052                           
  4053                           ;rc522.c: 362: TagType[0] = reqMode;
  4054  0767  0020               	movlb	0	; select bank0
  4055  0768  083B               	movf	MFRC522_Request@reqMode,w
  4056  0769  00B7               	movwf	??_MFRC522_Request
  4057  076A  0836               	movf	MFRC522_Request@TagType,w
  4058  076B  0086               	movwf	6
  4059  076C  0187               	clrf	7
  4060  076D  0837               	movf	??_MFRC522_Request,w
  4061  076E  0081               	movwf	1
  4062                           
  4063                           ;rc522.c: 363: _status = MFRC522_ToCard( 0x0C, TagType, 1, TagType, &backBits );
  4064  076F  0836               	movf	MFRC522_Request@TagType,w
  4065  0770  00B7               	movwf	??_MFRC522_Request
  4066  0771  0837               	movf	??_MFRC522_Request,w
  4067  0772  00A2               	movwf	MFRC522_ToCard@sendData
  4068  0773  01A3               	clrf	MFRC522_ToCard@sendLen
  4069  0774  0AA3               	incf	MFRC522_ToCard@sendLen,f
  4070  0775  0836               	movf	MFRC522_Request@TagType,w
  4071  0776  00B8               	movwf	??_MFRC522_Request+1
  4072  0777  0838               	movf	??_MFRC522_Request+1,w
  4073  0778  00A4               	movwf	MFRC522_ToCard@backData
  4074  0779  303D               	movlw	(low (MFRC522_Request@backBits| 0))& (0+255)
  4075  077A  00B9               	movwf	??_MFRC522_Request+2
  4076  077B  0839               	movf	??_MFRC522_Request+2,w
  4077  077C  00A5               	movwf	MFRC522_ToCard@backLen
  4078  077D  300C               	movlw	12
  4079  077E  3182  2280  3187   	fcall	_MFRC522_ToCard
  4080  0781  0020               	movlb	0	; select bank0
  4081  0782  00BA               	movwf	??_MFRC522_Request+3
  4082  0783  083A               	movf	??_MFRC522_Request+3,w
  4083  0784  00BC               	movwf	MFRC522_Request@_status
  4084                           
  4085                           ;rc522.c: 364: if ( (_status != 0) || (backBits != 0x10))
  4086  0785  083C               	movf	MFRC522_Request@_status,w
  4087  0786  1D03               	btfss	3,2
  4088  0787  2F8D               	goto	l2723
  4089  0788  3010               	movlw	16
  4090  0789  063D               	xorwf	MFRC522_Request@backBits,w
  4091  078A  043E               	iorwf	MFRC522_Request@backBits+1,w
  4092  078B  1903               	btfsc	3,2
  4093  078C  2F91               	goto	l224
  4094  078D                     l2723:	
  4095                           
  4096                           ;rc522.c: 365: {
  4097                           ;rc522.c: 366: _status = 2;
  4098  078D  3002               	movlw	2
  4099  078E  00B7               	movwf	??_MFRC522_Request
  4100  078F  0837               	movf	??_MFRC522_Request,w
  4101  0790  00BC               	movwf	MFRC522_Request@_status
  4102  0791                     l224:	
  4103                           
  4104                           ;rc522.c: 367: }
  4105                           ;rc522.c: 368: return _status;
  4106  0791  083C               	movf	MFRC522_Request@_status,w
  4107  0792  0008               	return
  4108  0793                     __end_of_MFRC522_Request:	
  4109                           
  4110                           	psect	text11
  4111  0575                     __ptext11:	
  4112 ;; *************** function _MFRC522_SelectTag *****************
  4113 ;; Defined at:
  4114 ;;		line 482 in file "rc522.c"
  4115 ;; Parameters:    Size  Location     Type
  4116 ;;  serNum          1    wreg     PTR unsigned char 
  4117 ;;		 -> main@UID(6), 
  4118 ;; Auto vars:     Size  Location     Type
  4119 ;;  serNum          1   37[BANK0 ] PTR unsigned char 
  4120 ;;		 -> main@UID(6), 
  4121 ;;  buffer          9   27[BANK0 ] unsigned char [9]
  4122 ;;  recvBits        2   39[BANK0 ] unsigned int 
  4123 ;;  i               1   41[BANK0 ] unsigned char 
  4124 ;;  size            1   38[BANK0 ] unsigned char 
  4125 ;;  _status         1   36[BANK0 ] unsigned char 
  4126 ;; Return value:  Size  Location     Type
  4127 ;;                  1    wreg      unsigned char 
  4128 ;; Registers used:
  4129 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4130 ;; Tracked objects:
  4131 ;;		On entry : 0/0
  4132 ;;		On exit  : 0/0
  4133 ;;		Unchanged: 0/0
  4134 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4135 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4136 ;;      Locals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4137 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4138 ;;      Totals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4139 ;;Total ram usage:       20 bytes
  4140 ;; Hardware stack levels used:    1
  4141 ;; Hardware stack levels required when called:    5
  4142 ;; This function calls:
  4143 ;;		_MFRC522_CRC
  4144 ;;		_MFRC522_ToCard
  4145 ;; This function is called by:
  4146 ;;		_main
  4147 ;; This function uses a non-reentrant model
  4148 ;;
  4149                           
  4150                           
  4151                           ;psect for function _MFRC522_SelectTag
  4152  0575                     _MFRC522_SelectTag:	
  4153                           
  4154                           ;incstack = 0
  4155                           ; Regs used in _MFRC522_SelectTag: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4156                           ;MFRC522_SelectTag@serNum stored from wreg
  4157  0575  0020               	movlb	0	; select bank0
  4158  0576  00C5               	movwf	MFRC522_SelectTag@serNum
  4159                           
  4160                           ;rc522.c: 484: char i;
  4161                           ;rc522.c: 485: char _status;
  4162                           ;rc522.c: 486: char size;
  4163                           ;rc522.c: 487: unsigned recvBits;
  4164                           ;rc522.c: 488: char buffer[9];
  4165                           ;rc522.c: 492: buffer[0] = 0x93;
  4166  0577  3093               	movlw	147
  4167  0578  00B6               	movwf	??_MFRC522_SelectTag
  4168  0579  0836               	movf	??_MFRC522_SelectTag,w
  4169  057A  00BB               	movwf	MFRC522_SelectTag@buffer
  4170                           
  4171                           ;rc522.c: 493: buffer[1] = 0x70;
  4172  057B  3070               	movlw	112
  4173  057C  00B6               	movwf	??_MFRC522_SelectTag
  4174  057D  0836               	movf	??_MFRC522_SelectTag,w
  4175  057E  00BC               	movwf	MFRC522_SelectTag@buffer+1
  4176                           
  4177                           ;rc522.c: 495: for ( i=2; i < 7; i++ )
  4178  057F  3002               	movlw	2
  4179  0580  00B6               	movwf	??_MFRC522_SelectTag
  4180  0581  0836               	movf	??_MFRC522_SelectTag,w
  4181  0582  00C9               	movwf	MFRC522_SelectTag@i
  4182  0583  3007               	movlw	7
  4183  0584  0249               	subwf	MFRC522_SelectTag@i,w
  4184  0585  1803               	btfsc	3,0
  4185  0586  2D9E               	goto	l2929
  4186  0587                     l2921:	
  4187                           
  4188                           ;rc522.c: 496: {
  4189                           ;rc522.c: 497: buffer[i] = *serNum++;
  4190  0587  0845               	movf	MFRC522_SelectTag@serNum,w
  4191  0588  0086               	movwf	6
  4192  0589  0187               	clrf	7
  4193  058A  0801               	movf	1,w
  4194  058B  00B6               	movwf	??_MFRC522_SelectTag
  4195  058C  0849               	movf	MFRC522_SelectTag@i,w
  4196  058D  3E3B               	addlw	(low (MFRC522_SelectTag@buffer| 0))& (0+255)
  4197  058E  0086               	movwf	6
  4198  058F  0187               	clrf	7
  4199  0590  0836               	movf	??_MFRC522_SelectTag,w
  4200  0591  0081               	movwf	1
  4201  0592  3001               	movlw	1
  4202  0593  00B6               	movwf	??_MFRC522_SelectTag
  4203  0594  0836               	movf	??_MFRC522_SelectTag,w
  4204  0595  07C5               	addwf	MFRC522_SelectTag@serNum,f
  4205  0596  3001               	movlw	1
  4206  0597  00B6               	movwf	??_MFRC522_SelectTag
  4207  0598  0836               	movf	??_MFRC522_SelectTag,w
  4208  0599  07C9               	addwf	MFRC522_SelectTag@i,f
  4209  059A  3007               	movlw	7
  4210  059B  0249               	subwf	MFRC522_SelectTag@i,w
  4211  059C  1C03               	skipc
  4212  059D  2D87               	goto	l2921
  4213  059E                     l2929:	
  4214                           
  4215                           ;rc522.c: 498: }
  4216                           ;rc522.c: 500: MFRC522_CRC( buffer, 7, &buffer[7] );
  4217  059E  3007               	movlw	7
  4218  059F  00B6               	movwf	??_MFRC522_SelectTag
  4219  05A0  0836               	movf	??_MFRC522_SelectTag,w
  4220  05A1  00A2               	movwf	MFRC522_CRC@length
  4221  05A2  3042               	movlw	(low ((MFRC522_SelectTag@buffer| 0+7)))& (0+255)
  4222  05A3  00B7               	movwf	??_MFRC522_SelectTag+1
  4223  05A4  0837               	movf	??_MFRC522_SelectTag+1,w
  4224  05A5  00A3               	movwf	MFRC522_CRC@dataOut
  4225  05A6  303B               	movlw	(low (MFRC522_SelectTag@buffer| 0))& (0+255)
  4226  05A7  3185  2515  3185   	fcall	_MFRC522_CRC
  4227                           
  4228                           ;rc522.c: 502: _status = MFRC522_ToCard( 0x0C, buffer, 9, buffer, &recvBits );
  4229  05AA  303B               	movlw	(low (MFRC522_SelectTag@buffer| 0))& (0+255)
  4230  05AB  0020               	movlb	0	; select bank0
  4231  05AC  00B6               	movwf	??_MFRC522_SelectTag
  4232  05AD  0836               	movf	??_MFRC522_SelectTag,w
  4233  05AE  00A2               	movwf	MFRC522_ToCard@sendData
  4234  05AF  3009               	movlw	9
  4235  05B0  00B7               	movwf	??_MFRC522_SelectTag+1
  4236  05B1  0837               	movf	??_MFRC522_SelectTag+1,w
  4237  05B2  00A3               	movwf	MFRC522_ToCard@sendLen
  4238  05B3  303B               	movlw	(low (MFRC522_SelectTag@buffer| 0))& (0+255)
  4239  05B4  00B8               	movwf	??_MFRC522_SelectTag+2
  4240  05B5  0838               	movf	??_MFRC522_SelectTag+2,w
  4241  05B6  00A4               	movwf	MFRC522_ToCard@backData
  4242  05B7  3047               	movlw	(low (MFRC522_SelectTag@recvBits| 0))& (0+255)
  4243  05B8  00B9               	movwf	??_MFRC522_SelectTag+3
  4244  05B9  0839               	movf	??_MFRC522_SelectTag+3,w
  4245  05BA  00A5               	movwf	MFRC522_ToCard@backLen
  4246  05BB  300C               	movlw	12
  4247  05BC  3182  2280  3185   	fcall	_MFRC522_ToCard
  4248  05BF  0020               	movlb	0	; select bank0
  4249  05C0  00BA               	movwf	??_MFRC522_SelectTag+4
  4250  05C1  083A               	movf	??_MFRC522_SelectTag+4,w
  4251  05C2  00C4               	movwf	MFRC522_SelectTag@_status
  4252                           
  4253                           ;rc522.c: 503: if ( (_status == 0) && (recvBits == 0x18) )
  4254  05C3  0844               	movf	MFRC522_SelectTag@_status,w
  4255  05C4  1D03               	btfss	3,2
  4256  05C5  2DD0               	goto	l2939
  4257  05C6  3018               	movlw	24
  4258  05C7  0647               	xorwf	MFRC522_SelectTag@recvBits,w
  4259  05C8  0448               	iorwf	MFRC522_SelectTag@recvBits+1,w
  4260  05C9  1D03               	btfss	3,2
  4261  05CA  2DD0               	goto	l2939
  4262                           
  4263                           ;rc522.c: 504: {
  4264                           ;rc522.c: 505: size = buffer[0];
  4265  05CB  083B               	movf	MFRC522_SelectTag@buffer,w
  4266  05CC  00B6               	movwf	??_MFRC522_SelectTag
  4267  05CD  0836               	movf	??_MFRC522_SelectTag,w
  4268  05CE  00C6               	movwf	MFRC522_SelectTag@size
  4269                           
  4270                           ;rc522.c: 506: }
  4271  05CF  2DD1               	goto	l2941
  4272  05D0                     l2939:	
  4273                           
  4274                           ;rc522.c: 507: else
  4275                           ;rc522.c: 508: {
  4276                           ;rc522.c: 509: size = 0;
  4277  05D0  01C6               	clrf	MFRC522_SelectTag@size
  4278  05D1                     l2941:	
  4279                           
  4280                           ;rc522.c: 510: }
  4281                           ;rc522.c: 511: return size;
  4282  05D1  0846               	movf	MFRC522_SelectTag@size,w
  4283  05D2  0008               	return
  4284  05D3                     __end_of_MFRC522_SelectTag:	
  4285                           
  4286                           	psect	text12
  4287  0F88                     __ptext12:	
  4288 ;; *************** function _MFRC522_ReadCardSerial *****************
  4289 ;; Defined at:
  4290 ;;		line 644 in file "rc522.c"
  4291 ;; Parameters:    Size  Location     Type
  4292 ;;  str             1    wreg     PTR unsigned char 
  4293 ;;		 -> main@UID(6), 
  4294 ;; Auto vars:     Size  Location     Type
  4295 ;;  str             1   35[BANK0 ] PTR unsigned char 
  4296 ;;		 -> main@UID(6), 
  4297 ;;  _status         1   34[BANK0 ] unsigned char 
  4298 ;; Return value:  Size  Location     Type
  4299 ;;                  1    wreg      unsigned char 
  4300 ;; Registers used:
  4301 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4302 ;; Tracked objects:
  4303 ;;		On entry : 0/0
  4304 ;;		On exit  : 0/0
  4305 ;;		Unchanged: 0/0
  4306 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4307 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4308 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4309 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4310 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4311 ;;Total ram usage:        3 bytes
  4312 ;; Hardware stack levels used:    1
  4313 ;; Hardware stack levels required when called:    6
  4314 ;; This function calls:
  4315 ;;		_MFRC522_AntiColl
  4316 ;; This function is called by:
  4317 ;;		_main
  4318 ;; This function uses a non-reentrant model
  4319 ;;
  4320                           
  4321                           
  4322                           ;psect for function _MFRC522_ReadCardSerial
  4323  0F88                     _MFRC522_ReadCardSerial:	
  4324                           
  4325                           ;incstack = 0
  4326                           ; Regs used in _MFRC522_ReadCardSerial: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4327                           ;MFRC522_ReadCardSerial@str stored from wreg
  4328  0F88  0020               	movlb	0	; select bank0
  4329  0F89  00C3               	movwf	MFRC522_ReadCardSerial@str
  4330                           
  4331                           ;rc522.c: 646: char _status;
  4332                           ;rc522.c: 647: _status = MFRC522_AntiColl( str );
  4333  0F8A  0843               	movf	MFRC522_ReadCardSerial@str,w
  4334  0F8B  3184  24B5  318F   	fcall	_MFRC522_AntiColl
  4335  0F8E  0020               	movlb	0	; select bank0
  4336  0F8F  00C1               	movwf	??_MFRC522_ReadCardSerial
  4337  0F90  0841               	movf	??_MFRC522_ReadCardSerial,w
  4338  0F91  00C2               	movwf	MFRC522_ReadCardSerial@_status
  4339                           
  4340                           ;rc522.c: 648: str[5] = 0;
  4341  0F92  0843               	movf	MFRC522_ReadCardSerial@str,w
  4342  0F93  3E05               	addlw	5
  4343  0F94  0086               	movwf	6
  4344  0F95  0187               	clrf	7
  4345  0F96  0181               	clrf	1
  4346                           
  4347                           ;rc522.c: 649: if (_status == 0)
  4348  0F97  0842               	movf	MFRC522_ReadCardSerial@_status,w
  4349  0F98  1D03               	btfss	3,2
  4350  0F99  2F9C               	goto	l2913
  4351                           
  4352                           ;rc522.c: 650: return 1;
  4353  0F9A  3001               	movlw	1
  4354  0F9B  0008               	return
  4355  0F9C                     l2913:	
  4356                           
  4357                           ;rc522.c: 651: else
  4358                           ;rc522.c: 652: return 0;
  4359  0F9C  3000               	movlw	0
  4360  0F9D  0008               	return
  4361  0F9E                     __end_of_MFRC522_ReadCardSerial:	
  4362                           
  4363                           	psect	text13
  4364  04B5                     __ptext13:	
  4365 ;; *************** function _MFRC522_AntiColl *****************
  4366 ;; Defined at:
  4367 ;;		line 605 in file "rc522.c"
  4368 ;; Parameters:    Size  Location     Type
  4369 ;;  serNum          1    wreg     PTR unsigned char 
  4370 ;;		 -> main@UID(6), 
  4371 ;; Auto vars:     Size  Location     Type
  4372 ;;  serNum          1   32[BANK0 ] PTR unsigned char 
  4373 ;;		 -> main@UID(6), 
  4374 ;;  unLen           2   28[BANK0 ] unsigned int 
  4375 ;;  i               1   31[BANK0 ] unsigned char 
  4376 ;;  _status         1   30[BANK0 ] unsigned char 
  4377 ;;  serNumCheck     1   27[BANK0 ] unsigned char 
  4378 ;; Return value:  Size  Location     Type
  4379 ;;                  1    wreg      unsigned char 
  4380 ;; Registers used:
  4381 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4382 ;; Tracked objects:
  4383 ;;		On entry : 0/0
  4384 ;;		On exit  : 0/0
  4385 ;;		Unchanged: 0/0
  4386 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4387 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4388 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4389 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4390 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4391 ;;Total ram usage:       11 bytes
  4392 ;; Hardware stack levels used:    1
  4393 ;; Hardware stack levels required when called:    5
  4394 ;; This function calls:
  4395 ;;		_MFRC522_Clear_Bit
  4396 ;;		_MFRC522_ToCard
  4397 ;;		_WriteRegister
  4398 ;; This function is called by:
  4399 ;;		_MFRC522_ReadCardSerial
  4400 ;; This function uses a non-reentrant model
  4401 ;;
  4402                           
  4403                           
  4404                           ;psect for function _MFRC522_AntiColl
  4405  04B5                     _MFRC522_AntiColl:	
  4406                           
  4407                           ;incstack = 0
  4408                           ; Regs used in _MFRC522_AntiColl: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4409                           ;MFRC522_AntiColl@serNum stored from wreg
  4410  04B5  0020               	movlb	0	; select bank0
  4411  04B6  00C0               	movwf	MFRC522_AntiColl@serNum
  4412                           
  4413                           ;rc522.c: 607: char _status;
  4414                           ;rc522.c: 608: char i;
  4415                           ;rc522.c: 609: char serNumCheck = 0;
  4416  04B7  01BB               	clrf	MFRC522_AntiColl@serNumCheck
  4417                           
  4418                           ;rc522.c: 610: unsigned unLen;
  4419                           ;rc522.c: 611: WriteRegister( 0x0D, 0x00 );
  4420  04B8  01F6               	clrf	WriteRegister@val
  4421  04B9  300D               	movlw	13
  4422  04BA  318F  2711  3184   	fcall	_WriteRegister
  4423                           
  4424                           ;rc522.c: 612: serNum[0] = 0x93;
  4425  04BD  3093               	movlw	147
  4426  04BE  0020               	movlb	0	; select bank0
  4427  04BF  00B6               	movwf	??_MFRC522_AntiColl
  4428  04C0  0840               	movf	MFRC522_AntiColl@serNum,w
  4429  04C1  0086               	movwf	6
  4430  04C2  0187               	clrf	7
  4431  04C3  0836               	movf	??_MFRC522_AntiColl,w
  4432  04C4  0081               	movwf	1
  4433                           
  4434                           ;rc522.c: 613: serNum[1] = 0x20;
  4435  04C5  3020               	movlw	32
  4436  04C6  00B6               	movwf	??_MFRC522_AntiColl
  4437  04C7  0A40               	incf	MFRC522_AntiColl@serNum,w
  4438  04C8  0086               	movwf	6
  4439  04C9  0187               	clrf	7
  4440  04CA  0836               	movf	??_MFRC522_AntiColl,w
  4441  04CB  0081               	movwf	1
  4442                           
  4443                           ;rc522.c: 614: MFRC522_Clear_Bit( 0x08, 0x08 );
  4444  04CC  3008               	movlw	8
  4445  04CD  00B6               	movwf	??_MFRC522_AntiColl
  4446  04CE  0836               	movf	??_MFRC522_AntiColl,w
  4447  04CF  00F8               	movwf	MFRC522_Clear_Bit@mask
  4448  04D0  3008               	movlw	8
  4449  04D1  318F  273E  3184   	fcall	_MFRC522_Clear_Bit
  4450                           
  4451                           ;rc522.c: 615: _status = MFRC522_ToCard( 0x0C, serNum, 2, serNum, &unLen );
  4452  04D4  0020               	movlb	0	; select bank0
  4453  04D5  0840               	movf	MFRC522_AntiColl@serNum,w
  4454  04D6  00B6               	movwf	??_MFRC522_AntiColl
  4455  04D7  0836               	movf	??_MFRC522_AntiColl,w
  4456  04D8  00A2               	movwf	MFRC522_ToCard@sendData
  4457  04D9  3002               	movlw	2
  4458  04DA  00B7               	movwf	??_MFRC522_AntiColl+1
  4459  04DB  0837               	movf	??_MFRC522_AntiColl+1,w
  4460  04DC  00A3               	movwf	MFRC522_ToCard@sendLen
  4461  04DD  0840               	movf	MFRC522_AntiColl@serNum,w
  4462  04DE  00B8               	movwf	??_MFRC522_AntiColl+2
  4463  04DF  0838               	movf	??_MFRC522_AntiColl+2,w
  4464  04E0  00A4               	movwf	MFRC522_ToCard@backData
  4465  04E1  303C               	movlw	(low (MFRC522_AntiColl@unLen| 0))& (0+255)
  4466  04E2  00B9               	movwf	??_MFRC522_AntiColl+3
  4467  04E3  0839               	movf	??_MFRC522_AntiColl+3,w
  4468  04E4  00A5               	movwf	MFRC522_ToCard@backLen
  4469  04E5  300C               	movlw	12
  4470  04E6  3182  2280  3184   	fcall	_MFRC522_ToCard
  4471  04E9  0020               	movlb	0	; select bank0
  4472  04EA  00BA               	movwf	??_MFRC522_AntiColl+4
  4473  04EB  083A               	movf	??_MFRC522_AntiColl+4,w
  4474  04EC  00BE               	movwf	MFRC522_AntiColl@_status
  4475                           
  4476                           ;rc522.c: 616: if (_status == 0)
  4477  04ED  083E               	movf	MFRC522_AntiColl@_status,w
  4478  04EE  1D03               	btfss	3,2
  4479  04EF  2D13               	goto	l278
  4480                           
  4481                           ;rc522.c: 617: {
  4482                           ;rc522.c: 618: for ( i=0; i < 4; i++ )
  4483  04F0  01BF               	clrf	MFRC522_AntiColl@i
  4484  04F1  3004               	movlw	4
  4485  04F2  023F               	subwf	MFRC522_AntiColl@i,w
  4486  04F3  1803               	btfsc	3,0
  4487  04F4  2D07               	goto	l2779
  4488  04F5                     l2773:	
  4489                           
  4490                           ;rc522.c: 619: {
  4491                           ;rc522.c: 620: serNumCheck ^= serNum[i];
  4492  04F5  083F               	movf	MFRC522_AntiColl@i,w
  4493  04F6  0740               	addwf	MFRC522_AntiColl@serNum,w
  4494  04F7  00B6               	movwf	??_MFRC522_AntiColl
  4495  04F8  0836               	movf	??_MFRC522_AntiColl,w
  4496  04F9  0086               	movwf	6
  4497  04FA  0187               	clrf	7
  4498  04FB  0801               	movf	1,w
  4499  04FC  00B7               	movwf	??_MFRC522_AntiColl+1
  4500  04FD  0837               	movf	??_MFRC522_AntiColl+1,w
  4501  04FE  06BB               	xorwf	MFRC522_AntiColl@serNumCheck,f
  4502  04FF  3001               	movlw	1
  4503  0500  00B6               	movwf	??_MFRC522_AntiColl
  4504  0501  0836               	movf	??_MFRC522_AntiColl,w
  4505  0502  07BF               	addwf	MFRC522_AntiColl@i,f
  4506  0503  3004               	movlw	4
  4507  0504  023F               	subwf	MFRC522_AntiColl@i,w
  4508  0505  1C03               	skipc
  4509  0506  2CF5               	goto	l2773
  4510  0507                     l2779:	
  4511                           
  4512                           ;rc522.c: 621: }
  4513                           ;rc522.c: 623: if ( serNumCheck != serNum[4] )
  4514  0507  0840               	movf	MFRC522_AntiColl@serNum,w
  4515  0508  3E04               	addlw	4
  4516  0509  0086               	movwf	6
  4517  050A  0187               	clrf	7
  4518  050B  0801               	movf	1,w
  4519  050C  063B               	xorwf	MFRC522_AntiColl@serNumCheck,w
  4520  050D  1903               	skipnz
  4521  050E  2D13               	goto	l278
  4522                           
  4523                           ;rc522.c: 624: {
  4524                           ;rc522.c: 625: _status = 2;
  4525  050F  3002               	movlw	2
  4526  0510  00B6               	movwf	??_MFRC522_AntiColl
  4527  0511  0836               	movf	??_MFRC522_AntiColl,w
  4528  0512  00BE               	movwf	MFRC522_AntiColl@_status
  4529  0513                     l278:	
  4530                           
  4531                           ;rc522.c: 626: }
  4532                           ;rc522.c: 627: }
  4533                           ;rc522.c: 628: return _status;
  4534  0513  083E               	movf	MFRC522_AntiColl@_status,w
  4535  0514  0008               	return
  4536  0515                     __end_of_MFRC522_AntiColl:	
  4537                           
  4538                           	psect	text14
  4539  05D3                     __ptext14:	
  4540 ;; *************** function _MFRC522_Init *****************
  4541 ;; Defined at:
  4542 ;;		line 148 in file "rc522.c"
  4543 ;; Parameters:    Size  Location     Type
  4544 ;;		None
  4545 ;; Auto vars:     Size  Location     Type
  4546 ;;		None
  4547 ;; Return value:  Size  Location     Type
  4548 ;;                  1    wreg      void 
  4549 ;; Registers used:
  4550 ;;		wreg, status,2, status,0, pclath, cstack
  4551 ;; Tracked objects:
  4552 ;;		On entry : 0/0
  4553 ;;		On exit  : 0/0
  4554 ;;		Unchanged: 0/0
  4555 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4556 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4557 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4558 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4559 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4560 ;;Total ram usage:        1 bytes
  4561 ;; Hardware stack levels used:    1
  4562 ;; Hardware stack levels required when called:    5
  4563 ;; This function calls:
  4564 ;;		_MFRC522_AntennaOn
  4565 ;;		_MFRC522_Reset
  4566 ;;		_WriteRegister
  4567 ;; This function is called by:
  4568 ;;		_main
  4569 ;; This function uses a non-reentrant model
  4570 ;;
  4571                           
  4572                           
  4573                           ;psect for function _MFRC522_Init
  4574  05D3                     _MFRC522_Init:	
  4575                           
  4576                           ;rc522.c: 150: LATCbits.LATC4 = 1;
  4577                           
  4578                           ;incstack = 0
  4579                           ; Regs used in _MFRC522_Init: [wreg+status,2+status,0+pclath+cstack]
  4580  05D3  0022               	movlb	2	; select bank2
  4581  05D4  160E               	bsf	14,4	;volatile
  4582                           
  4583                           ;rc522.c: 151: _delay((unsigned long)((50)*(8000000L/4000.0)));
  4584  05D5  3082               	movlw	130
  4585  05D6  0020               	movlb	0	; select bank0
  4586  05D7  00A2               	movwf	??_MFRC522_Init
  4587  05D8  30DD               	movlw	221
  4588  05D9                     u2707:	
  4589  05D9  0B89               	decfsz	9,f
  4590  05DA  2DD9               	goto	u2707
  4591  05DB  0BA2               	decfsz	??_MFRC522_Init,f
  4592  05DC  2DD9               	goto	u2707
  4593  05DD  3200               	nop2
  4594                           
  4595                           ;rc522.c: 152: LATCbits.LATC4 = 0;
  4596  05DE  0022               	movlb	2	; select bank2
  4597  05DF  120E               	bcf	14,4	;volatile
  4598                           
  4599                           ;rc522.c: 153: LATCbits.LATC5 = 1;
  4600  05E0  168E               	bsf	14,5	;volatile
  4601                           
  4602                           ;rc522.c: 154: _delay((unsigned long)((50)*(8000000L/4000.0)));
  4603  05E1  3082               	movlw	130
  4604  05E2  0020               	movlb	0	; select bank0
  4605  05E3  00A2               	movwf	??_MFRC522_Init
  4606  05E4  30DD               	movlw	221
  4607  05E5                     u2717:	
  4608  05E5  0B89               	decfsz	9,f
  4609  05E6  2DE5               	goto	u2717
  4610  05E7  0BA2               	decfsz	??_MFRC522_Init,f
  4611  05E8  2DE5               	goto	u2717
  4612  05E9  3200               	nop2
  4613                           
  4614                           ;rc522.c: 155: LATCbits.LATC5 = 0;
  4615  05EA  0022               	movlb	2	; select bank2
  4616  05EB  128E               	bcf	14,5	;volatile
  4617                           
  4618                           ;rc522.c: 174: MFRC522_Reset();
  4619  05EC  318E  26BC  3185   	fcall	_MFRC522_Reset
  4620                           
  4621                           ;rc522.c: 184: WriteRegister(0x2A, 0x8D );
  4622  05EF  308D               	movlw	141
  4623  05F0  0020               	movlb	0	; select bank0
  4624  05F1  00A2               	movwf	??_MFRC522_Init
  4625  05F2  0822               	movf	??_MFRC522_Init,w
  4626  05F3  00F6               	movwf	WriteRegister@val
  4627  05F4  302A               	movlw	42
  4628  05F5  318F  2711  3185   	fcall	_WriteRegister
  4629                           
  4630                           ;rc522.c: 185: WriteRegister( 0x2B, 0x3E );
  4631  05F8  303E               	movlw	62
  4632  05F9  0020               	movlb	0	; select bank0
  4633  05FA  00A2               	movwf	??_MFRC522_Init
  4634  05FB  0822               	movf	??_MFRC522_Init,w
  4635  05FC  00F6               	movwf	WriteRegister@val
  4636  05FD  302B               	movlw	43
  4637  05FE  318F  2711  3185   	fcall	_WriteRegister
  4638                           
  4639                           ;rc522.c: 187: WriteRegister( 0x2D, 30 );
  4640  0601  301E               	movlw	30
  4641  0602  0020               	movlb	0	; select bank0
  4642  0603  00A2               	movwf	??_MFRC522_Init
  4643  0604  0822               	movf	??_MFRC522_Init,w
  4644  0605  00F6               	movwf	WriteRegister@val
  4645  0606  302D               	movlw	45
  4646  0607  318F  2711  3185   	fcall	_WriteRegister
  4647                           
  4648                           ;rc522.c: 188: WriteRegister( 0x2C, 0 );
  4649  060A  01F6               	clrf	WriteRegister@val
  4650  060B  302C               	movlw	44
  4651  060C  318F  2711  3185   	fcall	_WriteRegister
  4652                           
  4653                           ;rc522.c: 190: WriteRegister( 0x15, 0x40 );
  4654  060F  3040               	movlw	64
  4655  0610  0020               	movlb	0	; select bank0
  4656  0611  00A2               	movwf	??_MFRC522_Init
  4657  0612  0822               	movf	??_MFRC522_Init,w
  4658  0613  00F6               	movwf	WriteRegister@val
  4659  0614  3015               	movlw	21
  4660  0615  318F  2711  3185   	fcall	_WriteRegister
  4661                           
  4662                           ;rc522.c: 191: WriteRegister( 0x11, 0x3D );
  4663  0618  303D               	movlw	61
  4664  0619  0020               	movlb	0	; select bank0
  4665  061A  00A2               	movwf	??_MFRC522_Init
  4666  061B  0822               	movf	??_MFRC522_Init,w
  4667  061C  00F6               	movwf	WriteRegister@val
  4668  061D  3011               	movlw	17
  4669  061E  318F  2711  3185   	fcall	_WriteRegister
  4670                           
  4671                           ;rc522.c: 197: MFRC522_AntennaOn();
  4672  0621  318E  26CD         	fcall	_MFRC522_AntennaOn
  4673  0623  0008               	return
  4674  0624                     __end_of_MFRC522_Init:	
  4675                           
  4676                           	psect	text15
  4677  0EBC                     __ptext15:	
  4678 ;; *************** function _MFRC522_Reset *****************
  4679 ;; Defined at:
  4680 ;;		line 130 in file "rc522.c"
  4681 ;; Parameters:    Size  Location     Type
  4682 ;;		None
  4683 ;; Auto vars:     Size  Location     Type
  4684 ;;		None
  4685 ;; Return value:  Size  Location     Type
  4686 ;;                  1    wreg      void 
  4687 ;; Registers used:
  4688 ;;		wreg, status,2, status,0, pclath, cstack
  4689 ;; Tracked objects:
  4690 ;;		On entry : 0/0
  4691 ;;		On exit  : 0/0
  4692 ;;		Unchanged: 0/0
  4693 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4694 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4695 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4696 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4697 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4698 ;;Total ram usage:        1 bytes
  4699 ;; Hardware stack levels used:    1
  4700 ;; Hardware stack levels required when called:    3
  4701 ;; This function calls:
  4702 ;;		_WriteRegister
  4703 ;; This function is called by:
  4704 ;;		_MFRC522_Init
  4705 ;; This function uses a non-reentrant model
  4706 ;;
  4707                           
  4708                           
  4709                           ;psect for function _MFRC522_Reset
  4710  0EBC                     _MFRC522_Reset:	
  4711                           
  4712                           ;rc522.c: 132: WriteRegister( 0x01, 0x0F );
  4713                           
  4714                           ;incstack = 0
  4715                           ; Regs used in _MFRC522_Reset: [wreg+status,2+status,0+pclath+cstack]
  4716  0EBC  300F               	movlw	15
  4717  0EBD  00F8               	movwf	??_MFRC522_Reset
  4718  0EBE  0878               	movf	??_MFRC522_Reset,w
  4719  0EBF  00F6               	movwf	WriteRegister@val
  4720  0EC0  3001               	movlw	1
  4721  0EC1  318F  2711         	fcall	_WriteRegister
  4722  0EC3  0008               	return
  4723  0EC4                     __end_of_MFRC522_Reset:	
  4724                           
  4725                           	psect	text16
  4726  0ECD                     __ptext16:	
  4727 ;; *************** function _MFRC522_AntennaOn *****************
  4728 ;; Defined at:
  4729 ;;		line 140 in file "rc522.c"
  4730 ;; Parameters:    Size  Location     Type
  4731 ;;		None
  4732 ;; Auto vars:     Size  Location     Type
  4733 ;;		None
  4734 ;; Return value:  Size  Location     Type
  4735 ;;                  1    wreg      void 
  4736 ;; Registers used:
  4737 ;;		wreg, status,2, status,0, pclath, cstack
  4738 ;; Tracked objects:
  4739 ;;		On entry : 0/0
  4740 ;;		On exit  : 0/0
  4741 ;;		Unchanged: 0/0
  4742 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4743 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4744 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4745 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4746 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4747 ;;Total ram usage:        1 bytes
  4748 ;; Hardware stack levels used:    1
  4749 ;; Hardware stack levels required when called:    4
  4750 ;; This function calls:
  4751 ;;		_MFRC522_Set_Bit
  4752 ;; This function is called by:
  4753 ;;		_MFRC522_Init
  4754 ;; This function uses a non-reentrant model
  4755 ;;
  4756                           
  4757                           
  4758                           ;psect for function _MFRC522_AntennaOn
  4759  0ECD                     _MFRC522_AntennaOn:	
  4760                           
  4761                           ;rc522.c: 142: MFRC522_Set_Bit( 0x14, 0x03 );
  4762                           
  4763                           ;incstack = 0
  4764                           ; Regs used in _MFRC522_AntennaOn: [wreg+status,2+status,0+pclath+cstack]
  4765  0ECD  3003               	movlw	3
  4766  0ECE  0020               	movlb	0	; select bank0
  4767  0ECF  00A1               	movwf	??_MFRC522_AntennaOn
  4768  0ED0  0821               	movf	??_MFRC522_AntennaOn,w
  4769  0ED1  00F8               	movwf	MFRC522_Set_Bit@mask
  4770  0ED2  3014               	movlw	20
  4771  0ED3  318F  271F         	fcall	_MFRC522_Set_Bit
  4772  0ED5  0008               	return
  4773  0ED6                     __end_of_MFRC522_AntennaOn:	
  4774                           
  4775                           	psect	text17
  4776  0724                     __ptext17:	
  4777 ;; *************** function _MFRC522_Halt *****************
  4778 ;; Defined at:
  4779 ;;		line 516 in file "rc522.c"
  4780 ;; Parameters:    Size  Location     Type
  4781 ;;		None
  4782 ;; Auto vars:     Size  Location     Type
  4783 ;;  buff            4   26[BANK0 ] unsigned char [4]
  4784 ;;  unLen           2   30[BANK0 ] unsigned int 
  4785 ;; Return value:  Size  Location     Type
  4786 ;;                  1    wreg      void 
  4787 ;; Registers used:
  4788 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4789 ;; Tracked objects:
  4790 ;;		On entry : 0/0
  4791 ;;		On exit  : 0/0
  4792 ;;		Unchanged: 0/0
  4793 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4794 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4795 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4796 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4797 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4798 ;;Total ram usage:       10 bytes
  4799 ;; Hardware stack levels used:    1
  4800 ;; Hardware stack levels required when called:    5
  4801 ;; This function calls:
  4802 ;;		_MFRC522_CRC
  4803 ;;		_MFRC522_Clear_Bit
  4804 ;;		_MFRC522_ToCard
  4805 ;; This function is called by:
  4806 ;;		_main
  4807 ;; This function uses a non-reentrant model
  4808 ;;
  4809                           
  4810                           
  4811                           ;psect for function _MFRC522_Halt
  4812  0724                     _MFRC522_Halt:	
  4813                           
  4814                           ;rc522.c: 518: unsigned unLen;
  4815                           ;rc522.c: 519: char buff[4];
  4816                           ;rc522.c: 521: buff[0] = 0x50;
  4817                           
  4818                           ;incstack = 0
  4819                           ; Regs used in _MFRC522_Halt: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4820  0724  3050               	movlw	80
  4821  0725  0020               	movlb	0	; select bank0
  4822  0726  00B6               	movwf	??_MFRC522_Halt
  4823  0727  0836               	movf	??_MFRC522_Halt,w
  4824  0728  00BA               	movwf	MFRC522_Halt@buff
  4825                           
  4826                           ;rc522.c: 522: buff[1] = 0;
  4827  0729  01BB               	clrf	MFRC522_Halt@buff+1
  4828                           
  4829                           ;rc522.c: 523: MFRC522_CRC( buff, 2, &buff[2] );
  4830  072A  3002               	movlw	2
  4831  072B  00B6               	movwf	??_MFRC522_Halt
  4832  072C  0836               	movf	??_MFRC522_Halt,w
  4833  072D  00A2               	movwf	MFRC522_CRC@length
  4834  072E  303C               	movlw	(low ((MFRC522_Halt@buff| 0+2)))& (0+255)
  4835  072F  00B7               	movwf	??_MFRC522_Halt+1
  4836  0730  0837               	movf	??_MFRC522_Halt+1,w
  4837  0731  00A3               	movwf	MFRC522_CRC@dataOut
  4838  0732  303A               	movlw	(low (MFRC522_Halt@buff| 0))& (0+255)
  4839  0733  3185  2515  3187   	fcall	_MFRC522_CRC
  4840                           
  4841                           ;rc522.c: 524: MFRC522_Clear_Bit( 0x08, 0x80 );
  4842  0736  3080               	movlw	128
  4843  0737  0020               	movlb	0	; select bank0
  4844  0738  00B6               	movwf	??_MFRC522_Halt
  4845  0739  0836               	movf	??_MFRC522_Halt,w
  4846  073A  00F8               	movwf	MFRC522_Clear_Bit@mask
  4847  073B  3008               	movlw	8
  4848  073C  318F  273E  3187   	fcall	_MFRC522_Clear_Bit
  4849                           
  4850                           ;rc522.c: 525: MFRC522_ToCard( 0x0C, buff, 4, buff, &unLen );
  4851  073F  303A               	movlw	(low (MFRC522_Halt@buff| 0))& (0+255)
  4852  0740  0020               	movlb	0	; select bank0
  4853  0741  00B6               	movwf	??_MFRC522_Halt
  4854  0742  0836               	movf	??_MFRC522_Halt,w
  4855  0743  00A2               	movwf	MFRC522_ToCard@sendData
  4856  0744  3004               	movlw	4
  4857  0745  00B7               	movwf	??_MFRC522_Halt+1
  4858  0746  0837               	movf	??_MFRC522_Halt+1,w
  4859  0747  00A3               	movwf	MFRC522_ToCard@sendLen
  4860  0748  303A               	movlw	(low (MFRC522_Halt@buff| 0))& (0+255)
  4861  0749  00B8               	movwf	??_MFRC522_Halt+2
  4862  074A  0838               	movf	??_MFRC522_Halt+2,w
  4863  074B  00A4               	movwf	MFRC522_ToCard@backData
  4864  074C  303E               	movlw	(low (MFRC522_Halt@unLen| 0))& (0+255)
  4865  074D  00B9               	movwf	??_MFRC522_Halt+3
  4866  074E  0839               	movf	??_MFRC522_Halt+3,w
  4867  074F  00A5               	movwf	MFRC522_ToCard@backLen
  4868  0750  300C               	movlw	12
  4869  0751  3182  2280  3187   	fcall	_MFRC522_ToCard
  4870                           
  4871                           ;rc522.c: 526: MFRC522_Clear_Bit( 0x08, 0x08 );
  4872  0754  3008               	movlw	8
  4873  0755  0020               	movlb	0	; select bank0
  4874  0756  00B6               	movwf	??_MFRC522_Halt
  4875  0757  0836               	movf	??_MFRC522_Halt,w
  4876  0758  00F8               	movwf	MFRC522_Clear_Bit@mask
  4877  0759  3008               	movlw	8
  4878  075A  318F  273E         	fcall	_MFRC522_Clear_Bit
  4879  075C  0008               	return
  4880  075D                     __end_of_MFRC522_Halt:	
  4881                           
  4882                           	psect	text18
  4883  0280                     __ptext18:	
  4884 ;; *************** function _MFRC522_ToCard *****************
  4885 ;; Defined at:
  4886 ;;		line 219 in file "rc522.c"
  4887 ;; Parameters:    Size  Location     Type
  4888 ;;  command         1    wreg     unsigned char 
  4889 ;;  sendData        1    2[BANK0 ] PTR unsigned char 
  4890 ;;		 -> MFRC522_Write@buff(18), MFRC522_Auth@buff(12), MFRC522_Halt@buff(4), MFRC522_SelectTag@buffer(9), 
  4891 ;;		 -> main@UID(6), main@TagType(1), 
  4892 ;;  sendLen         1    3[BANK0 ] unsigned char 
  4893 ;;  backData        1    4[BANK0 ] PTR unsigned char 
  4894 ;;		 -> MFRC522_Write@buff(18), MFRC522_Auth@buff(12), MFRC522_Halt@buff(4), MFRC522_SelectTag@buffer(9), 
  4895 ;;		 -> main@UID(6), main@TagType(1), 
  4896 ;;  backLen         1    5[BANK0 ] PTR unsigned int 
  4897 ;;		 -> MFRC522_AntiColl@unLen(2), MFRC522_Read@unLen(2), MFRC522_Write@recvBits(2), MFRC522_Auth@recvBits(2), 
  4898 ;;		 -> MFRC522_Halt@unLen(2), MFRC522_SelectTag@recvBits(2), MFRC522_Request@backBits(2), 
  4899 ;; Auto vars:     Size  Location     Type
  4900 ;;  command         1   18[BANK0 ] unsigned char 
  4901 ;;  i               2   19[BANK0 ] unsigned int 
  4902 ;;  n               1   21[BANK0 ] unsigned char 
  4903 ;;  irqEn           1   17[BANK0 ] unsigned char 
  4904 ;;  lastBits        1   16[BANK0 ] unsigned char 
  4905 ;;  _status         1   15[BANK0 ] unsigned char 
  4906 ;;  waitIRq         1   14[BANK0 ] unsigned char 
  4907 ;; Return value:  Size  Location     Type
  4908 ;;                  1    wreg      unsigned char 
  4909 ;; Registers used:
  4910 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4911 ;; Tracked objects:
  4912 ;;		On entry : 0/0
  4913 ;;		On exit  : 0/0
  4914 ;;		Unchanged: 0/0
  4915 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4916 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4917 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4918 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4919 ;;      Totals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4920 ;;Total ram usage:       20 bytes
  4921 ;; Hardware stack levels used:    1
  4922 ;; Hardware stack levels required when called:    4
  4923 ;; This function calls:
  4924 ;;		_MFRC522_Clear_Bit
  4925 ;;		_MFRC522_Set_Bit
  4926 ;;		_ReadRegister
  4927 ;;		_WriteRegister
  4928 ;; This function is called by:
  4929 ;;		_MFRC522_Request
  4930 ;;		_MFRC522_SelectTag
  4931 ;;		_MFRC522_Halt
  4932 ;;		_MFRC522_AntiColl
  4933 ;;		_MFRC522_Auth
  4934 ;;		_MFRC522_Write
  4935 ;;		_MFRC522_Read
  4936 ;; This function uses a non-reentrant model
  4937 ;;
  4938                           
  4939                           
  4940                           ;psect for function _MFRC522_ToCard
  4941  0280                     _MFRC522_ToCard:	
  4942                           
  4943                           ;incstack = 0
  4944                           ; Regs used in _MFRC522_ToCard: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4945                           ;MFRC522_ToCard@command stored from wreg
  4946  0280  0020               	movlb	0	; select bank0
  4947  0281  00B2               	movwf	MFRC522_ToCard@command
  4948                           
  4949                           ;rc522.c: 221: char _status = 2;
  4950  0282  3002               	movlw	2
  4951  0283  00A6               	movwf	??_MFRC522_ToCard
  4952  0284  0826               	movf	??_MFRC522_ToCard,w
  4953  0285  00AF               	movwf	MFRC522_ToCard@_status
  4954                           
  4955                           ;rc522.c: 222: char irqEn = 0x00;
  4956  0286  01B1               	clrf	MFRC522_ToCard@irqEn
  4957                           
  4958                           ;rc522.c: 223: char waitIRq = 0x00;
  4959  0287  01AE               	clrf	MFRC522_ToCard@waitIRq
  4960                           
  4961                           ;rc522.c: 224: char lastBits;
  4962                           ;rc522.c: 225: char n;
  4963                           ;rc522.c: 226: unsigned int i;
  4964                           ;rc522.c: 235: switch (command)
  4965  0288  2A98               	goto	l2633
  4966  0289                     l2627:	
  4967                           ;rc522.c: 236: {
  4968                           ;rc522.c: 237: case 0x0E:
  4969                           
  4970                           
  4971                           ;rc522.c: 238: {
  4972                           ;rc522.c: 239: irqEn = 0x12;
  4973  0289  3012               	movlw	18
  4974  028A  00A6               	movwf	??_MFRC522_ToCard
  4975  028B  0826               	movf	??_MFRC522_ToCard,w
  4976  028C  00B1               	movwf	MFRC522_ToCard@irqEn
  4977                           
  4978                           ;rc522.c: 240: waitIRq = 0x10;
  4979  028D  3010               	movlw	16
  4980  028E  2A94               	goto	L1
  4981  028F                     l2629:	
  4982                           ;rc522.c: 242: }
  4983                           ;rc522.c: 243: case 0x0C:
  4984                           
  4985                           ;rc522.c: 241: break;
  4986                           
  4987                           
  4988                           ;rc522.c: 244: {
  4989                           ;rc522.c: 245: irqEn = 0x77;
  4990  028F  3077               	movlw	119
  4991  0290  00A6               	movwf	??_MFRC522_ToCard
  4992  0291  0826               	movf	??_MFRC522_ToCard,w
  4993  0292  00B1               	movwf	MFRC522_ToCard@irqEn
  4994                           
  4995                           ;rc522.c: 246: waitIRq = 0x30;
  4996  0293  3030               	movlw	48
  4997  0294                     L1:	
  4998  0294  00A6               	movwf	??_MFRC522_ToCard
  4999  0295  0826               	movf	??_MFRC522_ToCard,w
  5000  0296  00AE               	movwf	MFRC522_ToCard@waitIRq
  5001                           
  5002                           ;rc522.c: 251: }
  5003                           
  5004                           ;rc522.c: 250: break;
  5005                           
  5006                           ;rc522.c: 248: }
  5007                           ;rc522.c: 249: default:
  5008                           
  5009                           ;rc522.c: 247: break;
  5010  0297  2AA0               	goto	l2635
  5011  0298                     l2633:	
  5012  0298  0832               	movf	MFRC522_ToCard@command,w
  5013                           
  5014                           ; Switch size 1, requested type "space"
  5015                           ; Number of cases is 2, Range of values is 12 to 14
  5016                           ; switch strategies available:
  5017                           ; Name         Instructions Cycles
  5018                           ; simple_byte            7     4 (average)
  5019                           ; direct_byte           15     9 (fixed)
  5020                           ; jumptable            263     9 (fixed)
  5021                           ;	Chosen strategy is simple_byte
  5022  0299  3A0C               	xorlw	12	; case 12
  5023  029A  1903               	skipnz
  5024  029B  2A8F               	goto	l2629
  5025  029C  3A02               	xorlw	2	; case 14
  5026  029D  1903               	skipnz
  5027  029E  2A89               	goto	l2627
  5028  029F  2AA0               	goto	l2635
  5029  02A0                     l2635:	
  5030                           
  5031                           ;rc522.c: 254: WriteRegister( 0x02, irqEn | 0x80 );
  5032  02A0  0831               	movf	MFRC522_ToCard@irqEn,w
  5033  02A1  3880               	iorlw	128
  5034  02A2  00A6               	movwf	??_MFRC522_ToCard
  5035  02A3  0826               	movf	??_MFRC522_ToCard,w
  5036  02A4  00F6               	movwf	WriteRegister@val
  5037  02A5  3002               	movlw	2
  5038  02A6  318F  2711  3182   	fcall	_WriteRegister
  5039                           
  5040                           ;rc522.c: 255: MFRC522_Clear_Bit( 0x04, 0x80 );
  5041  02A9  3080               	movlw	128
  5042  02AA  0020               	movlb	0	; select bank0
  5043  02AB  00A6               	movwf	??_MFRC522_ToCard
  5044  02AC  0826               	movf	??_MFRC522_ToCard,w
  5045  02AD  00F8               	movwf	MFRC522_Clear_Bit@mask
  5046  02AE  3004               	movlw	4
  5047  02AF  318F  273E  3182   	fcall	_MFRC522_Clear_Bit
  5048                           
  5049                           ;rc522.c: 256: MFRC522_Set_Bit( 0x0A, 0x80 );
  5050  02B2  3080               	movlw	128
  5051  02B3  0020               	movlb	0	; select bank0
  5052  02B4  00A6               	movwf	??_MFRC522_ToCard
  5053  02B5  0826               	movf	??_MFRC522_ToCard,w
  5054  02B6  00F8               	movwf	MFRC522_Set_Bit@mask
  5055  02B7  300A               	movlw	10
  5056  02B8  318F  271F  3182   	fcall	_MFRC522_Set_Bit
  5057                           
  5058                           ;rc522.c: 257: WriteRegister( 0x01, 0x00 );
  5059  02BB  01F6               	clrf	WriteRegister@val
  5060  02BC  3001               	movlw	1
  5061  02BD  318F  2711  3182   	fcall	_WriteRegister
  5062                           
  5063                           ;rc522.c: 260: for ( i=0; i < sendLen; i++ )
  5064  02C0  0020               	movlb	0	; select bank0
  5065  02C1  01B3               	clrf	MFRC522_ToCard@i
  5066  02C2  01B4               	clrf	MFRC522_ToCard@i+1
  5067  02C3                     l2643:	
  5068  02C3  0823               	movf	MFRC522_ToCard@sendLen,w
  5069  02C4  00A6               	movwf	??_MFRC522_ToCard
  5070  02C5  01A7               	clrf	??_MFRC522_ToCard+1
  5071  02C6  0827               	movf	??_MFRC522_ToCard+1,w
  5072  02C7  0234               	subwf	MFRC522_ToCard@i+1,w
  5073  02C8  1D03               	skipz
  5074  02C9  2ACC               	goto	u1785
  5075  02CA  0826               	movf	??_MFRC522_ToCard,w
  5076  02CB  0233               	subwf	MFRC522_ToCard@i,w
  5077  02CC                     u1785:	
  5078  02CC  1803               	btfsc	3,0
  5079  02CD  2AE2               	goto	l2645
  5080                           
  5081                           ;rc522.c: 261: {
  5082                           ;rc522.c: 262: WriteRegister( 0x09, sendData[i] );
  5083  02CE  0833               	movf	MFRC522_ToCard@i,w
  5084  02CF  0722               	addwf	MFRC522_ToCard@sendData,w
  5085  02D0  00A6               	movwf	??_MFRC522_ToCard
  5086  02D1  0826               	movf	??_MFRC522_ToCard,w
  5087  02D2  0086               	movwf	6
  5088  02D3  0187               	clrf	7
  5089  02D4  0801               	movf	1,w
  5090  02D5  00A7               	movwf	??_MFRC522_ToCard+1
  5091  02D6  0827               	movf	??_MFRC522_ToCard+1,w
  5092  02D7  00F6               	movwf	WriteRegister@val
  5093  02D8  3009               	movlw	9
  5094  02D9  318F  2711  3182   	fcall	_WriteRegister
  5095  02DC  3001               	movlw	1
  5096  02DD  0020               	movlb	0	; select bank0
  5097  02DE  07B3               	addwf	MFRC522_ToCard@i,f
  5098  02DF  3000               	movlw	0
  5099  02E0  3DB4               	addwfc	MFRC522_ToCard@i+1,f
  5100  02E1  2AC3               	goto	l2643
  5101  02E2                     l2645:	
  5102                           
  5103                           ;rc522.c: 263: }
  5104                           ;rc522.c: 265: WriteRegister( 0x01, command );
  5105  02E2  0832               	movf	MFRC522_ToCard@command,w
  5106  02E3  00A6               	movwf	??_MFRC522_ToCard
  5107  02E4  0826               	movf	??_MFRC522_ToCard,w
  5108  02E5  00F6               	movwf	WriteRegister@val
  5109  02E6  3001               	movlw	1
  5110  02E7  318F  2711  3182   	fcall	_WriteRegister
  5111                           
  5112                           ;rc522.c: 266: if (command == 0x0C )
  5113  02EA  300C               	movlw	12
  5114  02EB  0020               	movlb	0	; select bank0
  5115  02EC  0632               	xorwf	MFRC522_ToCard@command,w
  5116  02ED  1D03               	btfss	3,2
  5117  02EE  2AF7               	goto	l2651
  5118                           
  5119                           ;rc522.c: 267: {
  5120                           ;rc522.c: 268: MFRC522_Set_Bit( 0x0D, 0x80 );
  5121  02EF  3080               	movlw	128
  5122  02F0  00A6               	movwf	??_MFRC522_ToCard
  5123  02F1  0826               	movf	??_MFRC522_ToCard,w
  5124  02F2  00F8               	movwf	MFRC522_Set_Bit@mask
  5125  02F3  300D               	movlw	13
  5126  02F4  318F  271F  3182   	fcall	_MFRC522_Set_Bit
  5127  02F7                     l2651:	
  5128                           
  5129                           ;rc522.c: 269: }
  5130                           ;rc522.c: 273: i = 2000;
  5131  02F7  30D0               	movlw	208
  5132  02F8  0020               	movlb	0	; select bank0
  5133  02F9  00B3               	movwf	MFRC522_ToCard@i
  5134  02FA  3007               	movlw	7
  5135  02FB  00B4               	movwf	MFRC522_ToCard@i+1
  5136  02FC                     l2653:	
  5137                           ;rc522.c: 274: do
  5138                           
  5139                           
  5140                           ;rc522.c: 275: {
  5141                           ;rc522.c: 278: n = ReadRegister( 0x04 );
  5142  02FC  3004               	movlw	4
  5143  02FD  318F  2760  3182   	fcall	_ReadRegister
  5144  0300  0020               	movlb	0	; select bank0
  5145  0301  00A6               	movwf	??_MFRC522_ToCard
  5146  0302  0826               	movf	??_MFRC522_ToCard,w
  5147  0303  00B5               	movwf	MFRC522_ToCard@n
  5148                           
  5149                           ;rc522.c: 279: i--;
  5150  0304  3001               	movlw	1
  5151  0305  02B3               	subwf	MFRC522_ToCard@i,f
  5152  0306  3000               	movlw	0
  5153  0307  3BB4               	subwfb	MFRC522_ToCard@i+1,f
  5154                           
  5155                           ;rc522.c: 280: } while ((i!=0) && !(n&0x01) && !(n&waitIRq));
  5156  0308  0833               	movf	MFRC522_ToCard@i,w
  5157  0309  0434               	iorwf	MFRC522_ToCard@i+1,w
  5158  030A  1D03               	btfss	3,2
  5159  030B  1835               	btfsc	MFRC522_ToCard@n,0
  5160  030C  2B11               	goto	l2661
  5161  030D  0835               	movf	MFRC522_ToCard@n,w
  5162  030E  052E               	andwf	MFRC522_ToCard@waitIRq,w
  5163  030F  1903               	btfsc	3,2
  5164  0310  2AFC               	goto	l2653
  5165  0311                     l2661:	
  5166                           
  5167                           ;rc522.c: 286: MFRC522_Clear_Bit( 0x0D, 0x80 );
  5168  0311  3080               	movlw	128
  5169  0312  00A6               	movwf	??_MFRC522_ToCard
  5170  0313  0826               	movf	??_MFRC522_ToCard,w
  5171  0314  00F8               	movwf	MFRC522_Clear_Bit@mask
  5172  0315  300D               	movlw	13
  5173  0316  318F  273E  3182   	fcall	_MFRC522_Clear_Bit
  5174                           
  5175                           ;rc522.c: 287: if (i != 0)
  5176  0319  0020               	movlb	0	; select bank0
  5177  031A  0833               	movf	MFRC522_ToCard@i,w
  5178  031B  0434               	iorwf	MFRC522_ToCard@i+1,w
  5179  031C  1903               	btfsc	3,2
  5180  031D  2BA8               	goto	l209
  5181                           
  5182                           ;rc522.c: 288: {
  5183                           ;rc522.c: 289: if( !( ReadRegister( 0x06 ) & 0x1B ) )
  5184  031E  3006               	movlw	6
  5185  031F  318F  2760  3182   	fcall	_ReadRegister
  5186  0322  391B               	andlw	27
  5187  0323  1D03               	btfss	3,2
  5188  0324  2BA3               	goto	l2699
  5189                           
  5190                           ;rc522.c: 290: {
  5191                           ;rc522.c: 291: _status = 0;
  5192  0325  0020               	movlb	0	; select bank0
  5193  0326  01AF               	clrf	MFRC522_ToCard@_status
  5194                           
  5195                           ;rc522.c: 292: if ( n & irqEn & 0x01 )
  5196  0327  0831               	movf	MFRC522_ToCard@irqEn,w
  5197  0328  0535               	andwf	MFRC522_ToCard@n,w
  5198  0329  00A6               	movwf	??_MFRC522_ToCard
  5199  032A  1C26               	btfss	??_MFRC522_ToCard,0
  5200  032B  2B2E               	goto	l2673
  5201                           
  5202                           ;rc522.c: 293: {
  5203                           ;rc522.c: 294: _status = 1;
  5204  032C  01AF               	clrf	MFRC522_ToCard@_status
  5205  032D  0AAF               	incf	MFRC522_ToCard@_status,f
  5206  032E                     l2673:	
  5207                           
  5208                           ;rc522.c: 295: }
  5209                           ;rc522.c: 296: if ( command == 0x0C )
  5210  032E  300C               	movlw	12
  5211  032F  0632               	xorwf	MFRC522_ToCard@command,w
  5212  0330  1D03               	btfss	3,2
  5213  0331  2BA8               	goto	l209
  5214                           
  5215                           ;rc522.c: 297: {
  5216                           ;rc522.c: 298: n = ReadRegister( 0x0A );
  5217  0332  300A               	movlw	10
  5218  0333  318F  2760  3182   	fcall	_ReadRegister
  5219  0336  0020               	movlb	0	; select bank0
  5220  0337  00A6               	movwf	??_MFRC522_ToCard
  5221  0338  0826               	movf	??_MFRC522_ToCard,w
  5222  0339  00B5               	movwf	MFRC522_ToCard@n
  5223                           
  5224                           ;rc522.c: 299: lastBits = ReadRegister( 0x0C ) & 0x07;
  5225  033A  300C               	movlw	12
  5226  033B  318F  2760  3182   	fcall	_ReadRegister
  5227  033E  3907               	andlw	7
  5228  033F  0020               	movlb	0	; select bank0
  5229  0340  00A6               	movwf	??_MFRC522_ToCard
  5230  0341  0826               	movf	??_MFRC522_ToCard,w
  5231  0342  00B0               	movwf	MFRC522_ToCard@lastBits
  5232                           
  5233                           ;rc522.c: 300: if (lastBits)
  5234  0343  0830               	movf	MFRC522_ToCard@lastBits,w
  5235  0344  1903               	btfsc	3,2
  5236  0345  2B66               	goto	l2681
  5237                           
  5238                           ;rc522.c: 301: {
  5239                           ;rc522.c: 302: *backLen = (n-1) * 8 + lastBits;
  5240  0346  0830               	movf	MFRC522_ToCard@lastBits,w
  5241  0347  00A6               	movwf	??_MFRC522_ToCard
  5242  0348  01A7               	clrf	??_MFRC522_ToCard+1
  5243  0349  0835               	movf	MFRC522_ToCard@n,w
  5244  034A  00A8               	movwf	??_MFRC522_ToCard+2
  5245  034B  01A9               	clrf	??_MFRC522_ToCard+3
  5246  034C  35A8               	lslf	??_MFRC522_ToCard+2,f
  5247  034D  0DA9               	rlf	??_MFRC522_ToCard+3,f
  5248  034E  35A8               	lslf	??_MFRC522_ToCard+2,f
  5249  034F  0DA9               	rlf	??_MFRC522_ToCard+3,f
  5250  0350  35A8               	lslf	??_MFRC522_ToCard+2,f
  5251  0351  0DA9               	rlf	??_MFRC522_ToCard+3,f
  5252  0352  0826               	movf	??_MFRC522_ToCard,w
  5253  0353  0728               	addwf	??_MFRC522_ToCard+2,w
  5254  0354  00AA               	movwf	??_MFRC522_ToCard+4
  5255  0355  0827               	movf	??_MFRC522_ToCard+1,w
  5256  0356  3D29               	addwfc	??_MFRC522_ToCard+3,w
  5257  0357  00AB               	movwf	??_MFRC522_ToCard+5
  5258  0358  082A               	movf	??_MFRC522_ToCard+4,w
  5259  0359  3EF8               	addlw	248
  5260  035A  00AC               	movwf	??_MFRC522_ToCard+6
  5261  035B  30FF               	movlw	255
  5262  035C  3D2B               	addwfc	??_MFRC522_ToCard+5,w
  5263  035D  00AD               	movwf	??_MFRC522_ToCard+7
  5264  035E  0825               	movf	MFRC522_ToCard@backLen,w
  5265  035F  0086               	movwf	6
  5266  0360  0187               	clrf	7
  5267  0361  082C               	movf	??_MFRC522_ToCard+6,w
  5268  0362  3FC0               	movwi [0]fsr1
  5269  0363  082D               	movf	??_MFRC522_ToCard+7,w
  5270  0364  3FC1               	movwi [1]fsr1
  5271                           
  5272                           ;rc522.c: 303: }
  5273  0365  2B76               	goto	l2683
  5274  0366                     l2681:	
  5275                           
  5276                           ;rc522.c: 304: else
  5277                           ;rc522.c: 305: {
  5278                           ;rc522.c: 306: *backLen = n * 8;
  5279  0366  0835               	movf	MFRC522_ToCard@n,w
  5280  0367  00A6               	movwf	??_MFRC522_ToCard
  5281  0368  01A7               	clrf	??_MFRC522_ToCard+1
  5282  0369  35A6               	lslf	??_MFRC522_ToCard,f
  5283  036A  0DA7               	rlf	??_MFRC522_ToCard+1,f
  5284  036B  35A6               	lslf	??_MFRC522_ToCard,f
  5285  036C  0DA7               	rlf	??_MFRC522_ToCard+1,f
  5286  036D  35A6               	lslf	??_MFRC522_ToCard,f
  5287  036E  0DA7               	rlf	??_MFRC522_ToCard+1,f
  5288  036F  0825               	movf	MFRC522_ToCard@backLen,w
  5289  0370  0086               	movwf	6
  5290  0371  0187               	clrf	7
  5291  0372  0826               	movf	??_MFRC522_ToCard,w
  5292  0373  3FC0               	movwi [0]fsr1
  5293  0374  0827               	movf	??_MFRC522_ToCard+1,w
  5294  0375  3FC1               	movwi [1]fsr1
  5295  0376                     l2683:	
  5296                           
  5297                           ;rc522.c: 307: }
  5298                           ;rc522.c: 308: if (n == 0)
  5299  0376  0835               	movf	MFRC522_ToCard@n,w
  5300  0377  1D03               	btfss	3,2
  5301  0378  2B7B               	goto	l2687
  5302                           
  5303                           ;rc522.c: 309: {
  5304                           ;rc522.c: 310: n = 1;
  5305  0379  01B5               	clrf	MFRC522_ToCard@n
  5306  037A  0AB5               	incf	MFRC522_ToCard@n,f
  5307  037B                     l2687:	
  5308                           
  5309                           ;rc522.c: 311: }
  5310                           ;rc522.c: 312: if (n > 16)
  5311  037B  3011               	movlw	17
  5312  037C  0235               	subwf	MFRC522_ToCard@n,w
  5313  037D  1C03               	skipc
  5314  037E  2B83               	goto	l2691
  5315                           
  5316                           ;rc522.c: 313: {
  5317                           ;rc522.c: 314: n = 16;
  5318  037F  3010               	movlw	16
  5319  0380  00A6               	movwf	??_MFRC522_ToCard
  5320  0381  0826               	movf	??_MFRC522_ToCard,w
  5321  0382  00B5               	movwf	MFRC522_ToCard@n
  5322  0383                     l2691:	
  5323                           
  5324                           ;rc522.c: 315: }
  5325                           ;rc522.c: 317: for (i=0; i < n; i++)
  5326  0383  01B3               	clrf	MFRC522_ToCard@i
  5327  0384  01B4               	clrf	MFRC522_ToCard@i+1
  5328  0385                     l2697:	
  5329  0385  0835               	movf	MFRC522_ToCard@n,w
  5330  0386  00A6               	movwf	??_MFRC522_ToCard
  5331  0387  01A7               	clrf	??_MFRC522_ToCard+1
  5332  0388  0827               	movf	??_MFRC522_ToCard+1,w
  5333  0389  0234               	subwf	MFRC522_ToCard@i+1,w
  5334  038A  1D03               	skipz
  5335  038B  2B8E               	goto	u1905
  5336  038C  0826               	movf	??_MFRC522_ToCard,w
  5337  038D  0233               	subwf	MFRC522_ToCard@i,w
  5338  038E                     u1905:	
  5339  038E  1803               	btfsc	3,0
  5340  038F  2BA8               	goto	l209
  5341                           
  5342                           ;rc522.c: 318: {
  5343                           ;rc522.c: 319: backData[i] = ReadRegister( 0x09 );
  5344  0390  3009               	movlw	9
  5345  0391  318F  2760  3182   	fcall	_ReadRegister
  5346  0394  0020               	movlb	0	; select bank0
  5347  0395  00A6               	movwf	??_MFRC522_ToCard
  5348  0396  0833               	movf	MFRC522_ToCard@i,w
  5349  0397  0724               	addwf	MFRC522_ToCard@backData,w
  5350  0398  00A7               	movwf	??_MFRC522_ToCard+1
  5351  0399  0827               	movf	??_MFRC522_ToCard+1,w
  5352  039A  0086               	movwf	6
  5353  039B  0187               	clrf	7
  5354  039C  0826               	movf	??_MFRC522_ToCard,w
  5355  039D  0081               	movwf	1
  5356  039E  3001               	movlw	1
  5357  039F  07B3               	addwf	MFRC522_ToCard@i,f
  5358  03A0  3000               	movlw	0
  5359  03A1  3DB4               	addwfc	MFRC522_ToCard@i+1,f
  5360  03A2  2B85               	goto	l2697
  5361  03A3                     l2699:	
  5362                           ;rc522.c: 320: }
  5363                           ;rc522.c: 323: }
  5364                           ;rc522.c: 324: }
  5365                           
  5366                           
  5367                           ;rc522.c: 325: else
  5368                           ;rc522.c: 326: {
  5369                           ;rc522.c: 327: _status = 2;
  5370  03A3  3002               	movlw	2
  5371  03A4  0020               	movlb	0	; select bank0
  5372  03A5  00A6               	movwf	??_MFRC522_ToCard
  5373  03A6  0826               	movf	??_MFRC522_ToCard,w
  5374  03A7  00AF               	movwf	MFRC522_ToCard@_status
  5375  03A8                     l209:	
  5376                           
  5377                           ;rc522.c: 328: }
  5378                           ;rc522.c: 329: }
  5379                           ;rc522.c: 332: return _status;
  5380  03A8  082F               	movf	MFRC522_ToCard@_status,w
  5381  03A9  0008               	return
  5382  03AA                     __end_of_MFRC522_ToCard:	
  5383                           
  5384                           	psect	text19
  5385  0515                     __ptext19:	
  5386 ;; *************** function _MFRC522_CRC *****************
  5387 ;; Defined at:
  5388 ;;		line 452 in file "rc522.c"
  5389 ;; Parameters:    Size  Location     Type
  5390 ;;  dataIn          1    wreg     PTR unsigned char 
  5391 ;;		 -> MFRC522_Write@buff(18), MFRC522_Halt@buff(4), MFRC522_SelectTag@buffer(9), 
  5392 ;;  length          1    2[BANK0 ] unsigned char 
  5393 ;;  dataOut         1    3[BANK0 ] PTR unsigned char 
  5394 ;;		 -> MFRC522_Write@buff(18), MFRC522_Halt@buff(4), MFRC522_SelectTag@buffer(9), 
  5395 ;; Auto vars:     Size  Location     Type
  5396 ;;  dataIn          1    6[BANK0 ] PTR unsigned char 
  5397 ;;		 -> MFRC522_Write@buff(18), MFRC522_Halt@buff(4), MFRC522_SelectTag@buffer(9), 
  5398 ;;  i               1    7[BANK0 ] unsigned char 
  5399 ;;  n               1    5[BANK0 ] unsigned char 
  5400 ;; Return value:  Size  Location     Type
  5401 ;;                  1    wreg      void 
  5402 ;; Registers used:
  5403 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5404 ;; Tracked objects:
  5405 ;;		On entry : 0/0
  5406 ;;		On exit  : 0/0
  5407 ;;		Unchanged: 0/0
  5408 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5409 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5410 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5411 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5412 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5413 ;;Total ram usage:        6 bytes
  5414 ;; Hardware stack levels used:    1
  5415 ;; Hardware stack levels required when called:    4
  5416 ;; This function calls:
  5417 ;;		_MFRC522_Clear_Bit
  5418 ;;		_MFRC522_Set_Bit
  5419 ;;		_ReadRegister
  5420 ;;		_WriteRegister
  5421 ;; This function is called by:
  5422 ;;		_MFRC522_SelectTag
  5423 ;;		_MFRC522_Halt
  5424 ;;		_MFRC522_Write
  5425 ;;		_MFRC522_Read
  5426 ;; This function uses a non-reentrant model
  5427 ;;
  5428                           
  5429                           
  5430                           ;psect for function _MFRC522_CRC
  5431  0515                     _MFRC522_CRC:	
  5432                           
  5433                           ;incstack = 0
  5434                           ; Regs used in _MFRC522_CRC: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5435                           ;MFRC522_CRC@dataIn stored from wreg
  5436  0515  0020               	movlb	0	; select bank0
  5437  0516  00A6               	movwf	MFRC522_CRC@dataIn
  5438                           
  5439                           ;rc522.c: 454: char i, n;
  5440                           ;rc522.c: 455: MFRC522_Clear_Bit( 0x05, 0x04 );
  5441  0517  3004               	movlw	4
  5442  0518  00A4               	movwf	??_MFRC522_CRC
  5443  0519  0824               	movf	??_MFRC522_CRC,w
  5444  051A  00F8               	movwf	MFRC522_Clear_Bit@mask
  5445  051B  3005               	movlw	5
  5446  051C  318F  273E  3185   	fcall	_MFRC522_Clear_Bit
  5447                           
  5448                           ;rc522.c: 456: MFRC522_Set_Bit( 0x0A, 0x80 );
  5449  051F  3080               	movlw	128
  5450  0520  0020               	movlb	0	; select bank0
  5451  0521  00A4               	movwf	??_MFRC522_CRC
  5452  0522  0824               	movf	??_MFRC522_CRC,w
  5453  0523  00F8               	movwf	MFRC522_Set_Bit@mask
  5454  0524  300A               	movlw	10
  5455  0525  318F  271F  3185   	fcall	_MFRC522_Set_Bit
  5456                           
  5457                           ;rc522.c: 459: for ( i = 0; i < length; i++ )
  5458  0528  0020               	movlb	0	; select bank0
  5459  0529  01A7               	clrf	MFRC522_CRC@i
  5460  052A                     l2737:	
  5461  052A  0822               	movf	MFRC522_CRC@length,w
  5462  052B  0227               	subwf	MFRC522_CRC@i,w
  5463  052C  1803               	btfsc	3,0
  5464  052D  2D43               	goto	l2739
  5465                           
  5466                           ;rc522.c: 460: {
  5467                           ;rc522.c: 461: WriteRegister( 0x09, *dataIn++ );
  5468  052E  0826               	movf	MFRC522_CRC@dataIn,w
  5469  052F  0086               	movwf	6
  5470  0530  0187               	clrf	7
  5471  0531  0801               	movf	1,w
  5472  0532  00A4               	movwf	??_MFRC522_CRC
  5473  0533  0824               	movf	??_MFRC522_CRC,w
  5474  0534  00F6               	movwf	WriteRegister@val
  5475  0535  3009               	movlw	9
  5476  0536  318F  2711  3185   	fcall	_WriteRegister
  5477  0539  3001               	movlw	1
  5478  053A  0020               	movlb	0	; select bank0
  5479  053B  00A4               	movwf	??_MFRC522_CRC
  5480  053C  0824               	movf	??_MFRC522_CRC,w
  5481  053D  07A6               	addwf	MFRC522_CRC@dataIn,f
  5482  053E  3001               	movlw	1
  5483  053F  00A4               	movwf	??_MFRC522_CRC
  5484  0540  0824               	movf	??_MFRC522_CRC,w
  5485  0541  07A7               	addwf	MFRC522_CRC@i,f
  5486  0542  2D2A               	goto	l2737
  5487  0543                     l2739:	
  5488                           
  5489                           ;rc522.c: 462: }
  5490                           ;rc522.c: 464: WriteRegister( 0x01, 0x03 );
  5491  0543  3003               	movlw	3
  5492  0544  00A4               	movwf	??_MFRC522_CRC
  5493  0545  0824               	movf	??_MFRC522_CRC,w
  5494  0546  00F6               	movwf	WriteRegister@val
  5495  0547  3001               	movlw	1
  5496  0548  318F  2711  3185   	fcall	_WriteRegister
  5497                           
  5498                           ;rc522.c: 466: i = 0xFF;
  5499  054B  30FF               	movlw	255
  5500  054C  0020               	movlb	0	; select bank0
  5501  054D  00A4               	movwf	??_MFRC522_CRC
  5502  054E  0824               	movf	??_MFRC522_CRC,w
  5503  054F  00A7               	movwf	MFRC522_CRC@i
  5504  0550                     l2743:	
  5505                           ;rc522.c: 468: do
  5506                           
  5507                           
  5508                           ;rc522.c: 469: {
  5509                           ;rc522.c: 470: n = ReadRegister( 0x05 );
  5510  0550  3005               	movlw	5
  5511  0551  318F  2760  3185   	fcall	_ReadRegister
  5512  0554  0020               	movlb	0	; select bank0
  5513  0555  00A4               	movwf	??_MFRC522_CRC
  5514  0556  0824               	movf	??_MFRC522_CRC,w
  5515  0557  00A5               	movwf	MFRC522_CRC@n
  5516                           
  5517                           ;rc522.c: 471: i--;
  5518  0558  3001               	movlw	1
  5519  0559  02A7               	subwf	MFRC522_CRC@i,f
  5520                           
  5521                           ;rc522.c: 472: }
  5522                           ;rc522.c: 473: while( i && !(n & 0x04) );
  5523  055A  0827               	movf	MFRC522_CRC@i,w
  5524  055B  1903               	btfsc	3,2
  5525  055C  2D5F               	goto	l2751
  5526  055D  1D25               	btfss	MFRC522_CRC@n,2
  5527  055E  2D50               	goto	l2743
  5528  055F                     l2751:	
  5529                           
  5530                           ;rc522.c: 475: dataOut[0] = ReadRegister( 0x22 );
  5531  055F  3022               	movlw	34
  5532  0560  318F  2760  3185   	fcall	_ReadRegister
  5533  0563  0020               	movlb	0	; select bank0
  5534  0564  00A4               	movwf	??_MFRC522_CRC
  5535  0565  0823               	movf	MFRC522_CRC@dataOut,w
  5536  0566  0086               	movwf	6
  5537  0567  0187               	clrf	7
  5538  0568  0824               	movf	??_MFRC522_CRC,w
  5539  0569  0081               	movwf	1
  5540                           
  5541                           ;rc522.c: 476: dataOut[1] = ReadRegister( 0x21 );
  5542  056A  3021               	movlw	33
  5543  056B  318F  2760         	fcall	_ReadRegister
  5544  056D  0020               	movlb	0	; select bank0
  5545  056E  00A4               	movwf	??_MFRC522_CRC
  5546  056F  0A23               	incf	MFRC522_CRC@dataOut,w
  5547  0570  0086               	movwf	6
  5548  0571  0187               	clrf	7
  5549  0572  0824               	movf	??_MFRC522_CRC,w
  5550  0573  0081               	movwf	1
  5551  0574  0008               	return
  5552  0575                     __end_of_MFRC522_CRC:	
  5553                           
  5554                           	psect	text20
  5555  0F1F                     __ptext20:	
  5556 ;; *************** function _MFRC522_Set_Bit *****************
  5557 ;; Defined at:
  5558 ;;		line 126 in file "rc522.c"
  5559 ;; Parameters:    Size  Location     Type
  5560 ;;  addr            1    wreg     unsigned char 
  5561 ;;  mask            1    8[COMMON] unsigned char 
  5562 ;; Auto vars:     Size  Location     Type
  5563 ;;  addr            1    0[BANK0 ] unsigned char 
  5564 ;; Return value:  Size  Location     Type
  5565 ;;                  1    wreg      void 
  5566 ;; Registers used:
  5567 ;;		wreg, status,2, status,0, pclath, cstack
  5568 ;; Tracked objects:
  5569 ;;		On entry : 0/0
  5570 ;;		On exit  : 0/0
  5571 ;;		Unchanged: 0/0
  5572 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5573 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5574 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5575 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5576 ;;      Totals:         2       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5577 ;;Total ram usage:        3 bytes
  5578 ;; Hardware stack levels used:    1
  5579 ;; Hardware stack levels required when called:    3
  5580 ;; This function calls:
  5581 ;;		_ReadRegister
  5582 ;;		_WriteRegister
  5583 ;; This function is called by:
  5584 ;;		_MFRC522_AntennaOn
  5585 ;;		_MFRC522_ToCard
  5586 ;;		_MFRC522_CRC
  5587 ;; This function uses a non-reentrant model
  5588 ;;
  5589                           
  5590                           
  5591                           ;psect for function _MFRC522_Set_Bit
  5592  0F1F                     _MFRC522_Set_Bit:	
  5593                           
  5594                           ;incstack = 0
  5595                           ; Regs used in _MFRC522_Set_Bit: [wreg+status,2+status,0+pclath+cstack]
  5596                           ;MFRC522_Set_Bit@addr stored from wreg
  5597  0F1F  0020               	movlb	0	; select bank0
  5598  0F20  00A0               	movwf	MFRC522_Set_Bit@addr
  5599                           
  5600                           ;rc522.c: 128: WriteRegister( addr, ReadRegister( addr ) | mask );
  5601  0F21  0820               	movf	MFRC522_Set_Bit@addr,w
  5602  0F22  318F  2760  318F   	fcall	_ReadRegister
  5603  0F25  0478               	iorwf	MFRC522_Set_Bit@mask,w
  5604  0F26  00F9               	movwf	??_MFRC522_Set_Bit
  5605  0F27  0879               	movf	??_MFRC522_Set_Bit,w
  5606  0F28  00F6               	movwf	WriteRegister@val
  5607  0F29  0020               	movlb	0	; select bank0
  5608  0F2A  0820               	movf	MFRC522_Set_Bit@addr,w
  5609  0F2B  318F  2711         	fcall	_WriteRegister
  5610  0F2D  0008               	return
  5611  0F2E                     __end_of_MFRC522_Set_Bit:	
  5612                           
  5613                           	psect	text21
  5614  0F3E                     __ptext21:	
  5615 ;; *************** function _MFRC522_Clear_Bit *****************
  5616 ;; Defined at:
  5617 ;;		line 122 in file "rc522.c"
  5618 ;; Parameters:    Size  Location     Type
  5619 ;;  addr            1    wreg     unsigned char 
  5620 ;;  mask            1    8[COMMON] unsigned char 
  5621 ;; Auto vars:     Size  Location     Type
  5622 ;;  addr            1    9[COMMON] unsigned char 
  5623 ;; Return value:  Size  Location     Type
  5624 ;;                  1    wreg      void 
  5625 ;; Registers used:
  5626 ;;		wreg, status,2, status,0, pclath, cstack
  5627 ;; Tracked objects:
  5628 ;;		On entry : 0/0
  5629 ;;		On exit  : 0/0
  5630 ;;		Unchanged: 0/0
  5631 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5632 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5633 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5634 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5635 ;;      Totals:         2       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5636 ;;Total ram usage:        4 bytes
  5637 ;; Hardware stack levels used:    1
  5638 ;; Hardware stack levels required when called:    3
  5639 ;; This function calls:
  5640 ;;		_ReadRegister
  5641 ;;		_WriteRegister
  5642 ;; This function is called by:
  5643 ;;		_MFRC522_ToCard
  5644 ;;		_MFRC522_CRC
  5645 ;;		_MFRC522_Halt
  5646 ;;		_MFRC522_AntiColl
  5647 ;;		_MFRC522_AntennaOff
  5648 ;; This function uses a non-reentrant model
  5649 ;;
  5650                           
  5651                           
  5652                           ;psect for function _MFRC522_Clear_Bit
  5653  0F3E                     _MFRC522_Clear_Bit:	
  5654                           
  5655                           ;incstack = 0
  5656                           ; Regs used in _MFRC522_Clear_Bit: [wreg+status,2+status,0+pclath+cstack]
  5657                           ;MFRC522_Clear_Bit@addr stored from wreg
  5658  0F3E  00F9               	movwf	MFRC522_Clear_Bit@addr
  5659                           
  5660                           ;rc522.c: 124: WriteRegister( addr, ReadRegister( addr ) & (~mask) );
  5661  0F3F  0978               	comf	MFRC522_Clear_Bit@mask,w
  5662  0F40  0020               	movlb	0	; select bank0
  5663  0F41  00A0               	movwf	??_MFRC522_Clear_Bit
  5664  0F42  0879               	movf	MFRC522_Clear_Bit@addr,w
  5665  0F43  318F  2760  318F   	fcall	_ReadRegister
  5666  0F46  0020               	movlb	0	; select bank0
  5667  0F47  0520               	andwf	??_MFRC522_Clear_Bit,w
  5668  0F48  00A1               	movwf	??_MFRC522_Clear_Bit+1
  5669  0F49  0821               	movf	??_MFRC522_Clear_Bit+1,w
  5670  0F4A  00F6               	movwf	WriteRegister@val
  5671  0F4B  0879               	movf	MFRC522_Clear_Bit@addr,w
  5672  0F4C  318F  2711         	fcall	_WriteRegister
  5673  0F4E  0008               	return
  5674  0F4F                     __end_of_MFRC522_Clear_Bit:	
  5675                           
  5676                           	psect	text22
  5677  0F11                     __ptext22:	
  5678 ;; *************** function _WriteRegister *****************
  5679 ;; Defined at:
  5680 ;;		line 23 in file "rc522.c"
  5681 ;; Parameters:    Size  Location     Type
  5682 ;;  reg             1    wreg     unsigned char 
  5683 ;;  val             1    6[COMMON] unsigned char 
  5684 ;; Auto vars:     Size  Location     Type
  5685 ;;  reg             1    7[COMMON] unsigned char 
  5686 ;; Return value:  Size  Location     Type
  5687 ;;                  1    wreg      void 
  5688 ;; Registers used:
  5689 ;;		wreg, status,2, status,0, pclath, cstack
  5690 ;; Tracked objects:
  5691 ;;		On entry : 0/0
  5692 ;;		On exit  : 0/0
  5693 ;;		Unchanged: 0/0
  5694 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5695 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5696 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5697 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5698 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5699 ;;Total ram usage:        2 bytes
  5700 ;; Hardware stack levels used:    1
  5701 ;; Hardware stack levels required when called:    2
  5702 ;; This function calls:
  5703 ;;		_SPI_transfer
  5704 ;; This function is called by:
  5705 ;;		_main
  5706 ;;		_MFRC522_Clear_Bit
  5707 ;;		_MFRC522_Set_Bit
  5708 ;;		_MFRC522_Reset
  5709 ;;		_MFRC522_Init
  5710 ;;		_MFRC522_ToCard
  5711 ;;		_MFRC522_Request
  5712 ;;		_MFRC522_CRC
  5713 ;;		_MFRC522_AntiColl
  5714 ;; This function uses a non-reentrant model
  5715 ;;
  5716                           
  5717                           
  5718                           ;psect for function _WriteRegister
  5719  0F11                     _WriteRegister:	
  5720                           
  5721                           ;incstack = 0
  5722                           ; Regs used in _WriteRegister: [wreg+status,2+status,0+pclath+cstack]
  5723                           ;WriteRegister@reg stored from wreg
  5724  0F11  00F7               	movwf	WriteRegister@reg
  5725                           
  5726                           ;rc522.c: 25: LATAbits.LATA5 = 0;
  5727  0F12  0022               	movlb	2	; select bank2
  5728  0F13  128C               	bcf	12,5	;volatile
  5729                           
  5730                           ;rc522.c: 27: SPI_transfer(( reg << 1 ) & 0x7E);
  5731  0F14  3577               	lslf	WriteRegister@reg,w
  5732  0F15  397E               	andlw	126
  5733  0F16  318E  26B4  318F   	fcall	_SPI_transfer
  5734                           
  5735                           ;rc522.c: 28: SPI_transfer(val);
  5736  0F19  0876               	movf	WriteRegister@val,w
  5737  0F1A  318E  26B4         	fcall	_SPI_transfer
  5738                           
  5739                           ;rc522.c: 29: LATAbits.LATA5 = 1;
  5740  0F1C  0022               	movlb	2	; select bank2
  5741  0F1D  168C               	bsf	12,5	;volatile
  5742  0F1E  0008               	return
  5743  0F1F                     __end_of_WriteRegister:	
  5744                           
  5745                           	psect	text23
  5746  0F60                     __ptext23:	
  5747 ;; *************** function _ReadRegister *****************
  5748 ;; Defined at:
  5749 ;;		line 44 in file "rc522.c"
  5750 ;; Parameters:    Size  Location     Type
  5751 ;;  reg             1    wreg     unsigned char 
  5752 ;; Auto vars:     Size  Location     Type
  5753 ;;  reg             1    4[COMMON] unsigned char 
  5754 ;;  val             1    5[COMMON] unsigned char 
  5755 ;; Return value:  Size  Location     Type
  5756 ;;                  1    wreg      unsigned char 
  5757 ;; Registers used:
  5758 ;;		wreg, status,2, status,0, pclath, cstack
  5759 ;; Tracked objects:
  5760 ;;		On entry : 0/0
  5761 ;;		On exit  : 0/0
  5762 ;;		Unchanged: 0/0
  5763 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5764 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5765 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5766 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5767 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5768 ;;Total ram usage:        3 bytes
  5769 ;; Hardware stack levels used:    1
  5770 ;; Hardware stack levels required when called:    2
  5771 ;; This function calls:
  5772 ;;		_SPI_transfer
  5773 ;; This function is called by:
  5774 ;;		_main
  5775 ;;		_MFRC522_Clear_Bit
  5776 ;;		_MFRC522_Set_Bit
  5777 ;;		_MFRC522_ToCard
  5778 ;;		_MFRC522_CRC
  5779 ;;		_MFRC522_Auth
  5780 ;; This function uses a non-reentrant model
  5781 ;;
  5782                           
  5783                           
  5784                           ;psect for function _ReadRegister
  5785  0F60                     _ReadRegister:	
  5786                           
  5787                           ;incstack = 0
  5788                           ; Regs used in _ReadRegister: [wreg+status,2+status,0+pclath+cstack]
  5789                           ;ReadRegister@reg stored from wreg
  5790  0F60  00F4               	movwf	ReadRegister@reg
  5791                           
  5792                           ;rc522.c: 47: uint8_t val;
  5793                           ;rc522.c: 49: LATAbits.LATA5 = 0;
  5794  0F61  0022               	movlb	2	; select bank2
  5795  0F62  128C               	bcf	12,5	;volatile
  5796                           
  5797                           ;rc522.c: 51: SPI_transfer((( reg << 1 ) & 0x7E) | 0x80);
  5798  0F63  3574               	lslf	ReadRegister@reg,w
  5799  0F64  397E               	andlw	126
  5800  0F65  3880               	iorlw	128
  5801  0F66  318E  26B4  318F   	fcall	_SPI_transfer
  5802                           
  5803                           ;rc522.c: 52: val=SPI_transfer(0x00);
  5804  0F69  3000               	movlw	0
  5805  0F6A  318E  26B4         	fcall	_SPI_transfer
  5806  0F6C  00F3               	movwf	??_ReadRegister
  5807  0F6D  0873               	movf	??_ReadRegister,w
  5808  0F6E  00F5               	movwf	ReadRegister@val
  5809                           
  5810                           ;rc522.c: 55: LATAbits.LATA5 = 1;
  5811  0F6F  0022               	movlb	2	; select bank2
  5812  0F70  168C               	bsf	12,5	;volatile
  5813                           
  5814                           ;rc522.c: 57: return val;
  5815  0F71  0875               	movf	ReadRegister@val,w
  5816  0F72  0008               	return
  5817  0F73                     __end_of_ReadRegister:	
  5818                           
  5819                           	psect	text24
  5820  0F9E                     __ptext24:	
  5821 ;; *************** function _InitApp *****************
  5822 ;; Defined at:
  5823 ;;		line 20 in file "user.c"
  5824 ;; Parameters:    Size  Location     Type
  5825 ;;		None
  5826 ;; Auto vars:     Size  Location     Type
  5827 ;;		None
  5828 ;; Return value:  Size  Location     Type
  5829 ;;                  1    wreg      void 
  5830 ;; Registers used:
  5831 ;;		status,2
  5832 ;; Tracked objects:
  5833 ;;		On entry : 0/0
  5834 ;;		On exit  : 0/0
  5835 ;;		Unchanged: 0/0
  5836 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5837 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5838 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5839 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5840 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5841 ;;Total ram usage:        0 bytes
  5842 ;; Hardware stack levels used:    1
  5843 ;; Hardware stack levels required when called:    1
  5844 ;; This function calls:
  5845 ;;		Nothing
  5846 ;; This function is called by:
  5847 ;;		_main
  5848 ;; This function uses a non-reentrant model
  5849 ;;
  5850                           
  5851                           
  5852                           ;psect for function _InitApp
  5853  0F9E                     _InitApp:	
  5854                           
  5855                           ;user.c: 23: ANSELA = 0x00;
  5856                           
  5857                           ;incstack = 0
  5858                           ; Regs used in _InitApp: [status,2]
  5859  0F9E  0023               	movlb	3	; select bank3
  5860  0F9F  018C               	clrf	12	;volatile
  5861                           
  5862                           ;user.c: 24: ANSELB = 0x00;
  5863  0FA0  018D               	clrf	13	;volatile
  5864                           
  5865                           ;user.c: 25: ANSELC = 0x00;
  5866  0FA1  018E               	clrf	14	;volatile
  5867                           
  5868                           ;user.c: 40: TRISCbits.TRISC0 = 0;
  5869  0FA2  0021               	movlb	1	; select bank1
  5870  0FA3  100E               	bcf	14,0	;volatile
  5871                           
  5872                           ;user.c: 41: TRISCbits.TRISC1 = 0;
  5873  0FA4  108E               	bcf	14,1	;volatile
  5874                           
  5875                           ;user.c: 42: TRISCbits.TRISC2 = 0;
  5876  0FA5  110E               	bcf	14,2	;volatile
  5877                           
  5878                           ;user.c: 43: TRISCbits.TRISC3 = 0;
  5879  0FA6  118E               	bcf	14,3	;volatile
  5880                           
  5881                           ;user.c: 44: TRISCbits.TRISC4 = 0;
  5882  0FA7  120E               	bcf	14,4	;volatile
  5883                           
  5884                           ;user.c: 45: TRISCbits.TRISC5 = 0;
  5885  0FA8  128E               	bcf	14,5	;volatile
  5886                           
  5887                           ;user.c: 46: TRISCbits.TRISC6 = 0;
  5888  0FA9  130E               	bcf	14,6	;volatile
  5889                           
  5890                           ;user.c: 47: TRISCbits.TRISC7 = 0;
  5891  0FAA  138E               	bcf	14,7	;volatile
  5892                           
  5893                           ;user.c: 49: TRISAbits.TRISA5 = 0;
  5894  0FAB  128C               	bcf	12,5	;volatile
  5895                           
  5896                           ;user.c: 50: TRISAbits.TRISA4 = 0;
  5897  0FAC  120C               	bcf	12,4	;volatile
  5898                           
  5899                           ;user.c: 52: TRISBbits.TRISB4 = 0;
  5900  0FAD  120D               	bcf	13,4	;volatile
  5901                           
  5902                           ;user.c: 53: TRISBbits.TRISB5 = 1;
  5903  0FAE  168D               	bsf	13,5	;volatile
  5904                           
  5905                           ;user.c: 54: TRISBbits.TRISB6 = 0;
  5906  0FAF  130D               	bcf	13,6	;volatile
  5907                           
  5908                           ;user.c: 55: TRISBbits.TRISB7 = 1;
  5909  0FB0  178D               	bsf	13,7	;volatile
  5910                           
  5911                           ;user.c: 58: IOCAPbits.IOCAP0 = 1;
  5912  0FB1  0027               	movlb	7	; select bank7
  5913  0FB2  1411               	bsf	17,0	;volatile
  5914                           
  5915                           ;user.c: 64: IOCANbits.IOCAN0 = 1;
  5916  0FB3  1412               	bsf	18,0	;volatile
  5917                           
  5918                           ;user.c: 67: INTCONbits.IOCIE = 1;
  5919  0FB4  158B               	bsf	11,3	;volatile
  5920                           
  5921                           ;user.c: 68: INTCONbits.PEIE = 1;
  5922  0FB5  170B               	bsf	11,6	;volatile
  5923                           
  5924                           ;user.c: 69: INTCONbits.GIE = 1;
  5925  0FB6  178B               	bsf	11,7	;volatile
  5926  0FB7  0008               	return
  5927  0FB8                     __end_of_InitApp:	
  5928                           
  5929                           	psect	text25
  5930  0F2E                     __ptext25:	
  5931 ;; *************** function _FlushTXRX *****************
  5932 ;; Defined at:
  5933 ;;		line 20 in file "nRF24L01P.c"
  5934 ;; Parameters:    Size  Location     Type
  5935 ;;		None
  5936 ;; Auto vars:     Size  Location     Type
  5937 ;;		None
  5938 ;; Return value:  Size  Location     Type
  5939 ;;                  1    wreg      void 
  5940 ;; Registers used:
  5941 ;;		wreg, status,2, status,0, pclath, cstack
  5942 ;; Tracked objects:
  5943 ;;		On entry : 0/0
  5944 ;;		On exit  : 0/0
  5945 ;;		Unchanged: 0/0
  5946 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5947 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5948 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5949 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5950 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5951 ;;Total ram usage:        1 bytes
  5952 ;; Hardware stack levels used:    1
  5953 ;; Hardware stack levels required when called:    3
  5954 ;; This function calls:
  5955 ;;		_WriteCommand
  5956 ;;		_WriteRegisterRF
  5957 ;; This function is called by:
  5958 ;;		_main
  5959 ;; This function uses a non-reentrant model
  5960 ;;
  5961                           
  5962                           
  5963                           ;psect for function _FlushTXRX
  5964  0F2E                     _FlushTXRX:	
  5965                           
  5966                           ;nRF24L01P.c: 22: WriteRegisterRF(0x07, 0x70);
  5967                           
  5968                           ;incstack = 0
  5969                           ; Regs used in _FlushTXRX: [wreg+status,2+status,0+pclath+cstack]
  5970  0F2E  3070               	movlw	112
  5971  0F2F  00F5               	movwf	??_FlushTXRX
  5972  0F30  0875               	movf	??_FlushTXRX,w
  5973  0F31  00F3               	movwf	WriteRegisterRF@val
  5974  0F32  3007               	movlw	7
  5975  0F33  318F  2703  318F   	fcall	_WriteRegisterRF
  5976                           
  5977                           ;nRF24L01P.c: 23: WriteCommand(0xE2);
  5978  0F36  30E2               	movlw	226
  5979  0F37  318E  26C4  318F   	fcall	_WriteCommand
  5980                           
  5981                           ;nRF24L01P.c: 24: WriteCommand(0xE1);
  5982  0F3A  30E1               	movlw	225
  5983  0F3B  318E  26C4         	fcall	_WriteCommand
  5984  0F3D  0008               	return
  5985  0F3E                     __end_of_FlushTXRX:	
  5986                           
  5987                           	psect	text26
  5988  0F03                     __ptext26:	
  5989 ;; *************** function _WriteRegisterRF *****************
  5990 ;; Defined at:
  5991 ;;		line 28 in file "nRF24L01P.c"
  5992 ;; Parameters:    Size  Location     Type
  5993 ;;  reg             1    wreg     unsigned char 
  5994 ;;  val             1    3[COMMON] unsigned char 
  5995 ;; Auto vars:     Size  Location     Type
  5996 ;;  reg             1    4[COMMON] unsigned char 
  5997 ;; Return value:  Size  Location     Type
  5998 ;;                  1    wreg      void 
  5999 ;; Registers used:
  6000 ;;		wreg, status,2, status,0, pclath, cstack
  6001 ;; Tracked objects:
  6002 ;;		On entry : 0/0
  6003 ;;		On exit  : 0/0
  6004 ;;		Unchanged: 0/0
  6005 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6006 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6007 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6008 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6009 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6010 ;;Total ram usage:        2 bytes
  6011 ;; Hardware stack levels used:    1
  6012 ;; Hardware stack levels required when called:    2
  6013 ;; This function calls:
  6014 ;;		_SPI_transfer
  6015 ;; This function is called by:
  6016 ;;		_main
  6017 ;;		_FlushTXRX
  6018 ;;		_nRF_Setup_Write
  6019 ;;		_nRF_Setup_Read
  6020 ;; This function uses a non-reentrant model
  6021 ;;
  6022                           
  6023                           
  6024                           ;psect for function _WriteRegisterRF
  6025  0F03                     _WriteRegisterRF:	
  6026                           
  6027                           ;incstack = 0
  6028                           ; Regs used in _WriteRegisterRF: [wreg+status,2+status,0+pclath+cstack]
  6029                           ;WriteRegisterRF@reg stored from wreg
  6030  0F03  00F4               	movwf	WriteRegisterRF@reg
  6031                           
  6032                           ;nRF24L01P.c: 30: LATCbits.LATC6 = 0;
  6033  0F04  0022               	movlb	2	; select bank2
  6034  0F05  130E               	bcf	14,6	;volatile
  6035                           
  6036                           ;nRF24L01P.c: 32: SPI_transfer(0x20 | reg);
  6037  0F06  0874               	movf	WriteRegisterRF@reg,w
  6038  0F07  3820               	iorlw	32
  6039  0F08  318E  26B4  318F   	fcall	_SPI_transfer
  6040                           
  6041                           ;nRF24L01P.c: 33: SPI_transfer(val);
  6042  0F0B  0873               	movf	WriteRegisterRF@val,w
  6043  0F0C  318E  26B4         	fcall	_SPI_transfer
  6044                           
  6045                           ;nRF24L01P.c: 34: LATCbits.LATC6 = 1;
  6046  0F0E  0022               	movlb	2	; select bank2
  6047  0F0F  170E               	bsf	14,6	;volatile
  6048  0F10  0008               	return
  6049  0F11                     __end_of_WriteRegisterRF:	
  6050                           
  6051                           	psect	text27
  6052  0EC4                     __ptext27:	
  6053 ;; *************** function _WriteCommand *****************
  6054 ;; Defined at:
  6055 ;;		line 62 in file "nRF24L01P.c"
  6056 ;; Parameters:    Size  Location     Type
  6057 ;;  command         1    wreg     unsigned char 
  6058 ;; Auto vars:     Size  Location     Type
  6059 ;;  command         1    3[COMMON] unsigned char 
  6060 ;; Return value:  Size  Location     Type
  6061 ;;                  1    wreg      void 
  6062 ;; Registers used:
  6063 ;;		wreg, status,2, status,0, pclath, cstack
  6064 ;; Tracked objects:
  6065 ;;		On entry : 0/0
  6066 ;;		On exit  : 0/0
  6067 ;;		Unchanged: 0/0
  6068 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6069 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6070 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6071 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6072 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6073 ;;Total ram usage:        1 bytes
  6074 ;; Hardware stack levels used:    1
  6075 ;; Hardware stack levels required when called:    2
  6076 ;; This function calls:
  6077 ;;		_SPI_transfer
  6078 ;; This function is called by:
  6079 ;;		_FlushTXRX
  6080 ;; This function uses a non-reentrant model
  6081 ;;
  6082                           
  6083                           
  6084                           ;psect for function _WriteCommand
  6085  0EC4                     _WriteCommand:	
  6086                           
  6087                           ;incstack = 0
  6088                           ; Regs used in _WriteCommand: [wreg+status,2+status,0+pclath+cstack]
  6089                           ;WriteCommand@command stored from wreg
  6090  0EC4  00F3               	movwf	WriteCommand@command
  6091                           
  6092                           ;nRF24L01P.c: 64: LATCbits.LATC6 = 0;
  6093  0EC5  0022               	movlb	2	; select bank2
  6094  0EC6  130E               	bcf	14,6	;volatile
  6095                           
  6096                           ;nRF24L01P.c: 65: SPI_transfer(command);
  6097  0EC7  0873               	movf	WriteCommand@command,w
  6098  0EC8  318E  26B4         	fcall	_SPI_transfer
  6099                           
  6100                           ;nRF24L01P.c: 66: LATCbits.LATC6 = 1;
  6101  0ECA  0022               	movlb	2	; select bank2
  6102  0ECB  170E               	bsf	14,6	;volatile
  6103  0ECC  0008               	return
  6104  0ECD                     __end_of_WriteCommand:	
  6105                           
  6106                           	psect	text28
  6107  0EB4                     __ptext28:	
  6108 ;; *************** function _SPI_transfer *****************
  6109 ;; Defined at:
  6110 ;;		line 54 in file "spi.c"
  6111 ;; Parameters:    Size  Location     Type
  6112 ;;  data            1    wreg     unsigned char 
  6113 ;; Auto vars:     Size  Location     Type
  6114 ;;  data            1    2[COMMON] unsigned char 
  6115 ;; Return value:  Size  Location     Type
  6116 ;;                  1    wreg      unsigned char 
  6117 ;; Registers used:
  6118 ;;		wreg
  6119 ;; Tracked objects:
  6120 ;;		On entry : 0/0
  6121 ;;		On exit  : 0/0
  6122 ;;		Unchanged: 0/0
  6123 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6124 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6125 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6126 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6127 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6128 ;;Total ram usage:        1 bytes
  6129 ;; Hardware stack levels used:    1
  6130 ;; Hardware stack levels required when called:    1
  6131 ;; This function calls:
  6132 ;;		Nothing
  6133 ;; This function is called by:
  6134 ;;		_WriteRegister
  6135 ;;		_ReadRegister
  6136 ;;		_WriteRegisterRF
  6137 ;;		_WriteAddress
  6138 ;;		_ReadRegisterRF
  6139 ;;		_WriteCommand
  6140 ;;		_WritePayload
  6141 ;;		_ReadPayload
  6142 ;; This function uses a non-reentrant model
  6143 ;;
  6144                           
  6145                           
  6146                           ;psect for function _SPI_transfer
  6147  0EB4                     _SPI_transfer:	
  6148                           
  6149                           ;incstack = 0
  6150                           ; Regs used in _SPI_transfer: [wreg]
  6151                           ;SPI_transfer@data stored from wreg
  6152  0EB4  00F2               	movwf	SPI_transfer@data
  6153                           
  6154                           ;spi.c: 56: SSPBUF = data;
  6155  0EB5  0872               	movf	SPI_transfer@data,w
  6156  0EB6  0024               	movlb	4	; select bank4
  6157  0EB7  0091               	movwf	17	;volatile
  6158  0EB8                     l139:	
  6159                           ;spi.c: 57: while (!SSPSTATbits.BF);
  6160                           
  6161  0EB8  1C14               	btfss	20,0	;volatile
  6162  0EB9  2EB8               	goto	l139
  6163                           
  6164                           ;spi.c: 58: return SSPBUF;
  6165  0EBA  0811               	movf	17,w	;volatile
  6166  0EBB  0008               	return
  6167  0EBC                     __end_of_SPI_transfer:	
  6168                           
  6169                           	psect	text29
  6170  0ED6                     __ptext29:	
  6171 ;; *************** function _ConfigureOscillator *****************
  6172 ;; Defined at:
  6173 ;;		line 18 in file "system.c"
  6174 ;; Parameters:    Size  Location     Type
  6175 ;;		None
  6176 ;; Auto vars:     Size  Location     Type
  6177 ;;		None
  6178 ;; Return value:  Size  Location     Type
  6179 ;;                  1    wreg      void 
  6180 ;; Registers used:
  6181 ;;		wreg, status,2, status,0
  6182 ;; Tracked objects:
  6183 ;;		On entry : 0/0
  6184 ;;		On exit  : 0/0
  6185 ;;		Unchanged: 0/0
  6186 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6187 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6188 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6189 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6190 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6191 ;;Total ram usage:        0 bytes
  6192 ;; Hardware stack levels used:    1
  6193 ;; Hardware stack levels required when called:    1
  6194 ;; This function calls:
  6195 ;;		Nothing
  6196 ;; This function is called by:
  6197 ;;		_main
  6198 ;; This function uses a non-reentrant model
  6199 ;;
  6200                           
  6201                           
  6202                           ;psect for function _ConfigureOscillator
  6203  0ED6                     _ConfigureOscillator:	
  6204                           
  6205                           ;system.c: 20: OSCCONbits.IRCF = 0b1110;
  6206                           
  6207                           ;incstack = 0
  6208                           ; Regs used in _ConfigureOscillator: [wreg+status,2+status,0]
  6209  0ED6  0021               	movlb	1	; select bank1
  6210  0ED7  0819               	movf	25,w	;volatile
  6211  0ED8  39C3               	andlw	-61
  6212  0ED9  3838               	iorlw	56
  6213  0EDA  0099               	movwf	25	;volatile
  6214                           
  6215                           ;system.c: 36: OSCCONbits.SCS = 0b00;
  6216  0EDB  30FC               	movlw	-4
  6217  0EDC  0599               	andwf	25,f	;volatile
  6218                           
  6219                           ;system.c: 41: OSCCONbits.SPLLMULT = 0b1;
  6220  0EDD  1719               	bsf	25,6	;volatile
  6221                           
  6222                           ;system.c: 45: OSCCONbits.SPLLEN = 0b0;
  6223  0EDE  1399               	bcf	25,7	;volatile
  6224  0EDF  0008               	return
  6225  0EE0                     __end_of_ConfigureOscillator:	
  6226                           
  6227                           	psect	intentry
  6228  0004                     __pintentry:	
  6229 ;; *************** function _isr *****************
  6230 ;; Defined at:
  6231 ;;		line 25 in file "interrupts.c"
  6232 ;; Parameters:    Size  Location     Type
  6233 ;;		None
  6234 ;; Auto vars:     Size  Location     Type
  6235 ;;		None
  6236 ;; Return value:  Size  Location     Type
  6237 ;;                  1    wreg      void 
  6238 ;; Registers used:
  6239 ;;		wreg, status,2, status,0
  6240 ;; Tracked objects:
  6241 ;;		On entry : 0/0
  6242 ;;		On exit  : 0/0
  6243 ;;		Unchanged: 0/0
  6244 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6245 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6246 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6247 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6248 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6249 ;;Total ram usage:        2 bytes
  6250 ;; Hardware stack levels used:    1
  6251 ;; This function calls:
  6252 ;;		Nothing
  6253 ;; This function is called by:
  6254 ;;		Interrupt level 1
  6255 ;; This function uses a non-reentrant model
  6256 ;;
  6257                           
  6258  0004                     _isr:	
  6259                           
  6260                           ;incstack = 0
  6261  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  6262                           
  6263                           ; Regs used in _isr: [wreg+status,2+status,0]
  6264  0005  3180               	pagesel	$
  6265  0006  0020               	movlb	0	; select bank0
  6266  0007  087F               	movf	127,w
  6267  0008  00F1               	movwf	??_isr+1
  6268                           
  6269                           ;interrupts.c: 36: if(INTCONbits.IOCIF)
  6270  0009  1C0B               	btfss	11,0	;volatile
  6271  000A  2838               	goto	i1l372
  6272                           
  6273                           ;interrupts.c: 37: {
  6274                           ;interrupts.c: 38: INTCONbits.IOCIF = 0;
  6275  000B  100B               	bcf	11,0	;volatile
  6276                           
  6277                           ;interrupts.c: 39: if (IOCAFbits.IOCAF0 == 1)
  6278  000C  0027               	movlb	7	; select bank7
  6279  000D  1C13               	btfss	19,0	;volatile
  6280  000E  2838               	goto	i1l372
  6281                           
  6282                           ;interrupts.c: 40: {
  6283                           ;interrupts.c: 41: IOCAFbits.IOCAF0 = 0;
  6284  000F  1013               	bcf	19,0	;volatile
  6285                           
  6286                           ;interrupts.c: 42: if ((SW == 0) & (PORTAbits.RA0 == 1))
  6287  0010  0020               	movlb	0	; select bank0
  6288  0011  1C0C               	btfss	12,0	;volatile
  6289  0012  2815               	goto	u171_20
  6290  0013  3001               	movlw	1
  6291  0014  2816               	goto	u171_22
  6292  0015                     u171_20:	
  6293  0015  3000               	movlw	0
  6294  0016                     u171_22:	
  6295  0016  00F0               	movwf	??_isr
  6296  0017  086F               	movf	_SW,w
  6297  0018  1D03               	btfss	3,2
  6298  0019  281C               	goto	u172_20
  6299  001A  3001               	movlw	1
  6300  001B  281D               	goto	u172_22
  6301  001C                     u172_20:	
  6302  001C  3000               	movlw	0
  6303  001D                     u172_22:	
  6304  001D  0570               	andwf	??_isr,w
  6305  001E  3800               	iorlw	0
  6306  001F  1903               	skipnz
  6307  0020  2824               	goto	i1l2589
  6308                           
  6309                           ;interrupts.c: 43: {
  6310                           ;interrupts.c: 45: SW = 1;
  6311  0021  01EF               	clrf	_SW
  6312  0022  0AEF               	incf	_SW,f
  6313                           
  6314                           ;interrupts.c: 46: }
  6315  0023  2838               	goto	i1l372
  6316  0024                     i1l2589:	
  6317                           
  6318                           ;interrupts.c: 47: else if ((SW == 0) & (PORTAbits.RA0 == 0))
  6319  0024  180C               	btfsc	12,0	;volatile
  6320  0025  2828               	goto	u174_20
  6321  0026  3001               	movlw	1
  6322  0027  2829               	goto	u174_22
  6323  0028                     u174_20:	
  6324  0028  3000               	movlw	0
  6325  0029                     u174_22:	
  6326  0029  00F0               	movwf	??_isr
  6327  002A  086F               	movf	_SW,w
  6328  002B  1D03               	btfss	3,2
  6329  002C  282F               	goto	u175_20
  6330  002D  3001               	movlw	1
  6331  002E  2830               	goto	u175_22
  6332  002F                     u175_20:	
  6333  002F  3000               	movlw	0
  6334  0030                     u175_22:	
  6335  0030  0570               	andwf	??_isr,w
  6336  0031  3800               	iorlw	0
  6337  0032  1903               	skipnz
  6338  0033  2838               	goto	i1l372
  6339                           
  6340                           ;interrupts.c: 48: {
  6341                           ;interrupts.c: 50: SW = 2;
  6342  0034  3002               	movlw	2
  6343  0035  00F0               	movwf	??_isr
  6344  0036  0870               	movf	??_isr,w
  6345  0037  00EF               	movwf	_SW
  6346  0038                     i1l372:	
  6347  0038  0871               	movf	??_isr+1,w
  6348  0039  0020               	movlb	0	; select bank0
  6349  003A  00FF               	movwf	127
  6350  003B  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  6351  003C  0009               	retfie
  6352  003D                     __end_of_isr:	
  6353  007E                     btemp	set	126	;btemp
  6354  007E                     int$flags	set	126
  6355  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    256
    Data        36
    BSS         14
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     10      12
    BANK0            80     78      80
    BANK1            80      0      46
    BANK2            80      0       0
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           28      0       0
    BANK12            0      0       0

Pointer List with Targets:

    ReadPayload@data	PTR unsigned char  size(1) Largest target is 5
		 -> main@data2(BANK0[5]), 

    WritePayload@data	PTR unsigned char  size(1) Largest target is 5
		 -> main@data(BANK0[5]), main@data0(BANK0[5]), 

    WriteAddress@addr	PTR unsigned char  size(1) Largest target is 5
		 -> nRF_Setup_Read@RXTX_ADDR(BANK0[5]), nRF_Setup_Write@RXTX_ADDR(BANK0[5]), 

    MFRC522_ReadCardSerial@str	PTR unsigned char  size(1) Largest target is 6
		 -> main@UID(BANK0[6]), 

    MFRC522_isCard@TagType	PTR unsigned char  size(1) Largest target is 1
		 -> main@TagType(BANK0[1]), 

    MFRC522_AntiColl@serNum	PTR unsigned char  size(1) Largest target is 6
		 -> main@UID(BANK0[6]), 

    MFRC522_SelectTag@serNum	PTR unsigned char  size(1) Largest target is 6
		 -> main@UID(BANK0[6]), 

    MFRC522_CRC@dataOut	PTR unsigned char  size(1) Largest target is 18
		 -> MFRC522_Write@buff(BANK0[18]), MFRC522_Halt@buff(BANK0[4]), MFRC522_SelectTag@buffer(BANK0[9]), 

    MFRC522_CRC@dataIn	PTR unsigned char  size(1) Largest target is 18
		 -> MFRC522_Write@buff(BANK0[18]), MFRC522_Halt@buff(BANK0[4]), MFRC522_SelectTag@buffer(BANK0[9]), 

    MFRC522_Request@TagType	PTR unsigned char  size(1) Largest target is 1
		 -> main@TagType(BANK0[1]), 

    MFRC522_ToCard@backData	PTR unsigned char  size(1) Largest target is 18
		 -> MFRC522_Write@buff(BANK0[18]), MFRC522_Auth@buff(COMMON[12]), MFRC522_Halt@buff(BANK0[4]), MFRC522_SelectTag@buffer(BANK0[9]), 
		 -> main@UID(BANK0[6]), main@TagType(BANK0[1]), 

    MFRC522_ToCard@backLen	PTR unsigned int  size(1) Largest target is 2
		 -> MFRC522_AntiColl@unLen(BANK0[2]), MFRC522_Read@unLen(COMMON[2]), MFRC522_Write@recvBits(COMMON[2]), MFRC522_Auth@recvBits(COMMON[2]), 
		 -> MFRC522_Halt@unLen(BANK0[2]), MFRC522_SelectTag@recvBits(BANK0[2]), MFRC522_Request@backBits(BANK0[2]), 

    MFRC522_ToCard@sendData	PTR unsigned char  size(1) Largest target is 18
		 -> MFRC522_Write@buff(BANK0[18]), MFRC522_Auth@buff(COMMON[12]), MFRC522_Halt@buff(BANK0[4]), MFRC522_SelectTag@buffer(BANK0[9]), 
		 -> main@UID(BANK0[6]), main@TagType(BANK0[1]), 


Critical Paths under _main in COMMON

    _nRF_available->_ReadRegisterRF
    _ReadRegisterRF->_SPI_transfer
    _nRF_Setup_Write->_WriteAddress
    _nRF_Setup_Read->_WriteAddress
    _WriteAddress->_SPI_transfer
    _WritePayload->_SPI_transfer
    _ReadPayload->_SPI_transfer
    _MFRC522_AntiColl->_MFRC522_Clear_Bit
    _MFRC522_Reset->_WriteRegister
    _MFRC522_AntennaOn->_MFRC522_Set_Bit
    _MFRC522_Halt->_MFRC522_Clear_Bit
    _MFRC522_ToCard->_MFRC522_Clear_Bit
    _MFRC522_ToCard->_MFRC522_Set_Bit
    _MFRC522_CRC->_MFRC522_Clear_Bit
    _MFRC522_CRC->_MFRC522_Set_Bit
    _MFRC522_Set_Bit->_WriteRegister
    _MFRC522_Clear_Bit->_WriteRegister
    _WriteRegister->_ReadRegister
    _ReadRegister->_SPI_transfer
    _FlushTXRX->_WriteRegisterRF
    _WriteRegisterRF->_SPI_transfer
    _WriteCommand->_SPI_transfer

Critical Paths under _isr in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_MFRC522_SelectTag
    _MFRC522_isCard->_MFRC522_Request
    _MFRC522_Request->_MFRC522_ToCard
    _MFRC522_SelectTag->_MFRC522_ToCard
    _MFRC522_ReadCardSerial->_MFRC522_AntiColl
    _MFRC522_AntiColl->_MFRC522_ToCard
    _MFRC522_Init->_MFRC522_AntennaOn
    _MFRC522_AntennaOn->_MFRC522_Set_Bit
    _MFRC522_Halt->_MFRC522_ToCard
    _MFRC522_ToCard->_MFRC522_Clear_Bit
    _MFRC522_CRC->_MFRC522_Clear_Bit

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _isr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _isr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _isr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _isr in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                48    48      0   69490
                                             42 BANK0     36    36      0
                _ConfigureOscillator
                          _FlushTXRX
                            _InitApp
                       _MFRC522_Halt
                       _MFRC522_Init
             _MFRC522_ReadCardSerial
                  _MFRC522_SelectTag
                     _MFRC522_isCard
                        _ReadPayload
                       _ReadRegister
                           _SPI_init
                       _WritePayload
                      _WriteRegister
                    _WriteRegisterRF
                     _nRF_Setup_Read
                    _nRF_Setup_Write
                      _nRF_available
 ---------------------------------------------------------------------------------
 (1) _nRF_available                                        0     0      0     130
                     _ReadRegisterRF
 ---------------------------------------------------------------------------------
 (2) _ReadRegisterRF                                       4     4      0     130
                                              3 COMMON     4     4      0
                       _SPI_transfer
 ---------------------------------------------------------------------------------
 (1) _nRF_Setup_Write                                      7     7      0    2451
                                              0 BANK0      7     7      0
                       _WriteAddress
                    _WriteRegisterRF
 ---------------------------------------------------------------------------------
 (1) _nRF_Setup_Read                                       7     7      0    2451
                                              0 BANK0      7     7      0
                       _WriteAddress
                    _WriteRegisterRF
 ---------------------------------------------------------------------------------
 (2) _WriteAddress                                         6     4      2     712
                                              3 COMMON     6     4      2
                       _SPI_transfer
 ---------------------------------------------------------------------------------
 (1) _WritePayload                                         4     3      1     291
                                              3 COMMON     4     3      1
                       _SPI_transfer
 ---------------------------------------------------------------------------------
 (1) _SPI_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ReadPayload                                          5     4      1     226
                                              3 COMMON     5     4      1
                       _SPI_transfer
 ---------------------------------------------------------------------------------
 (1) _MFRC522_isCard                                       2     2      0    9935
                                             31 BANK0      2     2      0
                    _MFRC522_Request
 ---------------------------------------------------------------------------------
 (2) _MFRC522_Request                                      9     8      1    9874
                                             22 BANK0      9     8      1
                     _MFRC522_ToCard
                      _WriteRegister
 ---------------------------------------------------------------------------------
 (1) _MFRC522_SelectTag                                   20    20      0   14987
                                             22 BANK0     20    20      0
                        _MFRC522_CRC
                     _MFRC522_ToCard
 ---------------------------------------------------------------------------------
 (1) _MFRC522_ReadCardSerial                               3     3      0   12104
                                             33 BANK0      3     3      0
                   _MFRC522_AntiColl
 ---------------------------------------------------------------------------------
 (2) _MFRC522_AntiColl                                    11    11      0   11978
                                             22 BANK0     11    11      0
                  _MFRC522_Clear_Bit
                     _MFRC522_ToCard
                      _WriteRegister
 ---------------------------------------------------------------------------------
 (1) _MFRC522_Init                                         1     1      0    4433
                                              2 BANK0      1     1      0
                  _MFRC522_AntennaOn
                      _MFRC522_Reset
                      _WriteRegister
 ---------------------------------------------------------------------------------
 (2) _MFRC522_Reset                                        1     1      0    1328
                                              8 COMMON     1     1      0
                      _WriteRegister
 ---------------------------------------------------------------------------------
 (2) _MFRC522_AntennaOn                                    1     1      0    1777
                                              1 BANK0      1     1      0
                    _MFRC522_Set_Bit
 ---------------------------------------------------------------------------------
 (1) _MFRC522_Halt                                        10    10      0   16626
                                             22 BANK0     10    10      0
                        _MFRC522_CRC
                  _MFRC522_Clear_Bit
                     _MFRC522_ToCard
 ---------------------------------------------------------------------------------
 (3) _MFRC522_ToCard                                      20    16      4    8215
                                              2 BANK0     20    16      4
                  _MFRC522_Clear_Bit
                    _MFRC522_Set_Bit
                       _ReadRegister
                      _WriteRegister
 ---------------------------------------------------------------------------------
 (2) _MFRC522_CRC                                          6     4      2    6208
                                              2 BANK0      6     4      2
                  _MFRC522_Clear_Bit
                    _MFRC522_Set_Bit
                       _ReadRegister
                      _WriteRegister
 ---------------------------------------------------------------------------------
 (4) _MFRC522_Set_Bit                                      3     2      1    1777
                                              8 COMMON     2     1      1
                                              0 BANK0      1     1      0
                       _ReadRegister
                      _WriteRegister
 ---------------------------------------------------------------------------------
 (4) _MFRC522_Clear_Bit                                    4     3      1    1972
                                              8 COMMON     2     1      1
                                              0 BANK0      2     2      0
                       _ReadRegister
                      _WriteRegister
 ---------------------------------------------------------------------------------
 (1) _WriteRegister                                        2     1      1    1328
                                              6 COMMON     2     1      1
                       _ReadRegister (ARG)
                       _SPI_transfer
 ---------------------------------------------------------------------------------
 (1) _ReadRegister                                         3     3      0      96
                                              3 COMMON     3     3      0
                       _SPI_transfer
 ---------------------------------------------------------------------------------
 (1) _InitApp                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _FlushTXRX                                            1     1      0    1585
                                              5 COMMON     1     1      0
                       _WriteCommand
                    _WriteRegisterRF
 ---------------------------------------------------------------------------------
 (2) _WriteRegisterRF                                      2     1      1    1523
                                              3 COMMON     2     1      1
                       _SPI_transfer
 ---------------------------------------------------------------------------------
 (2) _WriteCommand                                         1     1      0      62
                                              3 COMMON     1     1      0
                       _SPI_transfer
 ---------------------------------------------------------------------------------
 (3) _SPI_transfer                                         1     1      0      31
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _ConfigureOscillator                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _isr                                                  2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ConfigureOscillator
   _FlushTXRX
     _WriteCommand
       _SPI_transfer
     _WriteRegisterRF
       _SPI_transfer
   _InitApp
   _MFRC522_Halt
     _MFRC522_CRC
       _MFRC522_Clear_Bit
         _ReadRegister
           _SPI_transfer
         _WriteRegister
           _ReadRegister (ARG)
             _SPI_transfer
           _SPI_transfer (ARG)
       _MFRC522_Set_Bit
         _ReadRegister
           _SPI_transfer
         _WriteRegister
           _ReadRegister (ARG)
             _SPI_transfer
           _SPI_transfer (ARG)
       _ReadRegister
         _SPI_transfer
       _WriteRegister
         _ReadRegister (ARG)
           _SPI_transfer
         _SPI_transfer (ARG)
     _MFRC522_Clear_Bit
       _ReadRegister
         _SPI_transfer
       _WriteRegister
         _ReadRegister (ARG)
           _SPI_transfer
         _SPI_transfer (ARG)
     _MFRC522_ToCard
       _MFRC522_Clear_Bit
         _ReadRegister
           _SPI_transfer
         _WriteRegister
           _ReadRegister (ARG)
             _SPI_transfer
           _SPI_transfer (ARG)
       _MFRC522_Set_Bit
         _ReadRegister
           _SPI_transfer
         _WriteRegister
           _ReadRegister (ARG)
             _SPI_transfer
           _SPI_transfer (ARG)
       _ReadRegister
         _SPI_transfer
       _WriteRegister
         _ReadRegister (ARG)
           _SPI_transfer
         _SPI_transfer (ARG)
   _MFRC522_Init
     _MFRC522_AntennaOn
       _MFRC522_Set_Bit
         _ReadRegister
           _SPI_transfer
         _WriteRegister
           _ReadRegister (ARG)
             _SPI_transfer
           _SPI_transfer (ARG)
     _MFRC522_Reset
       _WriteRegister
         _ReadRegister (ARG)
           _SPI_transfer
         _SPI_transfer (ARG)
     _WriteRegister
       _ReadRegister (ARG)
         _SPI_transfer
       _SPI_transfer (ARG)
   _MFRC522_ReadCardSerial
     _MFRC522_AntiColl
       _MFRC522_Clear_Bit
         _ReadRegister
           _SPI_transfer
         _WriteRegister
           _ReadRegister (ARG)
             _SPI_transfer
           _SPI_transfer (ARG)
       _MFRC522_ToCard
         _MFRC522_Clear_Bit
           _ReadRegister
             _SPI_transfer
           _WriteRegister
             _ReadRegister (ARG)
               _SPI_transfer
             _SPI_transfer (ARG)
         _MFRC522_Set_Bit
           _ReadRegister
             _SPI_transfer
           _WriteRegister
             _ReadRegister (ARG)
               _SPI_transfer
             _SPI_transfer (ARG)
         _ReadRegister
           _SPI_transfer
         _WriteRegister
           _ReadRegister (ARG)
             _SPI_transfer
           _SPI_transfer (ARG)
       _WriteRegister
         _ReadRegister (ARG)
           _SPI_transfer
         _SPI_transfer (ARG)
   _MFRC522_SelectTag
     _MFRC522_CRC
       _MFRC522_Clear_Bit
         _ReadRegister
           _SPI_transfer
         _WriteRegister
           _ReadRegister (ARG)
             _SPI_transfer
           _SPI_transfer (ARG)
       _MFRC522_Set_Bit
         _ReadRegister
           _SPI_transfer
         _WriteRegister
           _ReadRegister (ARG)
             _SPI_transfer
           _SPI_transfer (ARG)
       _ReadRegister
         _SPI_transfer
       _WriteRegister
         _ReadRegister (ARG)
           _SPI_transfer
         _SPI_transfer (ARG)
     _MFRC522_ToCard
       _MFRC522_Clear_Bit
         _ReadRegister
           _SPI_transfer
         _WriteRegister
           _ReadRegister (ARG)
             _SPI_transfer
           _SPI_transfer (ARG)
       _MFRC522_Set_Bit
         _ReadRegister
           _SPI_transfer
         _WriteRegister
           _ReadRegister (ARG)
             _SPI_transfer
           _SPI_transfer (ARG)
       _ReadRegister
         _SPI_transfer
       _WriteRegister
         _ReadRegister (ARG)
           _SPI_transfer
         _SPI_transfer (ARG)
   _MFRC522_isCard
     _MFRC522_Request
       _MFRC522_ToCard
         _MFRC522_Clear_Bit
           _ReadRegister
             _SPI_transfer
           _WriteRegister
             _ReadRegister (ARG)
               _SPI_transfer
             _SPI_transfer (ARG)
         _MFRC522_Set_Bit
           _ReadRegister
             _SPI_transfer
           _WriteRegister
             _ReadRegister (ARG)
               _SPI_transfer
             _SPI_transfer (ARG)
         _ReadRegister
           _SPI_transfer
         _WriteRegister
           _ReadRegister (ARG)
             _SPI_transfer
           _SPI_transfer (ARG)
       _WriteRegister
         _ReadRegister (ARG)
           _SPI_transfer
         _SPI_transfer (ARG)
   _ReadPayload
     _SPI_transfer
   _ReadRegister
     _SPI_transfer
   _SPI_init
   _WritePayload
     _SPI_transfer
   _WriteRegister
     _ReadRegister (ARG)
       _SPI_transfer
     _SPI_transfer (ARG)
   _WriteRegisterRF
     _SPI_transfer
   _nRF_Setup_Read
     _WriteAddress
       _SPI_transfer
     _WriteRegisterRF
       _SPI_transfer
   _nRF_Setup_Write
     _WriteAddress
       _SPI_transfer
     _WriteRegisterRF
       _SPI_transfer
   _nRF_available
     _ReadRegisterRF
       _SPI_transfer

 _isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      A       C       2       85.7%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     4E      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0      2E       7       57.5%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0      8A      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              1C      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BANK12               0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0      8A      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Fri Jul 20 14:11:19 2018

                           __CFG_CP$OFF 0000                            MFRC522_CRC@i 0027  
                          MFRC522_CRC@n 0025                             _SSPSTATbits 0214  
                                    l78 009F                                      _SW 006F  
                                    _cc 006E                          ?_nRF_available 0070  
                           main@TagType 006C                 __size_of_ReadRegisterRF 0015  
                                   l100 027A                                     l224 0791  
                                   l209 03A8                                     l321 07DF  
                                   l139 0EB8                                     l333 0FD3  
                                   l339 07B1                                     l278 0513  
                                   _key 00A9                                     _isr 0004  
                      ?_WriteRegisterRF 0073                   __size_of_WriteAddress 0027  
                          __CFG_BORV$LO 0000                                     wreg 0009  
                        ??_MFRC522_Halt 0036                          ??_MFRC522_Init 0022  
                 __size_of_WriteCommand 0009                            __CFG_LVP$OFF 0000  
                 __size_of_SPI_transfer 0008                                    l3121 0177  
                                  l3113 0157                                    l3105 0137  
                                  l3025 0087                                    l3221 0271  
                                  l3133 0193                                    l3117 0167  
                                  l3109 0147                                    l3125 017F  
                                  l3215 025E                                    l3223 0274  
                                  l3225 027C                                    l3093 011C  
                                  l2633 0298                                    l2801 07C5  
                                  l2651 02F7                                    l2643 02C3  
                                  l2635 02A0                                    l2627 0289  
                                  l2723 078D                                    l2661 0311  
                                  l2653 02FC                                    l2645 02E2  
                                  l2629 028F                                    l3189 0214  
                                  l2751 055F                                    l2743 0550  
                                  l2737 052A                                    l2681 0366  
                                  l2673 032E                                    l2913 0F9C  
                                  l2921 0587                                    l2739 0543  
                                  l2691 0383                                    l2683 0376  
                                  l2773 04F5                                    l2941 05D1  
                                  l2687 037B                                    l2697 0385  
                                  l2929 059E                                    l2699 03A3  
                                  l2779 0507                                    l2939 05D0  
                                  l2883 0FC0                                    l2897 0F5E  
                                  l2993 079B                                    l2979 0EE9  
                                  ?_isr 0070                                    _CREN 0CEC  
                                  u2005 07CE                                    u2140 00CD  
                                  u2270 01CB                                    u2280 0228  
                                  u2517 00B8                                    u2607 0204  
                                  u2527 00C0                                    u1905 038E  
                                  u2617 020C                                    u2537 00E6  
                                  u2707 05D9                                    u2627 0218  
                                  u2547 00F7                                    u2717 05E5  
                                  u2637 024C                                    u2557 0104  
                                  u2647 0258                                    u2567 0110  
                                  u1785 02CC                                    u2657 026A  
                                  u2577 01B6                                    u2667 042A  
                                  u2587 01BE                                    u2677 04AD  
                                  u2597 01EC                                    u2687 0FD7  
                                  u2697 07B6                                    _RCIF 008D  
                                  _OERR 0CE9                                    _TRMT 0CF1  
                 __size_of_WritePayload 0024                            __CFG_WRT$OFF 0000  
                    WriteRegisterRF@reg 0074                      WriteRegisterRF@val 0073  
                                  _main 006A                   MFRC522_AntiColl@unLen 003C  
                                  fsr0h 0005                                    fsr1h 0007  
                                  indf0 0000                                    fsr0l 0004  
                                  indf1 0001                                    fsr1l 0006  
                                  btemp 007E                                    start 003D  
                           main@version 004C                           __CFG_IESO$OFF 0000  
                      _MFRC522_AntiColl 04B5                     __CFG_PLLEN$DISABLED 0000  
                         __CFG_MCLRE$ON 0000                         __end_of_InitApp 0FB8  
                         ??_ReadPayload 0074                         ??_MFRC522_Reset 0078  
                                 ??_isr 0070                            _WriteAddress 07BB  
                                 ?_main 0070                           ?_ReadRegister 0070  
               ?_MFRC522_ReadCardSerial 0070                            _WriteCommand 0EC4  
                         __CFG_WDTE$OFF 0000                                   i1l372 0038  
                      SPI_transfer@data 0072                                   _GTSN1 00C0  
                                 _GTSN2 00BC                                   _GTSN3 00B8  
                                 _GTSN4 00B4                                   _RCREG 0199  
                          main@goodtag1 005E                            main@goodtag2 0060  
                          main@goodtag3 0062                            main@goodtag4 0064  
                          _SPI_transfer 0EB4                                   _TMR1H 0017  
                                 _TMR1L 0016                                   _SPBRG 019B  
                                 _TXREG 019A                     _ConfigureOscillator 0ED6  
                __size_of_WriteRegister 000E                            _WritePayload 0FB8  
                        __CFG_FCMEN$OFF 0000               MFRC522_SelectTag@recvBits 0047  
                MFRC522_AntiColl@serNum 0040                                   main@i 006D  
                        __CFG_BOREN$OFF 0000                        __end_of_SPI_init 07FD  
                     _MFRC522_Clear_Bit 0F3E                                   status 0003  
                                 wtemp0 007E                      ?_MFRC522_Clear_Bit 0078  
               MFRC522_SelectTag@buffer 003B                    ?_ConfigureOscillator 0070  
               MFRC522_SelectTag@serNum 0045                       _MFRC522_AntennaOn 0ECD  
                       __initialization 003F                __size_of_nRF_Setup_Write 0086  
                          __end_of_main 0280                      ?_MFRC522_AntennaOn 0070  
                   ??_MFRC522_Clear_Bit 0020                         ??_nRF_available 0077  
                      ??_nRF_Setup_Read 0020               MFRC522_ReadCardSerial@str 0043  
                        __CFG_LPBOR$OFF 0000          __end_of_MFRC522_ReadCardSerial 0F9E  
                      ??_MFRC522_ToCard 0026                __size_of_MFRC522_Set_Bit 000F  
                        ??_ReadRegister 0073                __size_of_MFRC522_Request 0036  
                                ??_main 004A                     ??_MFRC522_AntennaOn 0021  
                       MFRC522_ToCard@i 0033                         MFRC522_ToCard@n 0035  
                   __end_of_ReadPayload 07BB                        ??_MFRC522_isCard 003F  
                 MFRC522_ToCard@backLen 0025                     __CFG_USBLSCLK$48MHz 0000  
             __end_of_MFRC522_Clear_Bit 0F4F                   MFRC522_ToCard@_status 002F  
                 MFRC522_ToCard@command 0032                                  _ANSELA 018C  
                                _ANSELB 018D                                  _ANSELC 018E  
                     _MFRC522_SelectTag 0575                                  i1l2589 0024  
                                u171_20 0015                                  u171_22 0016  
                                u172_20 001C                                  u172_22 001D  
                                u174_20 0028                                  u174_22 0029  
                                u175_20 002F                                  u175_22 0030  
                    __size_of_FlushTXRX 0010                   MFRC522_ToCard@sendLen 0023  
                    ?_MFRC522_SelectTag 0070                   MFRC522_ToCard@waitIRq 002E  
                                _SSPBUF 0211               __end_of_MFRC522_AntennaOn 0ED6  
                             ??_InitApp 0072                   ??_ConfigureOscillator 0072  
                         _WriteRegister 0F11                          __CFG_PWRTE$OFF 0000  
                  __size_of_MFRC522_CRC 0060                     ??_MFRC522_SelectTag 0036  
                  __end_of_MFRC522_Halt 075D                    __end_of_MFRC522_Init 0624  
               MFRC522_AntiColl@_status 003E                                  _buffer 238C  
                        _ReadRegisterRF 0F73               __end_of_MFRC522_SelectTag 05D3  
                   ReadRegisterRF@temp1 0076                            ReadPayload@i 0077  
              MFRC522_SelectTag@_status 0044                 __end_of__initialization 0066  
                      WritePayload@data 0073                          ?_WriteRegister 0076  
                MFRC522_Request@TagType 0036                   MFRC522_isCard@TagType 0040  
                      WriteRegister@reg 0077                        WriteRegister@val 0076  
                        __pcstackCOMMON 0070                            __pidataBANK1 0FDC  
                __end_of_ReadRegisterRF 0F88                             _ReadPayload 0793  
                      MFRC522_Halt@buff 003A                       __end_of_FlushTXRX 0F3E  
                MFRC522_Request@_status 003C                               ?_SPI_init 0070  
                     ??_nRF_Setup_Write 0020                  MFRC522_Request@reqMode 003B  
              __end_of_MFRC522_AntiColl 0515                       ??_MFRC522_Set_Bit 0079  
                     ??_MFRC522_Request 0037              __size_of_MFRC522_Clear_Bit 0011  
                            __pbssBANK0 006E                              __pbssBANK1 00C4  
                  __end_of_ReadRegister 0F73                  MFRC522_ToCard@backData 0024  
            __size_of_MFRC522_AntennaOn 0009                         WriteAddress@reg 0076  
                       WriteAddress@num 0073                       MFRC522_CRC@dataIn 0026  
                            __pmaintext 006A                       MFRC522_CRC@length 0022  
                       __CFG_PLLMULT$3x 0000                              __pintentry 0004  
                       ?_ReadRegisterRF 0070                      MFRC522_SelectTag@i 0049  
                MFRC522_ToCard@lastBits 0030                              ??_SPI_init 0072  
                MFRC522_ToCard@sendData 0022              __size_of_MFRC522_SelectTag 005E  
                               _TMR_CNT 007A                __size_of_WriteRegisterRF 000E  
                       ??_WriteRegister 0077                                 _InitApp 0F9E  
                 __size_of_MFRC522_Halt 0039                   __size_of_MFRC522_Init 0051  
                       __CFG_STVREN$OFF 0000                   __end_of_MFRC522_Reset 0EC4  
                               __ptext1 0EE0                                 __ptext2 0F73  
                               __ptext3 03AA                                 __ptext4 0430  
                               __ptext5 07BB                                 __ptext6 0FB8  
                               __ptext7 07E2                                 __ptext8 0793  
                               __ptext9 0F4F                               _T1CONbits 0018  
                          __size_of_isr 0039                               _IOCAFbits 0393  
               nRF_Setup_Read@RXTX_ADDR 0022                               _IOCANbits 0392  
                             _IOCAPbits 0391                                 main@UID 0066  
                               clrloop0 0EEC      __end_of_FM17522_firmware_reference 0664  
            _FM17522_firmware_reference 0624                            _MFRC522_Halt 0724  
                          _MFRC522_Init 05D3                    end_of_initialization 0066  
                               init_ram 0EF7                                 initloop 0EF8  
         MFRC522_ReadCardSerial@_status 0042                               _RCSTAbits 019D  
                 __end_of_nRF_available 0EEB                               _PORTAbits 000C  
                      __CFG_FOSC$INTOSC 0000                               _TRISAbits 008C  
                             _TRISBbits 008D                               _TRISCbits 008E  
                 __size_of_ReadRegister 0013             __end_of_ConfigureOscillator 0EE0  
                         ??_MFRC522_CRC 0024                nRF_Setup_Write@RXTX_ADDR 0022  
                             _TXSTAbits 019E                     WriteCommand@command 0073  
                     ??_WriteRegisterRF 0074                         _nRF_Setup_Write 03AA  
                          ?_ReadPayload 0073                         _MFRC522_Set_Bit 0F1F  
               MFRC522_Request@backBits 003D                     MFRC522_ToCard@irqEn 0031  
                       _MFRC522_Request 075D                             _BAUDCONbits 019F  
                          _ReadRegister 0F60                     start_initialization 003F  
                     __size_of_SPI_init 001B                               _FlushTXRX 0F2E  
                     MFRC522_Halt@unLen 003E                       ?_MFRC522_AntiColl 0070  
                     MFRC522_AntiColl@i 003F                 __size_of_nRF_Setup_Read 0085  
                           __end_of_isr 003D                 __size_of_MFRC522_ToCard 012A  
                    ??_MFRC522_AntiColl 0036                           WriteAddress@i 0077  
               __size_of_MFRC522_isCard 0011                        ??_ReadRegisterRF 0073  
              ??_MFRC522_ReadCardSerial 0041                     __end_of_MFRC522_CRC 0575  
                         ?_WriteAddress 0073                             __pdataBANK1 00A0  
                         ?_WriteCommand 0070                      ReadRegisterRF@temp 0075  
                         ?_SPI_transfer 0070                             __pbssBIGRAM 238C  
                         ?_WritePayload 0073                             __pbssCOMMON 007A  
                       WritePayload@num 0075                              ?_FlushTXRX 0070  
                             ___latbits 0002                           __pcstackBANK0 0020  
               __end_of_nRF_Setup_Write 0430                        WriteAddress@addr 0074  
                         WritePayload@i 0076                                ?_InitApp 0070  
               __end_of_MFRC522_Set_Bit 0F2E                      MFRC522_CRC@dataOut 0023  
               __end_of_MFRC522_Request 0793                     MFRC522_Set_Bit@addr 0020  
                   MFRC522_Set_Bit@mask 0078                          ??_WriteAddress 0075  
                        ??_WriteCommand 0073                          ??_SPI_transfer 0072  
                        ??_WritePayload 0074                             _MFRC522_CRC 0515  
                              _LATAbits 010C                                _LATCbits 010E  
                 __end_of_WriteRegister 0F1F                               clear_ram0 0EEB  
                              _PIE1bits 0091  __end_of_MFRC522_firmware_referenceV0_0 0724  
        _MFRC522_firmware_referenceV0_0 06E4  __end_of_MFRC522_firmware_referenceV1_0 06E4  
        _MFRC522_firmware_referenceV1_0 06A4  __end_of_MFRC522_firmware_referenceV2_0 06A4  
        _MFRC522_firmware_referenceV2_0 0664                                _PIR1bits 0011  
       __size_of_MFRC522_ReadCardSerial 0016                               main@F3021 00C9  
                             main@F3013 00AF                               main@F3027 00C4  
                  __size_of_ReadPayload 0028                                _SPI_init 07E2  
                             main@data0 004F                               main@data2 0054  
                           ??_FlushTXRX 0075                          _nRF_Setup_Read 0430  
                        _MFRC522_ToCard 0280                               _writeData 00A0  
                       _WriteRegisterRF 0F03                          _MFRC522_isCard 0F4F  
                 MFRC522_SelectTag@size 0046                        ?_nRF_Setup_Write 0070  
                __size_of_MFRC522_Reset 0008                        ?_MFRC522_Set_Bit 0078  
                      __size_of_InitApp 001A                   MFRC522_Clear_Bit@addr 0079  
                      ?_MFRC522_Request 0036                   MFRC522_Clear_Bit@mask 0078  
                     ReadRegisterRF@reg 0074                  __end_of_nRF_Setup_Read 04B5  
                __end_of_MFRC522_ToCard 03AA                  _MFRC522_ReadCardSerial 0F88  
                              __ptext10 075D                                __ptext11 0575  
                              __ptext20 0F1F                                __ptext12 0F88  
                              __ptext21 0F3E                                __ptext13 04B5  
                              __ptext22 0F11                                __ptext14 05D3  
                              __ptext23 0F60                                __ptext15 0EBC  
                              __ptext24 0F9E                                __ptext16 0ECD  
                              __ptext25 0F2E                                __ptext17 0724  
                              __ptext26 0F03                                __ptext18 0280  
                              __ptext27 0EC4                                __ptext19 0515  
                              __ptext28 0EB4                                __ptext29 0ED6  
                __end_of_MFRC522_isCard 0F60                    __end_of_WriteAddress 07E2  
           MFRC522_AntiColl@serNumCheck 003B                    __end_of_WriteCommand 0ECD  
                __size_of_nRF_available 000B                           __size_of_main 0216  
                  __end_of_SPI_transfer 0EBC                    __end_of_WritePayload 0FDC  
          __size_of_ConfigureOscillator 000A               __size_of_MFRC522_AntiColl 0060  
                              int$flags 007E                                main@data 0059  
                              main@size 004E                           _MFRC522_Reset 0EBC  
                       ?_nRF_Setup_Read 0070                 __end_of_WriteRegisterRF 0F11  
                            _INTCONbits 000B                         ?_MFRC522_ToCard 0022  
                       ?_MFRC522_isCard 0070                                intlevel1 0000  
                           _MUSHROOM_ON 007B                       __CFG_CLKOUTEN$OFF 0000  
                            _OSCCONbits 0099                    __CFG_CPUDIV$NOCLKDIV 0000  
                       ReadPayload@data 0073                          ?_MFRC522_Reset 0070  
                         _nRF_available 0EE0                           __pstringtext1 0624  
                         __pstringtext2 0664                           __pstringtext3 06A4  
                         __pstringtext4 06E4                         ReadRegister@reg 0074  
                       ReadRegister@val 0075                             _SSPCON1bits 0215  
                         ?_MFRC522_Halt 0070                          ReadPayload@num 0076  
                         ?_MFRC522_Init 0070                            ?_MFRC522_CRC 0022  
